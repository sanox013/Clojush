This is the result when I changed the length of vector into two and both of them is two-digits numbers. And I passed 100 as a number in it so that the program has the possibility to multiple it by 100 to generate the desired number. 

And it workes!

Command line args: clojush.problems.padding_problem.padding_problem
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
atom-generators = (integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup string_flush boolean_swap exec_shove exec_y boolean_yank integer_eq string_butlast string_substring integer_mult boolean_or boolean_empty exec_do*while integer_fromstring exec_dup_items boolean_dup_items exec_empty string_shove exec_rot exec_dup boolean_flush string_reverse exec_k boolean_xor integer_gte boolean_dup_times string_replacefirst boolean_shove boolean_rot integer_div integer_lte integer_mod string_concat exec_do*count integer_rot integer_add integer_shove string_dup_times integer_max string_eq integer_stackdepth string_take integer_dup_times boolean_dup exec_dup_times exec_eq string_emptystring string_swap integer_yank exec_while integer_min exec_swap string_stackdepth string_pop integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush string_replace integer_gt boolean_not exec_do*times string_empty exec_pop string_yankdup exec_s integer_lt string_yank exec_noop integer_swap string_split string_fromboolean integer_dup string_rest string_rot exec_yank string_parse_to_chars integer_pop integer_empty integer_dec string_contains string_dup_items exec_stackdepth boolean_and string_length string_frominteger exec_flush exec_when boolean_invert_second_then_and string_dup boolean_yankdup 100 in1 in2)
error-function = #object[clojush.problems.padding_problem.padding_problem$all_errors 0x202898d7 clojush.problems.padding_problem.padding_problem$all_errors@202898d7]
population-size = 500
######################################
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot integer_tag_zip_instruction float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_two_point_crossover float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty integer_tag_genome_instruction print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = version number unavailable
Hash of last Git commit = f41793fbeeddcc09805783bd190eff11b4c76d67
GitHub link = https://github.com/lspector/Clojush/commit/f41793fbeeddcc09805783bd190eff11b4c76d67
alignment-deviation = 10
alternation-rate = 0.01
atom-generators = (integer_sub integer_inc boolean_stackdepth boolean_pop exec_yankdup integer_yankdup string_flush boolean_swap exec_shove exec_y boolean_yank integer_eq string_butlast string_substring integer_mult boolean_or boolean_empty exec_do*while integer_fromstring exec_dup_items boolean_dup_items exec_empty string_shove exec_rot exec_dup boolean_flush string_reverse exec_k boolean_xor integer_gte boolean_dup_times string_replacefirst boolean_shove boolean_rot integer_div integer_lte integer_mod string_concat exec_do*count integer_rot integer_add integer_shove string_dup_times integer_max string_eq integer_stackdepth string_take integer_dup_times boolean_dup exec_dup_times exec_eq string_emptystring string_swap integer_yank exec_while integer_min exec_swap string_stackdepth string_pop integer_dup_items exec_do*range exec_if boolean_invert_first_then_and integer_fromboolean boolean_frominteger boolean_eq integer_flush string_replace integer_gt boolean_not exec_do*times string_empty exec_pop string_yankdup exec_s integer_lt string_yank exec_noop integer_swap string_split string_fromboolean integer_dup string_rest string_rot exec_yank string_parse_to_chars integer_pop integer_empty integer_dec string_contains string_dup_items exec_stackdepth boolean_and string_length string_frominteger exec_flush exec_when boolean_invert_second_then_and string_dup boolean_yankdup 100 in1 in2)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-diversification-test = :gecco2016
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = [:close]
epsilon-lexicase-epsilon = nil
error-function = #object[clojush.problems.padding_problem.padding_problem$all_errors 0x202898d7 clojush.problems.padding_problem.padding_problem$all_errors@202898d7]
error-threshold = 0
evalpush-limit = 150
evalpush-time-limit = 0
final-report-simplifications = 1000
genetic-operator-probabilities = {:uniform-boolean-mutation 0.0, :uniform-addition 0.0, :reproduction 0.0, :uniform-tag-mutation 0.0, :uniform-deletion 0.0, :uniform-close-mutation 0.0, :alternation 0.7, :uniform-string-mutation 0.0, [:make-next-operator-revertable :uniform-silence-mutation] 0.0, :uniform-float-mutation 0.0, [:alternation :uniform-mutation] 0.2, :uniform-crossover 0.0, :uniform-mutation 0.1, :uniform-integer-mutation 0.0, :two-point-crossover 0.0, :uniform-silence-mutation 0.0, :autoconstruction 0.0, :uniform-instruction-mutation 0.0}
json-log-filename = log.json
json-log-program-strings = false
lexicase-leakage = 0.1
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 1000
max-generations = 1001
max-genome-size-in-initial-program = 50
max-point-evaluations = 1.0E101
max-points = 200
meta-error-categories = []
normalization = :none
parent-reversion-probability = 1.0
parent-selection = :lexicase
pass-individual-to-error-function = false
pop-when-tagging = true
population-size = 500
print-ancestors-of-solution = false
print-behavioral-diversity = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = false
problem-specific-initial-report = #object[clojush.pushgp.report$default_problem_specific_initial_report 0x2b736fee clojush.pushgp.report$default_problem_specific_initial_report@2b736fee]
problem-specific-report = #object[clojush.pushgp.report$default_problem_specific_report 0x35adf623 clojush.pushgp.report$default_problem_specific_report@35adf623]
random-seed = -44 64 -25 83 -13 -26 84 0 93 68 127 -122 101 -43 97 51
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 100
return-simplified-on-failure = false
reuse-errors = true
run-uuid = #uuid "302b8a25-3098-482f-b7f8-d0996b3d81f0"
silent-instruction-probability = 0.2
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
trivial-geography-radius = 0
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 100 string_length integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (exec_dup 100 integer_mult)
Lexicase best errors: [2950 1787 688 486 710 3990 4979 4975 8688 8990 4080 3088 3777 5667 4268 23 2744 1589 2141 1946 1966 1663 2988 1756 1568 972 6581]
Lexicase best number of elite cases: 21
Lexicase best total error: 85060
Lexicase best mean error: 3150.3704
Lexicase best size: 39
Percent parens: 0.077
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_eq})
Zero cases best program: (exec_yank string_empty boolean_eq)
Zero cases best partial simplification: ()
Zero cases best errors: [10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000 10000]
Zero cases best number of elite cases: 0
Zero cases best number of zero cases: 0
Zero cases best total error: 270000
Zero cases best mean error: 10000.0
Zero cases best size: 4
Percent parens: 0.250
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)
Population mean number of elite cases: 0.05
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 100 string_length integer_mult string_split string_replace string_replacefirst))
Partial simplification: (exec_dup 100 integer_mult)
Errors: [2950 1787 688 486 710 3990 4979 4975 8688 8990 4080 3088 3777 5667 4268 23 2744 1589 2141 1946 1966 1663 2988 1756 1568 972 6581]
Total: 85060
Mean: 3150.3704
Genome size: 36
Size: 39
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 241473.478
Median total errors in population: 270000
Error averages by case: (9007.922 9398.76 9749.976 9814.498 9737.412 8670.768 8348.428 8349.552 7106.418 7007.036 8641.09 8982.984 8739.636 8124.156 8579.716 9960.268 9074.984 9446.782 9275.436 9334.922 9329.438 9427.944 9014.942 9397.182 9458.41 9654.702 7840.116)
Error minima by case: (2950 1787 688 486 710 3990 4920 4924 1211 909 4080 3088 3777 4232 4268 23 2744 1589 2141 1946 1966 1663 2988 1756 1568 972 3318)
Average genome size in population (length): 25.28
Average program size in population (points): 32.016
Average percent parens in population: 0.217
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.082
Error (vector) diversity:			 0.082
--- Run Statistics ---
Number of program evaluations used so far: 500
Number of point (instruction) evaluations so far: 453374
--- Timings ---
Current time: 1481337366916 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 99 string_length integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (exec_dup 99 integer_mult)
Lexicase best errors: [2751 1588 489 287 511 3791 4780 4776 8489 8791 3881 2889 3578 5468 4069 176 2545 1390 1942 1747 1767 1464 2789 1557 1369 773 6382]
Lexicase best number of elite cases: 22
Lexicase best total error: 80039
Lexicase best mean error: 2964.4075
Lexicase best size: 39
Percent parens: 0.077
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction string_length} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 100 string_length string_split string_replace string_replacefirst))
Zero cases best partial simplification: (100)
Zero cases best errors: [6950 8113 9212 9414 9190 5910 4921 4925 1212 910 5820 6812 6123 4233 5632 9877 7156 8311 7759 7954 7934 8237 6912 8144 8332 8928 3319]
Zero cases best number of elite cases: 0
Zero cases best number of zero cases: 0
Zero cases best total error: 182240
Zero cases best mean error: 6749.6294
Zero cases best size: 49
Percent parens: 0.082
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1 1 1 1 1 98 98 1 1 1 98 1 1 1 1 1 1 1 1 1 1 1 1 98)
Population mean number of elite cases: 0.83
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 99 string_length integer_mult string_split string_replace string_replacefirst))
Partial simplification: (exec_dup 99 integer_mult)
Errors: [2751 1588 489 287 511 3791 4780 4776 8489 8791 3881 2889 3578 5468 4069 176 2545 1390 1942 1747 1767 1464 2789 1557 1369 773 6382]
Total: 80039
Mean: 2964.4075
Genome size: 36
Size: 39
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 5.5631886908E8
Median total errors in population: 85060
Error averages by case: (2.0604330826E7 2.0603914496E7 2.0603521076E7 2.0603448764E7 2.0603528946E7 2.0604703126E7 2.0605057168E7 2.0605055736E7 2.0606384916E7 2.0606493026E7 2.0604735344E7 2.0604380228E7 2.0604626876E7 2.0605303438E7 2.0604802594E7 2.0603283678E7 2.060425705E7 2.060384347E7 2.060404122E7 2.0603971362E7 2.0603978482E7 2.0603870014E7 2.060434443E7 2.0603903322E7 2.0603836098E7 2.0603622742E7 2.0605630652E7)
Error minima by case: (2751 1588 489 287 511 3791 4780 4776 1211 909 3881 2889 3578 4232 4069 22 2545 1390 1942 1747 1767 1464 2789 1557 1369 773 3318)
Average genome size in population (length): 31.33
Average program size in population (points): 34.612
Average percent parens in population: 0.104
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 257
Genome diversity (% unique Plush genomes):	 0.302
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 257
Syntactic diversity (% unique Push programs):	 0.302
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1093184
--- Timings ---
Current time: 1481337371479 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 99 string_length integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (exec_dup 99 integer_mult)
Lexicase best errors: [2751 1588 489 287 511 3791 4780 4776 8489 8791 3881 2889 3578 5468 4069 176 2545 1390 1942 1747 1767 1464 2789 1557 1369 773 6382]
Lexicase best number of elite cases: 22
Lexicase best total error: 80039
Lexicase best mean error: 2964.4075
Lexicase best size: 39
Percent parens: 0.077
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 100 string_length integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 100 string_length integer_mult string_split string_replace string_replacefirst)))
Zero cases best errors: [2949 1786 687 485 709 3989 4978 4974 8687 8989 4079 3087 3776 5666 4267 22 2743 1588 2140 1945 1965 1662 2987 1755 1567 971 6580]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 0
Zero cases best total error: 85033
Zero cases best mean error: 3149.3704
Zero cases best size: 48
Percent parens: 0.083
--- Lexicase Population Statistics ---
Count of elite individuals by case: (348 348 348 348 348 348 348 348 1 1 348 348 348 1 348 19 348 348 348 348 348 348 348 348 348 348 1)
Population mean number of elite cases: 15.36
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 99 string_length integer_mult string_split string_replace string_replacefirst))
Partial simplification: (exec_dup 99 integer_mult)
Errors: [2751 1588 489 287 511 3791 4780 4776 8489 8791 3881 2889 3578 5468 4069 176 2545 1390 1942 1747 1767 1464 2789 1557 1369 773 6382]
Total: 80039
Mean: 2964.4075
Genome size: 36
Size: 39
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 162513.01
Median total errors in population: 80039
Error averages by case: (5906.534 5306.426 4739.342 4635.11 4750.694 6443.194 6953.498 6951.434 8867.342 9023.194 6489.614 5977.742 6333.266 7308.506 6586.622 4641.194 5800.238 5204.258 5489.09 5388.47 5398.79 5242.442 5926.142 5290.43 5193.422 4885.886 7780.13)
Error minima by case: (2751 1588 489 287 511 3791 4780 4776 1114 812 3881 2889 3578 4135 4069 22 2545 1390 1942 1747 1767 1464 2789 1557 1369 773 3221)
Average genome size in population (length): 33.246
Average program size in population (points): 36.51
Average percent parens in population: 0.095
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 266
Genome diversity (% unique Plush genomes):	 0.322
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 266
Syntactic diversity (% unique Push programs):	 0.322
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
--- Run Statistics ---
Number of program evaluations used so far: 1500
Number of point (instruction) evaluations so far: 1825696
--- Timings ---
Current time: 1481337377922 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (exec_dup 98 integer_mult)
Lexicase best errors: [2554 1391 292 90 314 3594 4583 4579 8292 8594 3684 2692 3381 5271 3872 373 2348 1193 1745 1550 1570 1267 2592 1360 1172 576 6185]
Lexicase best number of elite cases: 22
Lexicase best total error: 75114
Lexicase best mean error: 2782.0
Lexicase best size: 39
Percent parens: 0.077
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_flush} {:close 0, :instruction exec_y} {:close 0, :instruction integer_gte} {:close 1, :instruction exec_stackdepth})
Zero cases best program: (string_flush exec_y (integer_gte exec_stackdepth))
Zero cases best partial simplification: (exec_y exec_stackdepth)
Zero cases best errors: [7049 8212 9311 9513 9289 6009 5020 5024 1311 1009 5919 6911 6222 4332 5731 9976 7255 8410 7858 8053 8033 8336 7011 8243 8431 9027 3418]
Zero cases best number of elite cases: 0
Zero cases best number of zero cases: 0
Zero cases best total error: 184913
Zero cases best mean error: 6848.6294
Zero cases best size: 6
Percent parens: 0.333
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1 1 1 1 1 70 70 1 1 1 70 1 14 1 1 1 1 1 1 1 1 1 1 70)
Population mean number of elite cases: 0.63
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Partial simplification: (exec_dup 98 integer_mult)
Errors: [2554 1391 292 90 314 3594 4583 4579 8292 8594 3684 2692 3381 5271 3872 373 2348 1193 1745 1550 1570 1267 2592 1360 1172 576 6185]
Total: 75114
Mean: 2782.0
Genome size: 36
Size: 39
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 111207.104
Median total errors in population: 80039
Error averages by case: (4009.104 3425.278 2873.58 2772.176 2884.624 4531.184 5027.662 5025.654 6889.58 7041.184 4576.364 4078.38 4424.258 5373.038 4670.74 2785.226 3905.692 3325.882 3602.986 3505.096 3515.136 3363.03 4028.18 3409.716 3315.34 3016.148 5831.866)
Error minima by case: (2554 1391 292 90 314 3594 4583 4579 1114 812 3684 2692 3381 4135 3872 22 2348 1193 1745 1550 1570 1267 2592 1360 1172 576 3221)
Average genome size in population (length): 35.698
Average program size in population (points): 38.884
Average percent parens in population: 0.083
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 197
Genome diversity (% unique Plush genomes):	 0.426
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 197
Syntactic diversity (% unique Push programs):	 0.426
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2616823
--- Timings ---
Current time: 1481337383200 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (exec_dup 98 integer_mult)
Lexicase best errors: [2554 1391 292 90 314 3594 4583 4579 8292 8594 3684 2692 3381 5271 3872 373 2348 1193 1745 1550 1570 1267 2592 1360 1172 576 6185]
Lexicase best number of elite cases: 22
Lexicase best total error: 75114
Lexicase best mean error: 2782.0
Lexicase best size: 39
Percent parens: 0.077
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup 98 integer_mult)
Zero cases best errors: [2554 1391 292 90 314 3594 4583 4579 8292 8594 3684 2692 3381 5271 3872 373 2348 1193 1745 1550 1570 1267 2592 1360 1172 576 6185]
Zero cases best number of elite cases: 22
Zero cases best number of zero cases: 0
Zero cases best total error: 75114
Zero cases best mean error: 2782.0
Zero cases best size: 39
Percent parens: 0.077
--- Lexicase Population Statistics ---
Count of elite individuals by case: (352 352 352 352 352 352 352 352 59 59 352 352 352 59 352 15 352 352 352 352 352 352 352 352 352 352 59)
Population mean number of elite cases: 15.99
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Partial simplification: (exec_dup 98 integer_mult)
Errors: [2554 1391 292 90 314 3594 4583 4579 8292 8594 3684 2692 3381 5271 3872 373 2348 1193 1745 1550 1570 1267 2592 1360 1172 576 6185]
Total: 75114
Mean: 2782.0
Genome size: 36
Size: 39
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 211472.442
Median total errors in population: 75114
Error averages by case: (7707.426 7095.664 6517.568 6411.312 6529.146 8254.486 8774.72 8773.006 10725.728 10884.586 8301.828 7780.016 8142.444 9136.642 8400.77 6692.994 7599.098 6991.658 7281.876 7179.354 7189.914 7030.53 7727.414 7079.434 6980.466 6666.958 9617.404)
Error minima by case: (2554 1391 292 90 314 3594 4583 4579 1114 812 3684 2692 3381 4135 3872 22 2348 1193 1745 1550 1570 1267 2592 1360 1172 576 3221)
Average genome size in population (length): 35.272
Average program size in population (points): 38.4
Average percent parens in population: 0.083
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 273
Genome diversity (% unique Plush genomes):	 0.356
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 273
Syntactic diversity (% unique Push programs):	 0.356
Total error diversity:				 0.032
Error (vector) diversity:			 0.032
--- Run Statistics ---
Number of program evaluations used so far: 2500
Number of point (instruction) evaluations so far: 3399283
--- Timings ---
Current time: 1481337387840 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (exec_dup (integer_dec 98 integer_mult))
Lexicase best errors: [2456 1293 194 8 216 3496 4485 4481 8194 8496 3586 2594 3283 5173 3774 471 2250 1095 1647 1452 1472 1169 2494 1262 1074 478 6087]
Lexicase best number of elite cases: 22
Lexicase best total error: 72680
Lexicase best mean error: 2691.8518
Lexicase best size: 32
Percent parens: 0.094
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean integer_stackdepth integer_mult string_split string_replace string_replacefirst)
Zero cases best partial simplification: (integer_stackdepth)
Zero cases best errors: [7050 8213 9312 9514 9290 6010 5021 5025 1312 1010 5920 6912 6223 4333 5732 9977 7256 8411 7859 8054 8034 8337 7012 8244 8432 9028 3419]
Zero cases best number of elite cases: 0
Zero cases best number of zero cases: 0
Zero cases best total error: 184940
Zero cases best mean error: 6849.6294
Zero cases best size: 31
Percent parens: 0.065
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 10 1 1 1 1 1 1 1 1 1 1 1)
Population mean number of elite cases: 0.07
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Partial simplification: (exec_dup (integer_dec 98 integer_mult))
Errors: [2456 1293 194 8 216 3496 4485 4481 8194 8496 3586 2594 3283 5173 3774 471 2250 1095 1647 1452 1472 1169 2494 1262 1074 478 6087]
Total: 72680
Mean: 2691.8518
Genome size: 29
Size: 32
Percent parens: 0.094
--- Population Statistics ---
Average total errors in population: 2.059274448316E9
Median total errors in population: 75114
Error averages by case: (7.6269301252E7 7.626870347E7 7.6268138584E7 7.6268034788E7 7.6268149892E7 7.6269835812E7 7.6270344158E7 7.6270342102E7 7.6272250584E7 7.6272405812E7 7.6269882072E7 7.6269372184E7 7.626972633E7 7.627069779E7 7.6269978704E7 7.6268330514E7 7.6269195368E7 7.6268601698E7 7.6268885426E7 7.6268785196E7 7.6268795476E7 7.6268639734E7 7.6269320784E7 7.6268687536E7 7.6268590904E7 7.626828456E7 7.6271167586E7)
Error minima by case: (2456 1293 194 8 216 3496 4485 4481 1015 713 3586 2594 3283 4036 3774 22 2250 1095 1647 1452 1472 1169 2494 1262 1074 478 3122)
Average genome size in population (length): 35.48
Average program size in population (points): 38.606
Average percent parens in population: 0.082
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 219
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 219
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.04
Error (vector) diversity:			 0.04
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4192570
--- Timings ---
Current time: 1481337392129 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (integer_add exec_dup (integer_dec 98 integer_mult))
Lexicase best errors: [2456 1293 194 8 216 3496 4485 4481 8194 8496 3586 2594 3283 5173 3774 471 2250 1095 1647 1452 1472 1169 2494 1262 1074 478 6087]
Lexicase best number of elite cases: 20
Lexicase best total error: 72680
Lexicase best mean error: 2691.8518
Lexicase best size: 32
Percent parens: 0.094
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_mult))
Zero cases best errors: [2456 1293 194 8 216 3496 4485 4481 8194 8496 3586 2594 3283 5173 3774 471 2250 1095 1647 1452 1472 1169 2494 1262 1074 478 6087]
Zero cases best number of elite cases: 20
Zero cases best number of zero cases: 0
Zero cases best total error: 72680
Zero cases best mean error: 2691.8518
Zero cases best size: 32
Percent parens: 0.094
--- Lexicase Population Statistics ---
Count of elite individuals by case: (367 367 367 367 367 367 1 1 1 1 367 367 367 1 367 17 367 367 367 367 367 367 367 367 367 367 1)
Population mean number of elite cases: 14.73
Count of perfect (error zero) individuals by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 string_length integer_mult string_split string_replace string_replacefirst))
Partial simplification: (exec_dup (integer_dec 98 integer_mult))
Errors: [2456 1293 194 8 216 3496 4485 4481 8194 8496 3586 2594 3283 5173 3774 471 2250 1095 1647 1452 1472 1169 2494 1262 1074 478 6087]
Total: 72680
Mean: 2691.8518
Genome size: 29
Size: 32
Percent parens: 0.094
--- Population Statistics ---
Average total errors in population: 4.7357378904364E10
Median total errors in population: 72680
Error averages by case: (1.753976850372E9 1.753976154898E9 1.753975497696E9 1.753975388644E9 1.753975510852E9 1.753977472292E9 1.753978063714E9 1.753978061322E9 1.753980281696E9 1.753980462292E9 1.753977526112E9 1.753976932896E9 1.753977344918E9 1.753978475138E9 1.753977638536E9 1.753975797422E9 1.753976727184E9 1.753976036494E9 1.75397636659E9 1.75397624998E9 1.75397626194E9 1.753976080746E9 1.753976873096E9 1.75397613636E9 1.753976023936E9 1.753975667528E9 1.75397902171E9)
Error minima by case: (2456 1293 194 8 216 3496 4328 4332 619 317 3586 2594 3283 3640 3774 22 2250 1095 1647 1452 1472 1169 2494 1262 1074 478 2726)
Average genome size in population (length): 29.43
Average program size in population (points): 32.466
Average percent parens in population: 0.094
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 303
Genome diversity (% unique Plush genomes):	 0.27
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 303
Syntactic diversity (% unique Push programs):	 0.27
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
--- Run Statistics ---
Number of program evaluations used so far: 3500
Number of point (instruction) evaluations so far: 4787542
--- Timings ---
Current time: 1481337396227 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Lexicase best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Lexicase best number of elite cases: 15
Lexicase best total error: 68218
Lexicase best mean error: 2526.5925
Lexicase best size: 36
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 15
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 1 330 1 1 1 1 1 3 1 1 1 1 1 8 1 1 1 1 1 1 1 1 1 1 1)
Population mean number of elite cases: 0.73
Count of perfect (error zero) individuals by case: (0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult string_replace))
Errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Total: 68218
Mean: 2526.5925
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 1.02333622398914E11
Median total errors in population: 72680
Error averages by case: (3.790134057418E9 3.790133587566E9 3.79013314357E9 3.790133073754E9 3.790133152458E9 3.790134477578E9 3.790134877134E9 3.790134875518E9 3.790136384578E9 3.790136511038E9 3.790134513938E9 3.79013411317E9 3.790134391526E9 3.790135155086E9 3.79013458989E9 3.790133503058E9 3.790133974194E9 3.790133507574E9 3.790133730582E9 3.790133651802E9 3.790133659882E9 3.79013353747E9 3.79013407277E9 3.790133575042E9 3.79013349909E9 3.790133258306E9 3.790135524922E9)
Error minima by case: (2262 1099 0 8 22 2446 1457 1461 25 178 2356 2400 2659 769 2168 22 2056 901 1453 1258 1278 975 2300 1068 880 284 145)
Average genome size in population (length): 30.28
Average program size in population (points): 33.636
Average percent parens in population: 0.100
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 217
Genome diversity (% unique Plush genomes):	 0.352
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 217
Syntactic diversity (% unique Push programs):	 0.352
Total error diversity:				 0.05
Error (vector) diversity:			 0.05
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5427172
--- Timings ---
Current time: 1481337400762 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (98 in2 integer_mult)
Lexicase best errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Lexicase best number of elite cases: 14
Lexicase best total error: 34314
Lexicase best mean error: 1270.8889
Lexicase best size: 42
Percent parens: 0.095
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 2
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 242 13 242 1 1 1 15 1 1 1 1 2 2 17 1 1 1 1 1 1 1 1 1 1 1)
Population mean number of elite cases: 1.11
Count of perfect (error zero) individuals by case: (0 0 242 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (98 in2 integer_mult)
Errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Total: 34314
Mean: 1270.8889
Genome size: 38
Size: 42
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 1.51212920925722E11
Median total errors in population: 72680
Error averages by case: (5.600517300398E9 5.60058596631E9 5.600658524574E9 5.600672903474E9 5.600637765998E9 5.600468459258E9 5.60042721271E9 5.600427211878E9 5.600341737974E9 5.600339455126E9 5.600463990518E9 5.600512081122E9 5.60047761803E9 5.60037434703E9 5.600371620808E9 5.60055624011E9 5.60045070973E9 5.600337525916E9 5.600561853838E9 5.600442255274E9 5.600376090314E9 5.600384013926E9 5.600517308302E9 5.60040532899E9 5.600598470122E9 5.600637819494E9 5.600377114498E9)
Error minima by case: (190 177 0 8 22 130 121 125 25 30 138 150 147 518 881 22 1768 803 215 1160 1180 877 152 970 200 186 87)
Average genome size in population (length): 33.232
Average program size in population (points): 37.306
Average percent parens in population: 0.110
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 195
Genome diversity (% unique Plush genomes):	 0.358
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.358
Total error diversity:				 0.102
Error (vector) diversity:			 0.102
--- Run Statistics ---
Number of program evaluations used so far: 4500
Number of point (instruction) evaluations so far: 6192028
--- Timings ---
Current time: 1481337406255 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (98 in2 integer_mult)
Lexicase best errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Lexicase best number of elite cases: 13
Lexicase best total error: 34314
Lexicase best mean error: 1270.8889
Lexicase best size: 40
Percent parens: 0.100
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 237 32 19 1 237 237 237 1 237 237 237 237 1 1 13 1 1 237 1 1 1 237 1 237 1 237)
Population mean number of elite cases: 6.31
Count of perfect (error zero) individuals by case: (0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (98 in2 integer_mult)
Errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Total: 34314
Mean: 1270.8889
Genome size: 38
Size: 42
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 5.4001409499036E10
Median total errors in population: 66312
Error averages by case: (2.000047261828E9 2.00000460114E9 2.000004027632E9 2.000004998276E9 2.00015767716E9 2.000003766488E9 2.000009927268E9 2.000013238908E9 2.000005651286E9 2.000004998086E9 2.0000090506E9 2.000004375836E9 2.00001131728E9 2.000036218876E9 2.000062457388E9 2.000183760908E9 2.0000976501E9 2.000134876512E9 2.000065255224E9 2.000120567712E9 2.000121494152E9 2.000130535612E9 2.000004359904E9 2.000127113712E9 2.000019941916E9 2.000015480456E9 2.000008894776E9)
Error minima by case: (190 177 0 8 21 130 121 125 1 30 138 150 147 162 203 22 272 263 215 294 274 286 152 290 200 92 87)
Average genome size in population (length): 35.752
Average program size in population (points): 39.886
Average percent parens in population: 0.105
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 163
Genome diversity (% unique Plush genomes):	 0.396
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 163
Syntactic diversity (% unique Push programs):	 0.396
Total error diversity:				 0.068
Error (vector) diversity:			 0.068
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6908484
--- Timings ---
Current time: 1481337411592 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (string_parse_to_chars) string_flush integer_pop integer_gt exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (98 in2 integer_mult)
Lexicase best errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Lexicase best number of elite cases: 13
Lexicase best total error: 34314
Lexicase best mean error: 1270.8889
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (integer_min exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 216 19 16 16 216 216 216 17 216 216 216 216 143 143 7 143 143 216 143 143 143 216 143 216 10 216)
Population mean number of elite cases: 8.07
Count of perfect (error zero) individuals by case: (0 0 19 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (98 in2 integer_mult)
Errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Total: 34314
Mean: 1270.8889
Genome size: 33
Size: 37
Percent parens: 0.108
--- Population Statistics ---
Average total errors in population: 1451293.256
Median total errors in population: 68218
Error averages by case: (49059.264 6523.402 6355.604 7363.856 160735.668 4775.384 10641.194 13991.514 4412.388 3590.664 10116.044 5765.62 12532.202 36766.802 63684.08 186855.358 99665.024 137222.282 67461.37 122934.148 123767.628 132958.266 5789.88 129523.692 22128.4 17869.832 8803.69)
Error minima by case: (190 177 0 8 21 130 121 125 1 30 138 150 147 162 203 22 272 263 215 294 274 286 152 290 200 92 87)
Average genome size in population (length): 34.494
Average program size in population (points): 38.588
Average percent parens in population: 0.107
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 114
Genome diversity (% unique Plush genomes):	 0.432
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.432
Total error diversity:				 0.054
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 5500
Number of point (instruction) evaluations so far: 7604274
--- Timings ---
Current time: 1481337415882 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (98 in2 integer_mult)
Lexicase best errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Lexicase best number of elite cases: 13
Lexicase best total error: 34314
Lexicase best mean error: 1270.8889
Lexicase best size: 42
Percent parens: 0.095
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 217 24 22 14 217 217 217 16 217 217 217 217 124 124 10 124 124 217 124 124 124 217 124 217 17 217)
Population mean number of elite cases: 7.83
Count of perfect (error zero) individuals by case: (0 0 24 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast integer_min integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (98 in2 integer_mult)
Errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Total: 34314
Mean: 1270.8889
Genome size: 38
Size: 42
Percent parens: 0.095
--- Population Statistics ---
Average total errors in population: 5570135.41
Median total errors in population: 68218
Error averages by case: (235353.866 159146.754 194012.904 205910.6 487434.702 92094.286 97183.81 107922.786 29961.64 24167.018 113568.06 118972.288 128465.154 137075.722 188773.372 485167.294 293358.814 295613.35 293264.258 327438.926 294483.086 313413.65 121656.65 318979.626 216196.598 224521.906 65998.29)
Error minima by case: (190 177 0 8 21 130 121 125 1 30 138 150 147 162 203 22 272 263 215 294 274 286 152 290 200 92 87)
Average genome size in population (length): 34.452
Average program size in population (points): 38.532
Average percent parens in population: 0.107
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8300955
--- Timings ---
Current time: 1481337420417 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_replacefirst))
Lexicase best partial simplification: (98 in2 integer_mult)
Lexicase best errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Lexicase best number of elite cases: 13
Lexicase best total error: 34314
Lexicase best mean error: 1270.8889
Lexicase best size: 21
Percent parens: 0.095
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 28
Percent parens: 0.071
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 222 16 25 16 222 222 222 17 224 222 222 222 2 2 12 2 2 222 2 2 2 222 2 222 16 222)
Population mean number of elite cases: 6.01
Count of perfect (error zero) individuals by case: (0 0 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (98 in2 integer_mult)
Errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Total: 34314
Mean: 1270.8889
Genome size: 30
Size: 34
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 4.497573171851E10
Median total errors in population: 68197
Error averages by case: (1.665767203822E9 1.665768232764E9 1.665768442962E9 1.665768468586E9 1.665766684466E9 1.665767954402E9 1.665767553756E9 1.665767462212E9 1.66576716429E9 1.665767188082E9 1.665767717834E9 1.665768049298E9 1.66576769624E9 1.665767369648E9 1.665767912676E9 1.665767671004E9 1.665767418426E9 1.66576977849E9 1.665767123352E9 1.665767790042E9 1.665768648442E9 1.665768626848E9 1.665768065186E9 1.665768290686E9 1.665767835402E9 1.665768021074E9 1.66576734852E9)
Error minima by case: (190 177 0 8 21 130 121 125 1 30 138 150 147 119 146 22 200 179 215 214 194 203 152 208 200 92 87)
Average genome size in population (length): 33.932
Average program size in population (points): 37.984
Average percent parens in population: 0.107
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.052
Error (vector) diversity:			 0.052
--- Run Statistics ---
Number of program evaluations used so far: 6500
Number of point (instruction) evaluations so far: 8990526
--- Timings ---
Current time: 1481337425509 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (98 in2 integer_mult)
Lexicase best errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Lexicase best number of elite cases: 12
Lexicase best total error: 34314
Lexicase best mean error: 1270.8889
Lexicase best size: 42
Percent parens: 0.095
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 203 17 19 11 204 203 203 12 1 203 203 203 1 1 10 1 1 203 1 1 1 203 1 203 14 203)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (0 0 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (98 in2 integer_mult)
Errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Total: 34314
Mean: 1270.8889
Genome size: 19
Size: 22
Percent parens: 0.136
--- Population Statistics ---
Average total errors in population: 75290.766
Median total errors in population: 72680
Error averages by case: (2158.714 3524.012 3847.546 3854.326 1555.334 3058.504 2514.684 2398.604 1855.686 1798.214 2763.122 3249.046 2753.992 2092.7 2625.18 2476.812 2201.058 4403.418 2090.752 2562.358 3355.918 3342.82 3273.608 3030.158 3029.434 3293.302 2181.464)
Error minima by case: (190 177 0 8 21 130 121 125 1 20 138 150 147 76 89 22 128 95 215 134 114 120 152 126 200 92 87)
Average genome size in population (length): 34.916
Average program size in population (points): 39.222
Average percent parens in population: 0.110
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9681765
--- Timings ---
Current time: 1481337430362 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult))
Lexicase best partial simplification: (98 in2 integer_mult)
Lexicase best errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Lexicase best number of elite cases: 12
Lexicase best total error: 34314
Lexicase best mean error: 1270.8889
Lexicase best size: 31
Percent parens: 0.129
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 200 17 18 12 200 200 200 20 150 200 200 200 150 150 17 150 150 200 150 150 150 200 150 200 18 200)
Population mean number of elite cases: 7.70
Count of perfect (error zero) individuals by case: (0 0 17 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (98 in2 integer_mult)
Errors: [190 177 198 204 470 130 121 125 38 30 138 150 147 1099 2596 2431 1768 7333 215 2762 4702 4711 152 3932 200 208 87]
Total: 34314
Mean: 1270.8889
Genome size: 33
Size: 37
Percent parens: 0.108
--- Population Statistics ---
Average total errors in population: 1.8854520572322E10
Median total errors in population: 71684
Error averages by case: (8.85569210948E8 1.215217599262E9 1.56311918584E9 1.631072965672E9 1.463898810096E9 6.5062308319E8 4.51822075536E8 4.51822036768E8 3.054494638E7 1.8074747038E7 6.29116343516E8 8.60448375228E8 6.94720611128E8 1.96815113552E8 1.8506854794E8 1.071539433248E9 5.66765604876E8 2.1873661584E7 1.09955117844E9 5.27005945092E8 2.08925690612E8 2.47420747424E8 8.8556957942E8 3.4989311086E8 1.275219139212E9 1.463899298252E9 2.08923531208E8)
Error minima by case: (190 177 0 8 21 130 121 125 1 20 138 150 147 76 89 22 128 95 215 134 114 120 152 126 200 92 87)
Average genome size in population (length): 34.722
Average program size in population (points): 39.044
Average percent parens in population: 0.111
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.06
Error (vector) diversity:			 0.06
--- Run Statistics ---
Number of program evaluations used so far: 7500
Number of point (instruction) evaluations so far: 10381956
--- Timings ---
Current time: 1481337434905 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 36
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 13 24 15 1 1 1 13 164 1 1 1 163 163 12 163 163 1 163 163 163 1 163 1 16 1)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (0 0 13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 1283655.224
Median total errors in population: 71684
Error averages by case: (49973.902 93818.272 153294.874 166603.57 132427.314 28915.762 14923.472 14796.872 1953.554 1928.798 26891.57 48468.43 32181.812 4335.736 4522.172 72402.608 21601.214 4097.484 75878.476 19258.066 5711.866 6759.808 51176.602 10202.018 102411.67 134318.482 4800.82)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 92 53)
Average genome size in population (length): 34.184
Average program size in population (points): 38.432
Average percent parens in population: 0.111
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 86
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.054
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11050449
--- Timings ---
Current time: 1481337440180 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 36
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult boolean_and string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 33
Percent parens: 0.121
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 198 14 14 17 198 198 198 17 360 198 198 198 162 162 8 162 162 198 162 162 162 198 162 198 21 198)
Population mean number of elite cases: 8.25
Count of perfect (error zero) individuals by case: (0 0 14 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 5.400355052788E10
Median total errors in population: 68218
Error averages by case: (2.000146952142E9 2.000138479514E9 2.000176042062E9 2.00018446133E9 2.000325889814E9 2.000075444162E9 2.00005997233E9 2.000063452562E9 2.000007833074E9 2.000005628076E9 2.00007865119E9 2.00009922265E9 2.000088274254E9 2.000059435058E9 2.000086089628E9 2.000310443686E9 2.000164962646E9 2.000144694036E9 2.000189302518E9 2.000184819558E9 2.000151099318E9 2.000164838802E9 2.000101971922E9 2.000172414134E9 2.00016119523E9 2.000177229338E9 2.000031728846E9)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 92 53)
Average genome size in population (length): 33.284
Average program size in population (points): 37.606
Average percent parens in population: 0.115
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 156
Genome diversity (% unique Plush genomes):	 0.436
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 156
Syntactic diversity (% unique Push programs):	 0.436
Total error diversity:				 0.054
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 8500
Number of point (instruction) evaluations so far: 11714412
--- Timings ---
Current time: 1481337444739 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_min string_yank) integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 45
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 221 20 17 11 221 221 221 11 371 221 221 221 150 150 9 150 150 221 150 150 150 221 150 221 10 221)
Population mean number of elite cases: 8.60
Count of perfect (error zero) individuals by case: (0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 2114312.368
Median total errors in population: 68218
Error averages by case: (97938.65 135070.056 173112.276 180506.752 160078.802 73376.558 51252.504 51134.064 4944.444 3573.168 70731.564 96303.324 77831.556 23221.198 22529.328 118500.554 63467.31 6780.43 121080.276 59549.43 25915.67 30076.526 99052.434 40849.346 141064.194 161794.862 24577.092)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 92 53)
Average genome size in population (length): 32.772
Average program size in population (points): 37.022
Average percent parens in population: 0.115
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 133
Genome diversity (% unique Plush genomes):	 0.492
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 133
Syntactic diversity (% unique Push programs):	 0.492
Total error diversity:				 0.054
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12364714
--- Timings ---
Current time: 1481337448963 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 36
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_min integer_min exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 25
Percent parens: 0.080
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 217 20 21 15 217 217 217 12 348 217 217 217 131 131 16 131 131 217 131 131 131 217 131 217 20 217)
Population mean number of elite cases: 8.21
Count of perfect (error zero) individuals by case: (0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 5.4000069194214E10
Median total errors in population: 68197
Error averages by case: (2.000001906322E9 2.000003022652E9 2.000003226542E9 2.000003250586E9 2.000001265722E9 2.000002780502E9 2.00000234526E9 2.000002243812E9 2.00000202655E9 2.000002067282E9 2.000002504074E9 2.00000285525E9 2.000002472472E9 2.00000210744E9 2.000002595874E9 2.000002228648E9 2.000002056318E9 2.000004346368E9 2.000001796688E9 2.000002395986E9 2.000003243866E9 2.000003212264E9 2.000002870078E9 2.000002883646E9 2.00000257043E9 2.000002760846E9 2.000002158736E9)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 92 53)
Average genome size in population (length): 33.138
Average program size in population (points): 37.424
Average percent parens in population: 0.115
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.05
Error (vector) diversity:			 0.05
--- Run Statistics ---
Number of program evaluations used so far: 9500
Number of point (instruction) evaluations so far: 13051591
--- Timings ---
Current time: 1481337453016 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 36
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 29
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 221 20 16 18 221 221 221 18 361 221 221 221 140 140 7 140 140 221 140 140 140 221 140 221 13 221)
Population mean number of elite cases: 8.45
Count of perfect (error zero) individuals by case: (0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add integer_min integer_min string_yank) boolean_not exec_do*times (integer_stackdepth) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 45
Size: 51
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 6136874.554
Median total errors in population: 68197
Error averages by case: (222295.872 181062.13 180892.252 181842.428 332349.92 179508.732 185019.084 188221.972 179246.3 178508.548 184498.212 180390.868 186792.936 210375.556 236750.742 358234.124 272109.756 309274.758 240337.296 295071.456 295937.736 305006.94 180411.308 301599.724 195977.772 191844.916 183313.216)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 92 53)
Average genome size in population (length): 33.142
Average program size in population (points): 37.448
Average percent parens in population: 0.116
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.052
Error (vector) diversity:			 0.052
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 13715537
--- Timings ---
Current time: 1481337457216 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank boolean_not exec_do*times (exec_yank integer_dec integer_max integer_dup integer_add boolean_rot boolean_not string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 40
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (222 222 11 17 17 222 222 222 16 354 222 222 222 132 132 8 132 132 222 132 132 132 222 132 222 1 222)
Population mean number of elite cases: 8.29
Count of perfect (error zero) individuals by case: (0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min integer_min string_yank) boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 76815.53
Median total errors in population: 68218
Error averages by case: (2192.316 3430.022 3720.042 3745.37 1715.88 2991.056 2470.646 2367.246 1822.982 1822.148 2708.986 3151.126 2702.122 2172.008 2796.122 2708.724 2371.148 4828.178 2147.298 2790.336 3662.856 3656.592 3174.616 3309.936 2985.636 3229.152 2142.986)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 4 53)
Average genome size in population (length): 33.448
Average program size in population (points): 37.822
Average percent parens in population: 0.116
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.052
Error (vector) diversity:			 0.052
--- Run Statistics ---
Number of program evaluations used so far: 10500
Number of point (instruction) evaluations so far: 14382221
--- Timings ---
Current time: 1481337461353 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 36
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_min integer_min string_yank) boolean_not exec_do*times (string_split string_replace integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 53
Percent parens: 0.113
--- Lexicase Population Statistics ---
Count of elite individuals by case: (204 204 23 11 11 204 204 204 19 345 204 204 204 141 141 11 141 141 204 141 141 141 204 141 204 22 204)
Population mean number of elite cases: 8.04
Count of perfect (error zero) individuals by case: (0 0 23 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add string_dup boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 32
Size: 36
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 76702.608
Median total errors in population: 68218
Error averages by case: (2210.52 3491.724 3786.604 3821.64 1642.816 3090.2 2567.788 2457.82 2001.292 2013.228 2793.28 3233.216 2776.804 2206.724 2726.476 2574.136 2286.112 4487.44 2139.092 2639.936 3435.456 3418.98 3255.216 3106.264 3013.376 3255.696 2270.772)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 4 53)
Average genome size in population (length): 33.444
Average program size in population (points): 37.774
Average percent parens in population: 0.117
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.658
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.658
Total error diversity:				 0.044
Error (vector) diversity:			 0.044
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 15061649
--- Timings ---
Current time: 1481337465502 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_rot} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_length} {:close 0, :instruction exec_yank} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not boolean_rot exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_length exec_yank 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 35
Percent parens: 0.086
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 210 15 11 13 210 210 210 16 358 210 210 210 147 147 10 147 147 210 147 147 147 210 147 210 13 210)
Population mean number of elite cases: 8.26
Count of perfect (error zero) individuals by case: (0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_min integer_min integer_min string_yank integer_min integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth boolean_eq integer_fromboolean string_flush boolean_and exec_dup (boolean_invert_second_then_and string_swap) string_parse_to_chars) string_flush integer_pop string_dup string_yank integer_gt string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst)
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 42
Size: 46
Percent parens: 0.087
--- Population Statistics ---
Average total errors in population: 2242843.28
Median total errors in population: 68218
Error averages by case: (102941.596 140429.028 178881.574 186357.522 165792.444 78070.996 55710.372 55596.676 8815.024 7444.684 75403.778 101242.77 82586.228 27371.914 26681.772 123759.058 68104.164 10736.662 126342.74 64148.3 30125.74 34338.49 104021.708 45236.596 146515.94 167461.052 28726.452)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 4 53)
Average genome size in population (length): 33.138
Average program size in population (points): 37.488
Average percent parens in population: 0.118
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.064
Error (vector) diversity:			 0.064
--- Run Statistics ---
Number of program evaluations used so far: 11500
Number of point (instruction) evaluations so far: 15728348
--- Timings ---
Current time: 1481337469646 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction integer_add} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) integer_add string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 52
Percent parens: 0.096
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 213 11 21 17 213 213 213 19 343 213 213 213 130 130 13 130 130 213 130 130 130 213 130 213 13 213)
Population mean number of elite cases: 8.07
Count of perfect (error zero) individuals by case: (0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max integer_min integer_min string_yank) boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max integer_dup integer_add boolean_rot boolean_not string_swap) string_parse_to_chars integer_lte integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.8840989768784E10
Median total errors in population: 68218
Error averages by case: (8.849416681E8 1.21440835312E9 1.562123632954E9 1.63004152197E9 1.462954669084E9 6.501313229E8 4.51450102784E8 4.5145000232E8 3.048469929E7 1.8030668548E7 6.28637109086E8 8.59835619254E8 6.9420283388E8 1.9661183766E8 1.8487366838E8 1.070807505326E9 5.66322734204E8 2.1823404008E7 1.098804414248E9 5.26586966228E8 2.08713211056E8 2.47181135482E8 8.84942622508E8 3.4958496182E8 1.274377092044E9 1.46295613854E9 2.0871187399E8)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 4 53)
Average genome size in population (length): 32.818
Average program size in population (points): 37.13
Average percent parens in population: 0.116
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.054
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 16391313
--- Timings ---
Current time: 1481337474635 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_do*times (integer_min string_yank) string_yank) boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (99 in2 integer_mult)
Lexicase best errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Lexicase best number of elite cases: 13
Lexicase best total error: 32777
Lexicase best mean error: 1213.963
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_empty} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace boolean_empty string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_yank exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 210 11 19 17 210 210 210 16 343 210 210 210 133 133 7 133 133 210 133 133 133 210 133 210 16 210)
Population mean number of elite cases: 8.03
Count of perfect (error zero) individuals by case: (0 0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_max integer_dup integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec string_substring integer_mult 99 in2 integer_mult string_split))
Partial simplification: (99 in2 integer_mult)
Errors: [120 95 105 109 380 70 71 75 25 20 79 81 85 1066 2564 2354 1712 7322 137 2708 4668 4674 82 3888 116 118 53]
Total: 32777
Mean: 1213.963
Genome size: 30
Size: 34
Percent parens: 0.118
--- Population Statistics ---
Average total errors in population: 1.4578480324438E10
Median total errors in population: 68218
Error averages by case: (4.25125549266E8 2.5609582988E7 2.1577098536E7 3.0079619552E7 3.466214620584E9 1.4398786986E7 7.0838117164E7 1.01992943836E8 2.140910922E7 1.4329108178E7 6.3954129284E7 2.1500343684E7 8.5733903228E7 3.12277456602E8 5.55175274302E8 1.700408604458E9 8.92485138754E8 1.219610438734E9 5.95639497292E8 1.104936728206E9 1.104903055446E9 1.19042097141E9 2.1503090186E7 1.16157305767E9 1.70237448514E8 1.29187938058E8 5.73587123E7)
Error minima by case: (120 95 0 8 21 70 71 75 1 20 79 81 85 76 89 22 128 95 137 134 114 120 82 126 116 4 53)
Average genome size in population (length): 32.57
Average program size in population (points): 36.858
Average percent parens in population: 0.117
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.054
Error (vector) diversity:			 0.054
--- Run Statistics ---
Number of program evaluations used so far: 12500
Number of point (instruction) evaluations so far: 17043720
--- Timings ---
Current time: 1481337479639 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 13
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 38
Percent parens: 0.105
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_yank boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 34
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 15 9 15 1 1 1 20 1 1 1 1 135 135 16 135 135 1 135 135 135 1 135 1 14 1)
Population mean number of elite cases: 2.36
Count of perfect (error zero) individuals by case: (0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (100 in2 integer_mult)
Errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Total: 31240
Mean: 1157.037
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 1331911.158
Median total errors in population: 68218
Error averages by case: (52136.792 96435.746 156634.326 170099.354 135993.268 30412.752 16101.138 15996.042 2096.458 2007.992 28401.414 50378.346 33832.686 5152.164 5435.49 75239.776 23322.804 4832.214 78510.63 20978.748 6867.548 8013.02 53135.204 11630.688 105253.476 137530.244 5482.838)
Error minima by case: (50 13 0 8 21 10 21 25 1 10 20 12 23 76 89 22 128 95 59 134 114 120 12 126 32 4 19)
Average genome size in population (length): 33.448
Average program size in population (points): 37.862
Average percent parens in population: 0.117
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.052
Error (vector) diversity:			 0.052
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 17734866
--- Timings ---
Current time: 1481337483879 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 13
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 38
Percent parens: 0.105
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_empty} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace boolean_empty string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 205 18 18 14 205 205 205 23 205 205 205 205 146 146 14 146 146 205 146 146 146 205 146 205 13 205)
Population mean number of elite cases: 7.87
Count of perfect (error zero) individuals by case: (0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (100 in2 integer_mult)
Errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Total: 31240
Mean: 1157.037
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 2217804.14
Median total errors in population: 68218
Error averages by case: (102455.636 139778.07 178586.45 186175.614 166820.04 76780.256 54326.406 54252.926 6925.59 5549.636 74209.198 100197.642 81502.69 25800.722 25118.274 124200.422 67354.356 8689.914 126284.986 63376.384 28670.744 32985.026 103003.216 44111.96 146248.492 167347.704 27051.786)
Error minima by case: (50 13 0 8 21 10 21 25 1 10 20 12 23 76 89 22 128 95 59 134 114 120 12 126 32 4 19)
Average genome size in population (length): 34.038
Average program size in population (points): 38.394
Average percent parens in population: 0.115
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 147
Genome diversity (% unique Plush genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.05
Error (vector) diversity:			 0.05
--- Run Statistics ---
Number of program evaluations used so far: 13500
Number of point (instruction) evaluations so far: 18563200
--- Timings ---
Current time: 1481337488894 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 13
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 38
Percent parens: 0.105
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_do*times exec_dup (integer_dec string_substring 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 27
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 227 18 18 17 227 227 227 10 228 227 227 227 1 1 5 1 1 227 1 1 1 227 1 227 10 227)
Population mean number of elite cases: 6.08
Count of perfect (error zero) individuals by case: (0 0 18 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (100 in2 integer_mult)
Errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Total: 31240
Mean: 1157.037
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 2156385.41
Median total errors in population: 68197
Error averages by case: (99910.786 137577.956 176339.788 183887.876 163391.826 74725.006 52239.252 52137.356 5098.506 3719.83 72069.748 98078.36 79314.856 23766.91 23078.55 121009.414 64838.442 7061.522 123524.736 60852.882 26558.722 30804.43 100878.798 41787.122 143774.61 164878.454 25079.672)
Error minima by case: (50 13 0 8 21 10 21 25 1 10 20 12 23 33 32 22 56 11 59 54 34 37 12 44 32 4 19)
Average genome size in population (length): 33.774
Average program size in population (points): 38.008
Average percent parens in population: 0.112
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 117
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.074
Error (vector) diversity:			 0.074
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 19382062
--- Timings ---
Current time: 1481337493943 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 13
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 38
Percent parens: 0.105
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 25
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 205 20 19 12 205 205 205 11 354 205 205 205 149 149 6 149 149 205 149 149 149 205 149 205 17 205)
Population mean number of elite cases: 8.18
Count of perfect (error zero) individuals by case: (0 0 20 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst))))
Partial simplification: (100 in2 integer_mult)
Errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Total: 31240
Mean: 1157.037
Genome size: 42
Size: 47
Percent parens: 0.106
--- Population Statistics ---
Average total errors in population: 94323.432
Median total errors in population: 68218
Error averages by case: (2995.57 3601.04 3873.972 3940.228 3198.098 3140.27 2817.504 2780.84 2082.908 2049.154 3026.416 3321.684 3065.5 2866.214 3657.186 4270.614 3487.458 5956.398 3090.628 3997.402 4808.842 4847.926 3343.878 4510.322 3471.274 3641.374 2480.732)
Error minima by case: (50 13 0 8 21 10 21 25 1 10 20 12 23 33 32 22 56 11 59 54 34 37 12 44 32 4 19)
Average genome size in population (length): 34.914
Average program size in population (points): 39.002
Average percent parens in population: 0.106
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.052
Error (vector) diversity:			 0.052
--- Run Statistics ---
Number of program evaluations used so far: 14500
Number of point (instruction) evaluations so far: 20372125
--- Timings ---
Current time: 1481337499041 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_empty} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not string_empty string_yank boolean_not string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 13
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 43
Percent parens: 0.093
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_empty} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace boolean_empty string_replace string_replacefirst)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 27
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 212 15 17 18 212 212 212 10 363 212 212 212 151 151 10 151 151 212 151 151 151 212 151 212 13 212)
Population mean number of elite cases: 8.40
Count of perfect (error zero) individuals by case: (0 0 15 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_reverse} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_not exec_do*times (string_yank) boolean_not exec_do*times (exec_yank exec_yank integer_dec integer_max boolean_stackdepth integer_add boolean_rot boolean_not string_swap) string_parse_to_chars) exec_dup (string_yank string_dup string_reverse integer_dec string_substring in1 99 string_empty integer_mult string_split string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (100 in2 integer_mult)
Errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Total: 31240
Mean: 1157.037
Genome size: 44
Size: 49
Percent parens: 0.102
--- Population Statistics ---
Average total errors in population: 5010916.36
Median total errors in population: 68218
Error averages by case: (185158.846 186035.348 186336.896 186403.156 185466.274 185535.446 185074.596 184996.396 184323.66 184316.586 185333.384 185724.824 185361.608 184758.998 185371.848 186282.53 185332.242 187015.308 185293.328 185753.762 186272.242 186321.766 185749.746 186100.798 185843.234 186062.754 184690.784)
Error minima by case: (50 13 0 8 21 10 21 25 1 10 20 12 23 33 32 22 56 11 59 54 34 37 12 44 32 4 19)
Average genome size in population (length): 34.962
Average program size in population (points): 39.106
Average percent parens in population: 0.107
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.046
Error (vector) diversity:			 0.046
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 21354873
--- Timings ---
Current time: 1481337503906 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_eq} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_empty})
Zero cases best program: (integer_min integer_eq string_yank boolean_not exec_do*times (exec_yank integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec integer_pop exec_dup (string_yank string_dup string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace boolean_empty)))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 30
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 220 10 21 11 220 220 221 15 1 220 220 220 139 139 10 139 139 1 139 139 139 220 139 220 14 1)
Population mean number of elite cases: 6.36
Count of perfect (error zero) individuals by case: (0 0 10 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.02
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 1.22644766134E8
Median total errors in population: 68218
Error averages by case: (6823095.574 2188512.15 2324267.63 2742873.49 1.6065783878E7 1229259.694 2070119.062 2454010.454 304843.834 195867.254 2340120.378 1691011.554 2819884.71 2749183.442 3526011.338 1.4760780238E7 7808429.03 1781130.422 8963166.374 8357252.902 5249843.942 5928148.274 1716927.35 6970544.014 5309089.454 5008177.062 1266432.63)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 34.834
Average program size in population (points): 38.892
Average percent parens in population: 0.105
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
--- Run Statistics ---
Number of program evaluations used so far: 15500
Number of point (instruction) evaluations so far: 22330122
--- Timings ---
Current time: 1481337508937 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 string_dup_items string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 37
Percent parens: 0.081
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 39
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (97 149 16 17 15 149 149 246 98 97 149 149 149 125 125 10 125 125 97 125 125 125 149 125 149 17 97)
Population mean number of elite cases: 6.00
Count of perfect (error zero) individuals by case: (0 0 16 0 0 0 0 0 0 97 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 5.4004774795806E10
Median total errors in population: 62710
Error averages by case: (2.000176117472E9 2.000177205004E9 2.000177400346E9 2.000177417786E9 2.000175486884E9 2.000176978472E9 2.000176566316E9 2.000176466492E9 2.000176278178E9 2.000176287484E9 2.000176715166E9 2.000177052094E9 2.000176681524E9 2.000176409958E9 2.00017698809E9 2.000176555014E9 2.00017638032E9 2.000179034804E9 2.000176002372E9 2.000176780724E9 2.000177759724E9 2.000177726382E9 2.0001770658E9 2.000177346028E9 2.000176758144E9 2.000176940056E9 2.000176395172E9)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 35.256
Average program size in population (points): 39.274
Average percent parens in population: 0.103
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.052
Error (vector) diversity:			 0.052
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 23317701
--- Timings ---
Current time: 1481337514476 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 string_dup_items string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 37
Percent parens: 0.081
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 39
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (90 141 11 16 17 141 141 231 90 90 141 141 141 142 142 9 142 142 90 142 142 142 141 142 141 11 90)
Population mean number of elite cases: 6.02
Count of perfect (error zero) individuals by case: (0 0 11 0 0 0 0 0 0 90 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 4.7843506233796E10
Median total errors in population: 68197
Error averages by case: (1.772002146616E9 1.772040653798E9 1.772080190456E9 1.77208787695E9 1.77206678184E9 1.771976560036E9 1.771953603958E9 1.771953490366E9 1.771905557106E9 1.771904143568E9 1.771973827888E9 1.772000371236E9 1.771981208938E9 1.771924509532E9 1.77192375472E9 1.772023484096E9 1.771966305856E9 1.771907309012E9 1.772026207058E9 1.771962209096E9 1.771927219336E9 1.771931539876E9 1.77200322726E9 1.77194274904E9 1.772046926696E9 1.772068461108E9 1.771925918354E9)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 35.47
Average program size in population (points): 39.522
Average percent parens in population: 0.103
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.06
Error (vector) diversity:			 0.06
--- Run Statistics ---
Number of program evaluations used so far: 16500
Number of point (instruction) evaluations so far: 24307917
--- Timings ---
Current time: 1481337519737 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_not string_swap string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 27
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth boolean_not boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult)))
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 42
Percent parens: 0.119
--- Lexicase Population Statistics ---
Count of elite individuals by case: (91 151 16 14 8 151 151 242 91 91 151 151 151 119 119 12 119 119 91 119 119 119 151 119 151 15 91)
Population mean number of elite cases: 5.84
Count of perfect (error zero) individuals by case: (0 0 16 0 0 0 0 0 0 91 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_length} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_yankdup} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction string_flush} {:close 0, :instruction integer_sub} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction string_length} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_length boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_rot boolean_not integer_yankdup) string_parse_to_chars string_replace boolean_eq boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (boolean_invert_second_then_and string_flush integer_sub boolean_eq integer_fromboolean string_flush boolean_and exec_dup (string_yank string_dup string_butlast integer_dec exec_dup_items integer_mult 100 string_length integer_mult integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 48
Size: 52
Percent parens: 0.077
--- Population Statistics ---
Average total errors in population: 4.9874644085E8
Median total errors in population: 62710
Error averages by case: (1.8474464526E7 1.8517925326E7 1.8577315934E7 1.8590621702E7 1.855712627E7 1.8453164446E7 1.8439333838E7 1.8439238926E7 1.8426547514E7 1.842651425E7 1.8451226946E7 1.847266553E7 1.8456518526E7 1.842907011E7 1.8429400898E7 1.8497259138E7 1.8446409962E7 1.8429420542E7 1.8500380158E7 1.8444162218E7 1.8430795258E7 1.8431845438E7 1.847536619E7 1.8435215338E7 1.852665411E7 1.8558483982E7 1.8429313774E7)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 34.448
Average program size in population (points): 38.408
Average percent parens in population: 0.104
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.066
Error (vector) diversity:			 0.066
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 25250483
--- Timings ---
Current time: 1481337524423 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec boolean_not boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 54
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 39
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (93 141 14 13 20 141 140 233 93 93 140 141 140 119 119 18 119 119 93 119 119 119 141 119 140 16 93)
Population mean number of elite cases: 5.71
Count of perfect (error zero) individuals by case: (0 0 14 0 0 0 0 0 0 93 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction string_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec integer_gt string_eq integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 25
Size: 28
Percent parens: 0.107
--- Population Statistics ---
Average total errors in population: 6.183858153185E10
Median total errors in population: 68197
Error averages by case: (1.771824969188E9 1.77184961056E9 3.771871927904E9 3.771876023616E9 1.771865561048E9 3.771805101946E9 1.771784828968E9 1.771784774648E9 3.771710632752E9 3.771704677006E9 1.771803009462E9 3.771823262976E9 1.771809038616E9 1.771750815138E9 1.771749447766E9 1.771840270246E9 1.771797253384E9 1.771709438038E9 1.771841154888E9 1.77179368464E9 1.7717543396E9 1.771760360354E9 3.771825285402E9 1.771774081316E9 1.771853558352E9 1.771865783044E9 1.771752640992E9)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 33.422
Average program size in population (points): 37.262
Average percent parens in population: 0.105
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.062
Error (vector) diversity:			 0.062
--- Run Statistics ---
Number of program evaluations used so far: 17500
Number of point (instruction) evaluations so far: 26144471
--- Timings ---
Current time: 1481337529739 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_max} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_reverse} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast string_parse_to_chars) string_flush integer_pop integer_max boolean_stackdepth integer_add boolean_rot integer_max string_swap string_parse_to_chars exec_dup (string_yank string_dup string_reverse integer_dec string_substring in1 99 string_empty integer_mult string_split string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 42
Percent parens: 0.071
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_split} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_split boolean_eq string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (82 151 18 14 10 151 151 233 82 82 151 151 151 121 121 19 121 121 82 121 121 121 151 121 151 13 82)
Population mean number of elite cases: 5.79
Count of perfect (error zero) individuals by case: (0 0 18 0 0 0 0 0 0 82 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (integer_min integer_min exec_while () boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) integer_sub) integer_dec string_yank integer_gt integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 38
Size: 43
Percent parens: 0.116
--- Population Statistics ---
Average total errors in population: 5060163.464
Median total errors in population: 68197
Error averages by case: (186966.322 187537.08 187743.96 187801.2 187338.67 187207.764 186883.016 186827.312 186388.304 186399.864 187062.164 187326.752 187082.66 186787.598 187421.136 188195.534 187307.322 189204.412 187086.252 187746.038 188346.294 188386.602 187343.51 188133.694 187435.602 187584.062 186620.34)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 33.244
Average program size in population (points): 37.098
Average percent parens in population: 0.105
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 27017005
--- Timings ---
Current time: 1481337535185 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 38
Percent parens: 0.105
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_while () boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) integer_sub integer_dec string_yank integer_gt integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 37
Percent parens: 0.108
--- Lexicase Population Statistics ---
Count of elite individuals by case: (87 161 17 10 20 161 161 248 87 87 161 161 161 136 136 11 136 136 87 136 136 136 161 136 161 6 87)
Population mean number of elite cases: 6.25
Count of perfect (error zero) individuals by case: (0 0 17 0 0 0 0 0 0 87 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 36
Size: 40
Percent parens: 0.100
--- Population Statistics ---
Average total errors in population: 1368421.08
Median total errors in population: 62710
Error averages by case: (73493.17 26034.852 27277.38 31576.652 168486.71 16378.11 24892.884 28785.42 6552.788 5429.61 27690.48 21055.108 32586.792 32039.982 40765.848 156407.454 84365.562 24909.168 95443.136 90553.334 59535.214 66531.526 21314.078 76886.67 58002.338 54863.718 16563.096)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 31.7
Average program size in population (points): 35.326
Average percent parens in population: 0.104
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.048
Error (vector) diversity:			 0.048
--- Run Statistics ---
Number of program evaluations used so far: 18500
Number of point (instruction) evaluations so far: 27835132
--- Timings ---
Current time: 1481337540325 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_emptystring} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_emptystring integer_min string_yank boolean_not integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 41
Percent parens: 0.098
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth boolean_not boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring integer_mult 101 in2 integer_mult)))
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 42
Percent parens: 0.119
--- Lexicase Population Statistics ---
Count of elite individuals by case: (102 134 13 11 16 134 134 236 102 102 134 134 134 141 141 12 141 141 102 141 141 141 134 141 134 16 102)
Population mean number of elite cases: 6.03
Count of perfect (error zero) individuals by case: (0 0 13 0 0 0 0 0 0 102 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction string_swap} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring string_substring string_swap 101 in2 integer_mult string_split string_replace string_replacefirst)))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 35
Size: 39
Percent parens: 0.103
--- Population Statistics ---
Average total errors in population: 86759.954
Median total errors in population: 62710
Error averages by case: (2709.266 4357.054 5018.73 5117.17 2745.494 3358.626 2623.454 2511.726 1639.338 1619.026 3034.714 3722.09 3085.894 2048.586 2636.696 3342.126 2531.354 4506.74 2861.014 2897.614 3480.374 3501.554 3770.682 3248.19 3934.33 4380.266 2077.846)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 31.47
Average program size in population (points): 35.038
Average percent parens in population: 0.104
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.042
Error (vector) diversity:			 0.042
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 28625665
--- Timings ---
Current time: 1481337544460 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst))))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 9
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 35
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_min integer_min string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 16
Percent parens: 0.063
--- Lexicase Population Statistics ---
Count of elite individuals by case: (106 131 19 14 22 131 131 237 106 106 131 131 131 129 129 8 129 129 106 129 129 129 131 129 131 16 106)
Population mean number of elite cases: 5.85
Count of perfect (error zero) individuals by case: (0 0 19 0 0 0 0 0 0 106 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_while} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction integer_sub} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_while () boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) integer_sub integer_dec string_yank integer_gt integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))
Partial simplification: (101 in2 integer_mult)
Errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Total: 31097
Mean: 1151.7407
Genome size: 33
Size: 37
Percent parens: 0.108
--- Population Statistics ---
Average total errors in population: 2.007793345918E9
Median total errors in population: 62710
Error averages by case: (307357.8 331671.038 353178.476 357082.18 2.00034533893E9 288969.7 269305.486 269202.23 198182.128 192472.4 286771.716 306394.848 292515.018 236495.954 235123.772 473682.078 280591.64 196950.542 322691.09 277121.176 239673.736 245386.738 308338.732 258448.048 335079.248 346888.484 238432.73)
Error minima by case: (20 13 0 8 21 10 21 25 1 0 20 12 23 33 32 22 56 11 19 54 34 37 12 44 32 4 15)
Average genome size in population (length): 31.17
Average program size in population (points): 34.772
Average percent parens in population: 0.105
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
--- Run Statistics ---
Number of program evaluations used so far: 19500
Number of point (instruction) evaluations so far: 29386413
--- Timings ---
Current time: 1481337548942 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split in2 integer_mult in1 100 string_empty integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (in1 100 integer_mult)
Lexicase best errors: [2050 6913 8112 8114 90 5010 2921 2525 112 10 3920 5712 3923 33 32 77 56 11 1959 54 34 37 5812 44 5232 6228 1519]
Lexicase best number of elite cases: 8
Lexicase best total error: 70540
Lexicase best mean error: 2612.5925
Lexicase best size: 39
Percent parens: 0.077
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_min integer_min string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst)
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 2
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 16
Percent parens: 0.063
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 129 17 22 13 129 129 1 99 99 129 129 129 133 133 8 133 133 1 133 133 133 129 133 129 17 1)
Population mean number of elite cases: 4.75
Count of perfect (error zero) individuals by case: (0 0 17 0 0 0 0 0 0 99 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Errors: [17 66 78 78 203 47 26 22 2 3 36 54 36 1003 2503 2203 1603 7303 16 2603 4603 4603 55 3803 49 59 12]
Total: 31086
Mean: 1151.3334
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 4798420.828
Median total errors in population: 68197
Error averages by case: (177017.528 178197.37 178422.92 178441.384 176372.128 177915.488 177457.578 177351.298 177076.892 177079.3 177633.26 178010.74 177603.11 177216.978 177769.864 177399.538 177205.996 179712.154 176909.694 177588.048 178510.488 178480.938 178027.188 178122.076 177725.22 177929.62 177244.03)
Error minima by case: (17 13 0 8 21 10 21 22 1 0 20 12 23 33 32 22 56 11 16 54 34 37 12 44 32 4 12)
Average genome size in population (length): 30.78
Average program size in population (points): 34.288
Average percent parens in population: 0.104
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 30110931
--- Timings ---
Current time: 1481337555768 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not exec_do*times (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (100 in1 integer_mult)
Lexicase best errors: [2050 6913 8112 8114 90 5010 2921 2525 112 10 3920 5712 3923 33 32 77 56 11 1959 54 34 37 5812 44 5232 6228 1519]
Lexicase best number of elite cases: 8
Lexicase best total error: 70540
Lexicase best mean error: 2612.5925
Lexicase best size: 20
Percent parens: 0.100
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction 99} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec integer_dec boolean_swap 99 exec_dup (string_yank 99 string_empty boolean_not string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_gt string_butlast string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 39
Percent parens: 0.103
--- Lexicase Population Statistics ---
Count of elite individuals by case: (64 136 19 11 14 136 136 64 39 39 136 136 136 130 130 8 130 130 64 130 130 130 136 130 136 14 64)
Population mean number of elite cases: 5.06
Count of perfect (error zero) individuals by case: (0 0 19 0 0 0 0 0 0 39 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Errors: [17 66 78 78 203 47 26 22 2 3 36 54 36 1003 2503 2203 1603 7303 16 2603 4603 4603 55 3803 49 59 12]
Total: 31086
Mean: 1151.3334
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 91274.124
Median total errors in population: 62710
Error averages by case: (2883.966 4434.07 5074.376 5175.212 2979.826 3459.746 2762.582 2659.606 1810.864 1790.614 3159.108 3815.04 3212.67 2252.436 2860.752 3595.116 2761.866 4781.322 3044.254 3140.538 3735.418 3758.98 3862.238 3499.974 4050.13 4478.518 2234.902)
Error minima by case: (17 13 0 8 21 10 21 22 1 0 20 12 23 33 32 22 56 11 16 54 34 37 12 44 32 4 12)
Average genome size in population (length): 31.364
Average program size in population (points): 34.99
Average percent parens in population: 0.105
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.624
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.624
Total error diversity:				 0.056
Error (vector) diversity:			 0.056
--- Run Statistics ---
Number of program evaluations used so far: 20500
Number of point (instruction) evaluations so far: 30999582
--- Timings ---
Current time: 1481337563674 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_not string_swap string_parse_to_chars string_flush integer_pop exec_dup (integer_min integer_min integer_min string_yank) boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 8
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 41
Percent parens: 0.098
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_split string_replace string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 34
Percent parens: 0.088
--- Lexicase Population Statistics ---
Count of elite individuals by case: (60 132 14 15 14 132 132 60 45 44 132 132 132 1 1 15 1 1 60 1 1 1 132 1 132 12 60)
Population mean number of elite cases: 2.93
Count of perfect (error zero) individuals by case: (0 0 14 0 0 0 0 0 0 44 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Errors: [17 66 78 78 203 47 26 22 2 3 36 54 36 1003 2503 2203 1603 7303 16 2603 4603 4603 55 3803 49 59 12]
Total: 31086
Mean: 1151.3334
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 5026129.494
Median total errors in population: 63618
Error averages by case: (185691.75 187103.66 187537.062 187588.758 185430.682 186397.61 185747.388 185641.06 184659.698 184605.238 186096.026 186666.142 186123.56 185191.9 185740.58 186198.028 185627.654 187330.07 185738.16 185981.234 186540.314 186568.148 186701.866 186335.37 186669.942 186990.386 185227.208)
Error minima by case: (17 13 0 8 21 10 21 22 1 0 20 12 23 24 23 22 47 2 16 45 25 28 12 35 32 4 12)
Average genome size in population (length): 31.726
Average program size in population (points): 35.366
Average percent parens in population: 0.104
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 31884453
--- Timings ---
Current time: 1481337569661 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split string_replace string_replacefirst))))
Lexicase best partial simplification: (boolean_not exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_stackdepth integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_replace string_replacefirst))))
Lexicase best errors: [2041 6904 8103 8105 81 5001 2912 2516 103 1 3911 5703 3914 24 23 68 47 2 1950 45 25 28 5803 35 5223 6219 1510]
Lexicase best number of elite cases: 8
Lexicase best total error: 70297
Lexicase best mean error: 2603.5925
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 98} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_split} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank string_dup string_butlast integer_dec string_substring boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast string_butlast integer_dec string_substring integer_mult 98 integer_dec integer_mult string_split string_replace string_split boolean_eq string_replacefirst))
Zero cases best partial simplification: (exec_dup (integer_dec 98 integer_dec integer_mult))
Zero cases best errors: [2262 1099 0 202 22 3302 4291 4287 8000 8302 3392 2400 3089 4979 3580 665 2056 901 1453 1258 1278 975 2300 1068 880 284 5893]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 68218
Zero cases best mean error: 2526.5925
Zero cases best size: 40
Percent parens: 0.075
--- Lexicase Population Statistics ---
Count of elite individuals by case: (59 133 14 15 21 134 133 59 2 30 133 133 133 87 87 8 87 86 59 87 87 87 133 87 133 16 59)
Population mean number of elite cases: 4.20
Count of perfect (error zero) individuals by case: (0 0 14 0 0 0 0 0 2 30 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.09
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Errors: [17 66 78 78 203 47 26 22 2 3 36 54 36 1003 2503 2203 1603 7303 16 2603 4603 4603 55 3803 49 59 12]
Total: 31086
Mean: 1151.3334
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 5.4002152248366E10
Median total errors in population: 62710
Error averages by case: (2.000099132848E9 2.000135460434E9 2.00017298266E9 2.000180302708E9 2.000160698004E9 2.000074627632E9 2.000052950998E9 2.000052865278E9 2.000007472348E9 2.00000616015E9 2.00007211253E9 2.000097232096E9 2.000079126962E9 2.000025493428E9 2.000024803072E9 2.00011961058E9 2.000065210828E9 2.000009307356E9 2.000122008698E9 2.000061335476E9 2.000028129796E9 2.000032233028E9 2.000099941214E9 2.000042866628E9 2.00014151912E9 2.000161934284E9 2.00002673021E9)
Error minima by case: (17 13 0 8 21 10 21 22 0 0 20 12 23 24 23 22 47 2 16 45 25 28 12 35 32 4 12)
Average genome size in population (length): 35.304
Average program size in population (points): 39.752
Average percent parens in population: 0.111
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.078
Error (vector) diversity:			 0.078
--- Run Statistics ---
Number of program evaluations used so far: 21500
Number of point (instruction) evaluations so far: 33086068
--- Timings ---
Current time: 1481337577064 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_swap} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not string_butlast boolean_stackdepth integer_add boolean_not string_swap string_parse_to_chars string_flush integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup boolean_swap 99 exec_dup (string_yank integer_gt string_substring integer_mult 100 in2 integer_mult string_split string_replace string_replacefirst)))
Lexicase best partial simplification: (100 in2 integer_mult)
Lexicase best errors: [50 13 12 14 290 10 21 25 12 10 20 12 23 1033 2532 2277 1656 7311 59 2654 4634 4637 12 3844 32 28 19]
Lexicase best number of elite cases: 8
Lexicase best total error: 31240
Lexicase best mean error: 1157.037
Lexicase best size: 34
Percent parens: 0.088
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not string_swap) string_parse_to_chars string_flush integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Zero cases best partial simplification: (boolean_stackdepth integer_add exec_dup (exec_yank integer_dec boolean_stackdepth integer_pop (101 in2 integer_mult)))
Zero cases best errors: [19 68 80 80 201 49 28 24 0 1 38 56 38 1001 2501 2201 1601 7301 18 2601 4601 4601 57 3801 51 61 14]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 31092
Zero cases best mean error: 1151.5555
Zero cases best size: 53
Percent parens: 0.094
--- Lexicase Population Statistics ---
Count of elite individuals by case: (39 134 15 14 14 134 134 39 15 28 134 134 134 1 1 14 1 96 39 1 1 1 134 1 134 19 39)
Population mean number of elite cases: 2.90
Count of perfect (error zero) individuals by case: (0 0 15 0 0 0 0 0 15 28 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Population mean number of perfect (error zero) cases: 0.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Errors: [17 66 78 78 203 47 26 22 2 3 36 54 36 1003 2503 2203 1603 7303 16 2603 4603 4603 55 3803 49 59 12]
Total: 31086
Mean: 1151.3334
Genome size: 34
Size: 38
Percent parens: 0.105
--- Population Statistics ---
Average total errors in population: 1334178.18
Median total errors in population: 68197
Error averages by case: (72306.648 24677.266 25893.808 30197.48 167376.124 15084.614 23672.322 27578.938 5426.744 4306.798 26435.78 19738.232 31332.446 30864.038 39505.786 155205.29 83158.732 23377.844 94261.078 89290.268 58157.788 65154.454 19993.8 75555.224 56704.828 53531.924 15389.926)
Error minima by case: (17 13 0 8 21 10 21 22 0 0 20 12 23 18 17 22 41 2 16 39 19 22 12 29 32 4 12)
Average genome size in population (length): 36.034
Average program size in population (points): 40.546
Average percent parens in population: 0.111
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.074
Error (vector) diversity:			 0.074
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 34309898
--- Timings ---
Current time: 1481337583854 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Lexicase best errors: [2035 6898 8097 8099 75 4995 2906 2510 97 5 3905 5697 3908 18 17 62 41 4 1944 39 19 22 5797 29 5217 6213 1504]
Lexicase best number of elite cases: 7
Lexicase best total error: 70153
Lexicase best mean error: 2598.2593
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_yank string_swap)) string_flush exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Zero cases best errors: [18 19 20 18 258 22 11 7 20 22 12 20 9 1001 2500 2245 1624 7279 27 2622 4602 4605 20 3812 0 4 13]
Zero cases best number of elite cases: 6
Zero cases best number of zero cases: 1
Zero cases best total error: 30810
Zero cases best mean error: 1141.1111
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 123 15 16 14 122 1 1 12 30 1 122 1 87 87 12 87 1 1 87 87 87 122 87 1 18 1)
Population mean number of elite cases: 2.45
Count of perfect (error zero) individuals by case: (0 0 15 0 0 0 0 0 12 30 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0)
Population mean number of perfect (error zero) cases: 0.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Errors: [18 19 20 18 258 22 11 7 20 22 12 20 9 1001 2500 2245 1624 7279 27 2622 4602 4605 20 3812 0 4 13]
Total: 30810
Mean: 1141.1111
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6609977.132
Median total errors in population: 68197
Error averages by case: (262569.736 297893.354 334348.87 341431.614 322311.88 238842.29 217733.21 217645.234 178739.874 174167.018 236355.846 260787.998 243167.454 191028.076 190375.172 282453.888 229627.496 197644.418 284776.322 225876.328 193636.008 197625.228 263419.416 207949.76 303753.968 323580.884 192235.79)
Error minima by case: (16 13 0 8 21 10 11 7 0 0 12 12 9 18 17 22 41 0 15 39 19 22 12 29 0 4 11)
Average genome size in population (length): 35.318
Average program size in population (points): 39.786
Average percent parens in population: 0.112
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 22500
Number of point (instruction) evaluations so far: 35535250
--- Timings ---
Current time: 1481337592675 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Lexicase best partial simplification: (string_yank boolean_not exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Lexicase best errors: [2035 6898 8097 8099 75 4995 2906 2510 97 5 3905 5697 3908 18 17 62 41 4 1944 39 19 22 5797 29 5217 6213 1504]
Lexicase best number of elite cases: 7
Lexicase best total error: 70153
Lexicase best mean error: 2598.2593
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (34 1 13 1 12 1 1 1 13 16 1 1 1 85 85 12 85 8 34 85 85 85 1 85 80 1 1)
Population mean number of elite cases: 1.66
Count of perfect (error zero) individuals by case: (0 0 13 0 0 0 0 0 13 16 1 0 0 0 0 0 0 8 0 0 0 0 0 0 80 0 0)
Population mean number of perfect (error zero) cases: 0.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction 99} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank 99 exec_dup (integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (99 exec_yank integer_dec integer_max (string_substring 100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 49
Size: 56
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 5.4000163985874E10
Median total errors in population: 70153
Error averages by case: (2.000005587332E9 2.000005995358E9 2.000006212308E9 2.000006285904E9 2.000005937146E9 2.000005569458E9 2.000005316394E9 2.000005297462E9 2.000004612636E9 2.00000458617E9 2.000005502154E9 2.000005727412E9 2.000005548294E9 2.000005502574E9 2.000006362806E9 2.000007006114E9 2.000006214234E9 2.000008860568E9 2.00000570859E9 2.000006766778E9 2.000007620538E9 2.000007667662E9 2.000005747326E9 2.00000731045E9 2.000005948236E9 2.000006087928E9 2.000005004042E9)
Error minima by case: (16 4 0 5 21 1 1 1 0 0 0 3 1 18 17 22 41 0 15 39 19 22 3 29 0 2 1)
Average genome size in population (length): 38.212
Average program size in population (points): 43.152
Average percent parens in population: 0.115
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 36933348
--- Timings ---
Current time: 1481337599387 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2029 6892 8091 8093 69 4989 2900 2504 91 11 3899 5691 3902 12 11 56 35 10 1938 33 13 16 5791 23 5211 6207 1498]
Lexicase best number of elite cases: 7
Lexicase best total error: 70015
Lexicase best mean error: 2593.1482
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best partial simplification: (boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring string_swap)) integer_pop exec_dup (string_yank string_dup string_butlast exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best errors: [30 7 8 6 270 10 1 5 8 10 0 8 3 1013 2512 2257 1636 7291 39 2634 4614 4617 8 3824 12 8 1]
Zero cases best number of elite cases: 3
Zero cases best number of zero cases: 1
Zero cases best total error: 30832
Zero cases best mean error: 1141.9259
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 15 1 19 55 31 28 17 21 31 56 28 1 1 11 1 8 1 1 1 1 56 1 9 14 31)
Population mean number of elite cases: 0.88
Count of perfect (error zero) individuals by case: (0 0 15 0 0 0 0 0 17 21 31 0 0 0 0 0 0 8 0 0 0 0 0 0 9 0 0)
Population mean number of perfect (error zero) cases: 0.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_yank} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_shove integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not string_frominteger exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_yank 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (string_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank boolean_dup_items boolean_stackdepth integer_add exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_yank 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Errors: [20 17 18 16 260 20 9 5 18 20 10 18 7 1003 2502 2247 1626 7281 29 2624 4604 4607 18 3814 2 2 11]
Total: 30808
Mean: 1141.037
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.9481091013922E10
Median total errors in population: 68218
Error averages by case: (2.686073934566E9 3.102761413358E9 3.608740691596E9 3.714781079638E9 3.458171011162E9 2.432015509672E9 2.25002421373E9 2.250028198658E9 2.004399420266E9 2.002004264356E9 2.410785081334E9 2.657038304832E9 2.476688092282E9 2.071905503026E9 2.065576379126E9 2.91322454577E9 2.351317000514E9 2.002686029476E9 2.949200373534E9 2.315019288154E9 2.078667509514E9 2.101372663074E9 2.686020570944E9 2.17044527561E9 3.18546609279E9 3.458054888086E9 2.078623678854E9)
Error minima by case: (10 2 0 1 21 1 1 1 0 0 0 3 1 12 11 22 35 0 9 33 13 16 3 23 0 2 1)
Average genome size in population (length): 39.674
Average program size in population (points): 45.07
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 23500
Number of point (instruction) evaluations so far: 38471105
--- Timings ---
Current time: 1481337608670 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2028 6891 8090 8092 68 4988 2899 2503 90 12 3898 5690 3901 11 10 55 34 11 1937 32 12 15 5790 22 5210 6206 1497]
Lexicase best number of elite cases: 7
Lexicase best total error: 69992
Lexicase best mean error: 2592.2964
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_split string_replace string_replacefirst))))
Zero cases best partial simplification: (101 in2 integer_mult)
Zero cases best errors: [20 69 81 81 200 50 29 25 1 0 39 57 39 1000 2500 2200 1600 7300 19 2600 4600 4600 58 3800 52 62 15]
Zero cases best number of elite cases: 1
Zero cases best number of zero cases: 1
Zero cases best total error: 31097
Zero cases best mean error: 1151.7407
Zero cases best size: 35
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 1 15 44 16 8 29 17 13 21 29 2 17 1 1 14 1 16 1 1 1 1 2 1 14 11 29)
Population mean number of elite cases: 0.61
Count of perfect (error zero) individuals by case: (0 1 15 0 0 0 0 0 13 21 29 0 0 0 0 0 0 16 0 0 0 0 0 0 14 0 0)
Population mean number of perfect (error zero) cases: 0.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Errors: [20 17 18 16 260 20 9 5 18 20 10 18 7 1003 2502 2247 1626 7281 29 2624 4604 4607 18 3814 2 2 11]
Total: 30808
Mean: 1141.037
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1346224.932
Median total errors in population: 70015
Error averages by case: (72774.568 25437.694 26750.128 31049.092 167871.654 15644.084 24061.508 27950.544 5509.634 4337.3 26922.528 20371.436 31837.008 31053.866 39731.414 155604.01 83505.854 23612.76 94773.838 89653.11 58454.31 65469.306 20637.154 75890.494 57398.014 54304.17 15619.454)
Error minima by case: (6 0 0 1 21 1 1 1 0 0 0 1 1 11 10 22 34 0 7 32 12 15 1 22 0 2 1)
Average genome size in population (length): 39.844
Average program size in population (points): 45.264
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.102
Error (vector) diversity:			 0.102
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 40025217
--- Timings ---
Current time: 1481337616803 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2028 6891 8090 8092 68 4988 2899 2503 90 12 3898 5690 3901 11 10 55 34 11 1937 32 12 15 5790 22 5210 6206 1497]
Lexicase best number of elite cases: 7
Lexicase best total error: 69992
Lexicase best mean error: 2592.2964
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_swap} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring string_swap 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring string_swap 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best errors: [40 3 2 4 280 0 11 15 2 0 10 2 13 1023 2522 2267 1646 7301 49 2644 4624 4627 2 3834 22 18 9]
Zero cases best number of elite cases: 2
Zero cases best number of zero cases: 2
Zero cases best total error: 30970
Zero cases best mean error: 1147.037
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 40 16 44 19 1 30 23 17 20 29 54 24 81 81 11 81 7 14 81 81 81 54 81 11 12 29)
Population mean number of elite cases: 2.07
Count of perfect (error zero) individuals by case: (0 40 16 0 0 1 0 0 17 20 29 0 0 0 0 0 0 7 0 0 0 0 0 0 11 0 0)
Population mean number of perfect (error zero) cases: 0.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_yank string_swap)) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Errors: [20 17 18 16 260 20 9 5 18 20 10 18 7 1003 2502 2247 1626 7281 29 2624 4604 4607 18 3814 2 2 11]
Total: 30808
Mean: 1141.037
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 5.3999427116058E10
Median total errors in population: 69992
Error averages by case: (2.000076125828E9 2.000028951394E9 2.000030478696E9 2.000034827204E9 2.00017167901E9 2.000018666042E9 2.000026970214E9 2.000030865702E9 2.000007627488E9 1.99800442556E9 2.000030005634E9 2.000023618076E9 2.000034983516E9 2.000033662524E9 2.000042339816E9 2.000159173732E9 2.000086611098E9 2.000025845864E9 2.000098296376E9 2.000092729882E9 2.000061134522E9 2.000068213196E9 2.000023903948E9 2.000078771782E9 2.000060989522E9 2.000058004344E9 2.000018215088E9)
Error minima by case: (6 0 0 1 21 0 1 1 0 0 0 1 1 11 10 22 34 0 7 32 12 15 1 22 0 2 1)
Average genome size in population (length): 40.272
Average program size in population (points): 45.73
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.474
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.474
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 24500
Number of point (instruction) evaluations so far: 41592407
--- Timings ---
Current time: 1481337626137 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2027 6890 8089 8091 67 4987 2898 2502 89 13 3897 5689 3900 10 9 54 33 12 1936 31 11 14 5789 21 5209 6205 1496]
Lexicase best number of elite cases: 7
Lexicase best total error: 69969
Lexicase best mean error: 2591.4443
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_swap} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring string_swap 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring string_swap 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best errors: [40 3 2 4 280 0 11 15 2 0 10 2 13 1023 2522 2267 1646 7301 49 2644 4624 4627 2 3834 22 18 9]
Zero cases best number of elite cases: 2
Zero cases best number of zero cases: 2
Zero cases best total error: 30970
Zero cases best mean error: 1147.037
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 30 25 41 13 17 44 20 16 24 35 31 29 1 1 14 1 16 7 1 1 1 31 1 16 12 35)
Population mean number of elite cases: 0.95
Count of perfect (error zero) individuals by case: (0 30 25 0 0 17 0 0 16 24 35 0 0 0 0 0 0 16 0 0 0 0 0 0 16 0 0)
Population mean number of perfect (error zero) cases: 0.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Errors: [20 17 18 16 260 20 9 5 18 20 10 18 7 1003 2502 2247 1626 7281 29 2624 4604 4607 18 3814 2 2 11]
Total: 30808
Mean: 1141.037
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 3439550.208
Median total errors in population: 138187/2
Error averages by case: (171259.098 159806.99 199601.282 211469.286 331332.47 87480.436 74051.062 77987.458 8747.218 6201.846 96532.278 115463.382 108753.426 52973.282 60447.462 275561.342 146876.526 26131.926 217154.466 148692.806 82008.886 93351.826 118509.034 115207.214 198764.898 216494.042 38690.266)
Error minima by case: (6 0 0 1 21 0 1 1 0 0 0 1 1 10 9 22 33 0 7 31 11 14 1 21 0 2 1)
Average genome size in population (length): 40.234
Average program size in population (points): 45.678
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.108
Error (vector) diversity:			 0.108
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 43152711
--- Timings ---
Current time: 1481337635482 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not exec_dup string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2027 6890 8089 8091 67 4987 2898 2502 89 13 3897 5689 3900 10 9 54 33 12 1936 31 11 14 5789 21 5209 6205 1496]
Lexicase best number of elite cases: 7
Lexicase best total error: 69969
Lexicase best mean error: 2591.4443
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank exec_dup (exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup (string_substring string_swap)) string_flush integer_pop exec_dup (string_yank string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best errors: [38 1 0 2 278 2 9 13 0 2 8 0 11 1021 2520 2265 1644 7299 47 2642 4622 4625 0 3832 20 16 7]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 30924
Zero cases best mean error: 1145.3334
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 31 11 39 11 18 1 20 15 23 31 1 33 91 91 6 91 9 9 91 91 91 1 91 14 19 31)
Population mean number of elite cases: 1.94
Count of perfect (error zero) individuals by case: (0 31 11 0 0 18 1 0 15 23 31 1 0 0 0 0 0 9 0 0 0 0 1 0 14 0 0)
Population mean number of perfect (error zero) cases: 0.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not (string_yank) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Errors: [20 17 18 16 260 20 9 5 18 20 10 18 7 1003 2502 2247 1626 7281 29 2624 4604 4607 18 3814 2 2 11]
Total: 30808
Mean: 1141.037
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 2233308.192
Median total errors in population: 69969
Error averages by case: (103584.122 140885.152 180057.73 187734.006 169518.462 77059.502 54346.696 54306.636 5543.106 4016.836 74558.642 100831.238 81996.824 25383.504 24875.702 126405.342 68245.142 7995.442 127888.408 64344.898 28847.098 33327.544 103672.488 44718.782 147718.562 168990.956 26455.372)
Error minima by case: (6 0 0 1 21 0 0 1 0 0 0 0 1 10 9 22 33 0 7 31 11 14 0 21 0 2 1)
Average genome size in population (length): 40.762
Average program size in population (points): 46.294
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.478
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 25500
Number of point (instruction) evaluations so far: 44758622
--- Timings ---
Current time: 1481337644902 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2021 6884 8083 8085 61 4981 2892 2496 83 10000 3891 5683 3894 4 3 48 27 10000 1930 25 5 8 5783 15 5203 6199 1490]
Lexicase best number of elite cases: 7
Lexicase best total error: 89794
Lexicase best mean error: 3325.7036
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best errors: [38 1 0 2 278 2 9 13 0 2 8 0 11 1021 2520 2265 1644 7299 47 2642 4622 4625 0 3832 20 16 7]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 30924
Zero cases best mean error: 1145.3334
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 13 43 23 17 20 13 20 43 34 23 39 29 1 1 12 1 11 11 1 1 1 39 1 15 16 23)
Population mean number of elite cases: 0.93
Count of perfect (error zero) individuals by case: (0 13 43 0 0 20 13 0 43 34 23 39 0 0 0 0 0 11 0 0 0 0 39 0 15 0 0)
Population mean number of perfect (error zero) cases: 0.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Errors: [20 17 18 16 260 20 9 5 18 20 10 18 7 1003 2502 2247 1626 7281 29 2624 4604 4607 18 3814 2 2 11]
Total: 30808
Mean: 1141.037
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.9486488376948E10
Median total errors in population: 69969
Error averages by case: (2.686338317718E9 3.103051279576E9 3.60910863582E9 3.715168234434E9 3.45865706414E9 2.432171154934E9 2.250144552524E9 2.250152443474E9 2.004408762856E9 2.00200975846E9 2.410947272206E9 2.657244913244E9 2.47686963444E9 2.071976510278E9 2.065652790182E9 2.91361089907E9 2.351521197356E9 2.002708858698E9 2.949533737294E9 2.315220369764E9 2.078766864244E9 2.101487426182E9 2.686232981482E9 2.170593227744E9 3.185800966776E9 3.458428289162E9 2.07868223489E9)
Error minima by case: (6 0 0 1 21 0 0 1 0 0 0 0 1 4 3 22 27 0 7 25 5 8 0 15 0 2 1)
Average genome size in population (length): 40.948
Average program size in population (points): 46.518
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 46383032
--- Timings ---
Current time: 1481337654267 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2021 6884 8083 8085 61 4981 2892 2496 83 10000 3891 5683 3894 4 3 48 27 10000 1930 25 5 8 5783 15 5203 6199 1490]
Lexicase best number of elite cases: 7
Lexicase best total error: 89794
Lexicase best mean error: 3325.7036
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best partial simplification: (integer_min string_yank integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring string_swap)) integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split string_replacefirst))))
Zero cases best errors: [38 1 0 2 278 2 9 13 0 2 8 0 11 1021 2520 2265 1644 7299 47 2642 4622 4625 0 3832 20 16 7]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 30924
Zero cases best mean error: 1145.3334
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 13 41 22 16 17 15 23 39 25 20 33 23 78 78 8 78 17 13 78 78 78 33 78 12 8 20)
Population mean number of elite cases: 1.92
Count of perfect (error zero) individuals by case: (0 13 41 0 0 17 15 0 39 25 20 33 0 0 0 0 0 17 0 0 0 0 33 0 12 0 0)
Population mean number of perfect (error zero) cases: 0.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Errors: [20 17 18 16 260 20 9 5 18 20 10 18 7 1003 2502 2247 1626 7281 29 2624 4604 4607 18 3814 2 2 11]
Total: 30808
Mean: 1141.037
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.66006520717008E11
Median total errors in population: 70405
Error averages by case: (6.000398053348E9 6.000545531494E9 6.00070012951E9 6.000730231514E9 6.000654076816E9 8.000294662444E9 6.000205845458E9 6.000205739774E9 6.00001790829E9 7.998011993664E9 6.000284795994E9 6.000387945074E9 6.000313901284E9 6.000092260314E9 6.000087679694E9 6.000481023736E9 6.000256797948E9 6.000018695708E9 6.000492923406E9 6.000239579392E9 6.00009918302E9 6.00011629025E9 6.000399112904E9 6.000161464832E9 6.000571685132E9 6.00065560528E9 6.000097600728E9)
Error minima by case: (6 0 0 1 21 0 0 1 0 0 0 0 1 4 3 22 27 0 7 25 5 8 0 15 0 2 1)
Average genome size in population (length): 40.564
Average program size in population (points): 46.08
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.16
Error (vector) diversity:			 0.162
--- Run Statistics ---
Number of program evaluations used so far: 26500
Number of point (instruction) evaluations so far: 47982629
--- Timings ---
Current time: 1481337663736 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2021 6884 8083 8085 61 4981 2892 2496 83 10000 3891 5683 3894 4 3 48 27 10000 1930 25 5 8 5783 15 5203 6199 1490]
Lexicase best number of elite cases: 7
Lexicase best total error: 89794
Lexicase best mean error: 3325.7036
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank boolean_dup_items boolean_stackdepth integer_add exec_dup string_substring string_swap string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best errors: [38 1 0 2 278 2 9 13 0 2 8 0 11 1021 2520 2265 1644 7299 47 2642 4622 4625 0 3832 20 16 7]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 30924
Zero cases best mean error: 1145.3334
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 12 41 2 15 15 12 26 43 21 21 35 24 75 75 10 75 8 15 75 75 75 35 75 9 13 22)
Population mean number of elite cases: 1.83
Count of perfect (error zero) individuals by case: (0 12 41 2 0 15 12 0 43 21 21 35 0 0 0 0 0 8 0 0 0 0 35 0 9 0 0)
Population mean number of perfect (error zero) cases: 0.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank in1 integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (in1 exec_yank integer_max (boolean_dup 100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 90 10 21 25 12 10 20 12 23 33 32 77 56 11 59 54 34 37 12 44 32 28 19]
Total: 840
Mean: 31.11111
Genome size: 47
Size: 53
Percent parens: 0.113
--- Population Statistics ---
Average total errors in population: 1.3884629844E7
Median total errors in population: 70540
Error averages by case: (661638.31 832593.664 1064937.502 1114403.006 1141865.166 447774.824 324287.94 328229.5 25766.99 18006.036 444920.828 591900.366 493460.138 162081.626 163109.698 868946.648 460857.65 40348.924 825983.138 440699.958 197967.746 230629.37 608850.392 309196.29 904788.302 1026940.77 154445.062)
Error minima by case: (6 0 0 0 21 0 0 1 0 0 0 0 1 4 3 22 27 0 7 25 5 8 0 15 0 2 1)
Average genome size in population (length): 40.03
Average program size in population (points): 45.59
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 68
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.142
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 49563703
--- Timings ---
Current time: 1481337672100 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank exec_empty exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [2021 6884 8083 8085 61 4981 2892 2496 83 10000 3891 5683 3894 4 3 48 27 10000 1930 25 5 8 5783 15 5203 6199 1490]
Lexicase best number of elite cases: 7
Lexicase best total error: 89794
Lexicase best mean error: 3325.7036
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best partial simplification: (boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup integer_dec exec_dup (string_rest string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Zero cases best errors: [38 1 0 2 278 2 9 13 0 2 8 0 11 1021 2520 2265 1644 7299 47 2642 4622 4625 0 3832 20 16 7]
Zero cases best number of elite cases: 4
Zero cases best number of zero cases: 4
Zero cases best total error: 30924
Zero cases best mean error: 1145.3334
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 6 49 10 15 18 15 33 47 28 25 41 19 91 91 14 91 11 17 91 91 91 41 91 10 25 27)
Population mean number of elite cases: 2.19
Count of perfect (error zero) individuals by case: (0 6 49 10 0 18 15 0 47 28 25 41 0 0 0 0 0 11 0 0 0 0 41 0 10 0 0)
Population mean number of perfect (error zero) cases: 0.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split string_replacefirst))))
Errors: [24 13 14 12 264 16 5 1 14 16 6 14 3 1007 2506 2251 1630 7285 33 2628 4608 4611 14 3818 6 2 7]
Total: 30808
Mean: 1141.037
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.9490857090196E10
Median total errors in population: 70245
Error averages by case: (2.68663711906E9 3.103462429704E9 3.609638830702E9 3.715721757834E9 3.459153336368E9 2.432390127658E9 2.250296265116E9 2.250304157E9 2.004418883236E9 2.000015673184E9 2.411158977134E9 2.657535124882E9 2.47710358446E9 2.07204230977E9 2.06571461815E9 2.913973033298E9 2.351711784652E9 2.002717831502E9 2.94990543658E9 2.315397482336E9 2.078836667496E9 2.101570170234E9 2.686531743392E9 2.170710495304E9 3.18623263418E9 3.458924510764E9 2.0787521062E9)
Error minima by case: (6 0 0 0 21 0 0 1 0 0 0 0 1 4 3 22 27 0 7 25 5 8 0 15 0 2 1)
Average genome size in population (length): 40.852
Average program size in population (points): 46.324
Average percent parens in population: 0.119
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.132
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 27500
Number of point (instruction) evaluations so far: 51182040
--- Timings ---
Current time: 1481337681520 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_yankdup integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (string_yankdup integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup integer_dec exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 10000 3861 5643 3861 0 0 0 0 10000 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 9
Lexicase best total error: 89003
Lexicase best mean error: 3296.4075
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_yankdup integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (string_yankdup integer_min string_yank integer_inc exec_yank exec_empty integer_max exec_dup (exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank) string_parse_to_chars) string_flush exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 10000 3861 5643 3861 0 0 0 0 10000 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 89003
Zero cases best mean error: 3296.4075
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 15 31 7 1 19 6 26 32 24 25 29 17 1 1 1 1 9 18 1 1 1 29 1 15 1 32)
Population mean number of elite cases: 0.71
Count of perfect (error zero) individuals by case: (0 15 31 7 1 19 6 0 32 24 25 29 0 1 1 1 1 9 0 1 1 1 29 1 15 0 0)
Population mean number of perfect (error zero) cases: 0.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 5.454681628371E10
Median total errors in population: 70540
Error averages by case: (2.020341080994E9 2.020316492614E9 2.020395856486E9 2.020419623324E9 2.020662837124E9 2.020172048614E9 2.020145735284E9 2.020153755064E9 2.020015397792E9 2.020010584428E9 2.020190543056E9 2.020227936014E9 2.020215063636E9 2.02010390578E9 2.020118376794E9 2.02055016582E9 2.020292236544E9 2.020048573828E9 2.02043319577E9 2.020295541652E9 2.020160929852E9 2.02018371478E9 2.020234012022E9 2.020227892924E9 2.020395203012E9 2.020430424048E9 2.020075156454E9)
Error minima by case: (6 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 7 0 0 0 0 0 0 1 1)
Average genome size in population (length): 39.924
Average program size in population (points): 45.452
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.148
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 52748005
--- Timings ---
Current time: 1481337690847 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_yankdup integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (string_yankdup string_yank boolean_not integer_inc exec_yank exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank string_dup string_butlast exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 10000 3861 5643 3861 0 0 0 0 10000 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 9
Lexicase best total error: 89003
Lexicase best mean error: 3296.4075
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_yankdup integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (string_yankdup string_yank boolean_not integer_inc integer_max exec_dup (string_yank exec_do*times (exec_yank string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_butlast integer_dec exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 10000 3861 5643 3861 0 0 0 0 10000 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 89003
Zero cases best mean error: 3296.4075
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 12 40 15 106 19 9 21 46 29 21 34 22 106 106 106 106 16 10 106 106 106 34 106 8 8 23)
Population mean number of elite cases: 2.67
Count of perfect (error zero) individuals by case: (0 12 40 15 106 19 9 0 46 29 21 34 0 106 106 106 106 16 0 106 106 106 34 106 8 0 0)
Population mean number of perfect (error zero) cases: 2.47
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min boolean_not exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 3.0963745606718E10
Median total errors in population: 70540
Error averages by case: (1.372221497456E9 2.205651010978E9 3.217650603614E9 3.429739041368E9 2.916482207228E9 8.6409551983E8 5.00085097948E8 5.00091051092E8 8796757.756 4008285.856 8.21627290172E8 1.314164071314E9 9.53439379252E8 1.43810737756E8 1.31144826434E8 1.826526602804E9 7.02657153548E8 5355906.698 1.898498443584E9 6.30052594484E8 1.57317715764E8 2.02729346844E8 1.372131490258E9 3.40884205704E8 2.371061703008E9 2.916263885996E9 1.57259179972E8)
Error minima by case: (6 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 7 0 0 0 0 0 0 1 1)
Average genome size in population (length): 41.444
Average program size in population (points): 47.19
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 97
Genome diversity (% unique Plush genomes):	 0.484
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.484
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 28500
Number of point (instruction) evaluations so far: 54368916
--- Timings ---
Current time: 1481337700410 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty})
Lexicase best program: (string_yankdup integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best partial simplification: (string_yankdup string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 1008 3861 5643 3861 0 0 0 0 8409 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 9
Lexicase best total error: 78420
Lexicase best mean error: 2904.4443
Lexicase best size: 49
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_yankdup} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty})
Zero cases best program: (string_yankdup integer_min string_yank boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best partial simplification: (string_yankdup integer_min string_yank boolean_not exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 1008 3861 5643 3861 0 0 0 0 8409 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 78420
Zero cases best mean error: 2904.4443
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 6 35 11 125 13 13 15 38 21 16 30 1 125 125 125 125 13 1 125 125 125 30 125 12 16 20)
Population mean number of elite cases: 2.83
Count of perfect (error zero) individuals by case: (0 6 35 11 125 13 13 0 38 21 16 30 1 125 125 125 125 13 0 125 125 125 30 125 12 0 0)
Population mean number of perfect (error zero) cases: 2.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not boolean_yankdup exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min integer_inc integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring string_swap)) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.3007695560046E11
Median total errors in population: 141107/2
Error averages by case: (6.004668105954E9 6.009085554538E9 4.01603481579E9 6.017690370278E9 4.551417883822E9 4.002520557116E9 6.001363457836E9 6.001367313228E9 4.000239369948E9 3.312422666598E9 6.002380687906E9 4.004351915402E9 6.00286654944E9 4.369889040144E9 4.337668334224E9 4.007103439796E9 6.002034540318E9 2.002820517438E9 6.007368291368E9 6.001810571766E9 2.984339133822E9 3.252800270436E9 4.00461628037E9 4.787920452978E9 6.010143145298E9 6.013828640546E9 4.3682036941E9)
Error minima by case: (2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1)
Average genome size in population (length): 41.268
Average program size in population (points): 47.07
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.15
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 56006214
--- Timings ---
Current time: 1481337709802 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_min integer_min boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 11 3861 5643 3861 0 0 0 0 12 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 9
Lexicase best total error: 69026
Lexicase best mean error: 2556.5186
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_min integer_min boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank exec_empty integer_max exec_dup (string_yank exec_do*times (exec_yank string_reverse string_butlast boolean_swap integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 11 3861 5643 3861 0 0 0 0 12 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 9
Zero cases best number of zero cases: 9
Zero cases best total error: 69026
Zero cases best mean error: 2556.5186
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (34 8 47 14 115 29 18 9 42 39 19 38 5 115 115 115 115 13 34 115 115 115 38 115 14 20 19)
Population mean number of elite cases: 2.95
Count of perfect (error zero) individuals by case: (0 8 47 14 115 29 18 0 42 39 19 38 5 115 115 115 115 13 0 115 115 115 38 115 14 0 0)
Population mean number of perfect (error zero) cases: 2.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min boolean_not integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.5494414604456E10
Median total errors in population: 69026
Error averages by case: (6.86688203496E8 1.103681123318E9 1.60993094021E9 1.716017697142E9 1.459135762584E9 4.32507861412E8 2.50352409784E8 2.50352281164E8 4419113.914 2015557.274 4.11248097156E8 6.57688922954E8 4.77196925468E8 7.2028388718E7 6.5682019928E7 9.1389877265E8 3.51673350692E8 2684017.536 9.49957964812E8 3.15339032832E8 7.8773536312E7 1.01501367574E8 6.86690448582E8 1.70642382164E8 1.186399098432E9 1.459137575388E9 7.877175296E7)
Error minima by case: (2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1)
Average genome size in population (length): 40.06
Average program size in population (points): 45.596
Average percent parens in population: 0.121
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.446
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.446
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 29500
Number of point (instruction) evaluations so far: 57641699
--- Timings ---
Current time: 1481337719271 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (27 9 42 12 126 24 10 11 45 34 23 39 8 126 126 126 126 8 27 126 126 126 39 126 11 12 2)
Population mean number of elite cases: 3.03
Count of perfect (error zero) individuals by case: (0 9 42 12 126 24 10 0 45 34 23 39 8 126 126 126 126 8 0 126 126 126 39 126 11 0 2)
Population mean number of perfect (error zero) cases: 2.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not boolean_yankdup exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not boolean_yankdup exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 2.77397026884118E11
Median total errors in population: 69026
Error averages by case: (1.0689760813126E10 1.111069798879E10 1.162332961567E10 1.173095760458E10 1.1470465199962E10 1.043385129418E10 1.0250832185388E10 1.0250832056846E10 7.213845294906E9 4.602615048564E9 1.0412474061104E10 1.0660535491746E10 1.0478803593304E10 1.0072045711778E10 1.006569204113E10 1.0918961918842E10 1.0352591540938E10 1.000268086121E10 1.0955372655788E10 1.03160872341E10 1.0078799422996E10 1.0101562355782E10 1.0689762006664E10 1.0170860653668E10 1.119434549675E10 1.1470467049158E10 1.0078797687148E10)
Error minima by case: (2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.65
Average program size in population (points): 45.21
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.144
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 59262269
--- Timings ---
Current time: 1481337728619 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_contains integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_contains integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_contains integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (33 12 48 14 126 14 21 10 45 148 7 43 10 126 126 126 126 126 33 126 126 126 43 126 15 8 11)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (0 12 48 14 126 14 21 0 45 148 7 43 10 126 126 126 126 126 0 126 126 126 43 126 15 0 11)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup (string_substring) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 2.04104277348322E11
Median total errors in population: 69003
Error averages by case: (9.37210184967E9 8.205611020318E9 9.217606001786E9 9.429685625114E9 1.0916167387242E10 6.864075592346E9 8.500053008486E9 8.500052960722E9 2.010955235132E9 2.004443471946E9 8.821589060154E9 7.31413519001E9 8.953392438438E9 4.882491459742E9 4.805405219434E9 9.826256607618E9 8.702530850978E9 4.006635613592E9 9.898333997334E9 8.629919043642E9 5.269502395058E9 6.080755198034E9 7.372102013834E9 8.340779676866E9 1.037096174607E10 1.0916166918038E10 4.892567766718E9)
Error minima by case: (2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.268
Average program size in population (points): 44.76
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 116
Genome diversity (% unique Plush genomes):	 0.478
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.478
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 30500
Number of point (instruction) evaluations so far: 60900917
--- Timings ---
Current time: 1481337737911 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min boolean_or integer_max exec_dup (string_yank exec_yank integer_add boolean_not (in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (30 20 41 15 147 15 8 13 44 167 10 38 11 147 147 147 147 147 30 147 147 147 38 147 8 11 12)
Population mean number of elite cases: 3.96
Count of perfect (error zero) individuals by case: (0 20 41 15 147 15 8 0 44 167 10 38 11 147 147 147 147 147 0 147 147 147 38 147 8 0 12)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min string_yank boolean_not exec_yank exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup string_substring string_swap string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.10058648884156E11
Median total errors in population: 69003
Error averages by case: (4.686367112622E9 5.103164886722E9 5.609259858928E9 5.715322715892E9 5.458655253726E9 4.432231364694E9 4.250173780376E9 4.250177686828E9 2.005489844656E9 2.002229303094E9 4.410993653856E9 4.657323866008E9 4.476918420664E9 2.441329524546E9 2.402791605302E9 4.913578600846E9 4.35150404347E9 2.003344718476E9 4.949564436348E9 4.31519312847E9 2.634865215566E9 3.040509295334E9 4.686314485626E9 4.17056045609E9 5.185889209914E9 5.458540824382E9 2.44635559172E9)
Error minima by case: (2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.672
Average program size in population (points): 45.35
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 123
Genome diversity (% unique Plush genomes):	 0.46
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.46
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 62559863
--- Timings ---
Current time: 1481337746880 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (29 16 52 13 125 15 11 10 54 148 10 47 12 125 125 125 125 125 29 125 125 125 47 125 4 10 14)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (0 16 52 13 125 15 11 0 54 148 10 47 12 125 125 125 125 125 0 125 125 125 47 125 4 0 14)
Population mean number of perfect (error zero) cases: 3.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction in2} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not in2 exec_yank integer_dec integer_max exec_dup (string_yank exec_pop (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_and exec_empty string_replacefirst))))
Partial simplification: (in2 exec_yank integer_dec integer_max (100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.56053454544556E11
Median total errors in population: 69003
Error averages by case: (6.00046647815E9 6.000565060594E9 6.000893780676E9 6.000755163272E9 6.000819027284E9 6.000304584342E9 6.000224755088E9 6.000228670648E9 4.011615399682E9 4.002013405306E9 6.000306401904E9 6.000497789652E9 6.000340487524E9 6.000118483972E9 6.000122162722E9 6.000632731784E9 6.000335909068E9 4.02979729483E9 6.000583632648E9 6.000324563348E9 6.000151911404E9 6.000176117336E9 6.000511989278E9 6.0002321101E9 6.000623906358E9 6.000704496554E9 6.000108231032E9)
Error minima by case: (2 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.532
Average program size in population (points): 45.094
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.502
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.502
Total error diversity:				 0.14
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 31500
Number of point (instruction) evaluations so far: 64187865
--- Timings ---
Current time: 1481337755168 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (32 17 34 10 133 12 19 1 36 148 12 33 12 133 133 133 133 133 32 133 133 133 33 133 7 16 16)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (0 17 34 10 133 12 19 1 36 148 12 33 12 133 133 133 133 133 0 133 133 133 33 133 7 0 16)
Population mean number of perfect (error zero) cases: 3.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction 100} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction exec_empty} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (100 integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt exec_empty) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove boolean_or exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (100 exec_yank integer_dec integer_max (string_parse_to_chars string_yank 100 in2 integer_mult in1 100 integer_mult exec_empty))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.8101092378363E11
Median total errors in population: 69003
Error averages by case: (7.372271242678E9 8.205768026538E9 9.217802700432E9 9.429894196808E9 8.916497712636E9 6.864160392434E9 6.50012470429E9 6.500128679762E9 2.022207832468E9 2.006247198602E9 6.821683144256E9 7.31424792528E9 6.953498787514E9 6.143823019948E9 6.131153453056E9 7.826529889048E9 6.702675397072E9 2.035612604762E9 7.89854946167E9 6.63006495546E9 6.15732220462E9 6.202733995876E9 7.372217787026E9 6.340891469768E9 8.371158187198E9 8.916380967626E9 6.157277846802E9)
Error minima by case: (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.264
Average program size in population (points): 44.79
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 65806941
--- Timings ---
Current time: 1481337763425 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_dec integer_max exec_dup (exec_yank integer_add exec_dup (integer_gt in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (31 14 42 14 128 17 8 12 47 152 20 40 15 128 128 128 128 127 31 128 128 128 40 128 14 10 11)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (0 14 42 14 128 17 8 12 47 152 20 40 15 128 128 128 128 127 0 128 128 128 40 128 14 0 11)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_rot} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_rot) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_rot) string_parse_to_chars) string_flush exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 3.23313703856E8
Median total errors in population: 69003
Error averages by case: (1.4737093132E7 1.7435832846E7 1.9964914886E7 2.0430916666E7 1.9268896364E7 1.2533233504E7 1.0365231898E7 1.0365157578E7 2625312.562 2015489.32 1.2314657798E7 1.451546259E7 1.2970868822E7 6757242.108 6548719.866 1.6304884688E7 1.1662076844E7 2222417.992 1.6529098458E7 1.122917866E7 6969052.98 7600035.036 1.4737644004E7 9082893.8 1.7891310904E7 1.9269400208E7 6966680.342)
Error minima by case: (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 38.728
Average program size in population (points): 44.128
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 94
Genome diversity (% unique Plush genomes):	 0.464
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.464
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 32500
Number of point (instruction) evaluations so far: 67429813
--- Timings ---
Current time: 1481337772235 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (43 16 50 13 131 19 11 9 55 154 12 47 13 131 131 131 131 131 43 131 131 131 47 131 6 16 6)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (0 16 50 13 131 19 11 9 55 154 12 47 13 131 131 131 131 131 0 131 131 131 47 131 6 0 6)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.4263010051098E10
Median total errors in population: 69003
Error averages by case: (3.176983045348E9 3.278909750776E9 3.818025538194E9 3.969260823198E9 4.95002323664E9 2.504723678228E9 2.355502777268E9 2.375502653344E9 9566260.724 4239287.256 2.550697508378E9 2.772238345134E9 2.65425218898E9 5.3510717384E8 5.19633992652E8 4.088197544622E9 2.803446021684E9 2.365252667E7 3.66823607698E9 2.782074459296E9 8.19932200922E8 1.267892794666E9 2.804584206868E9 2.48826281828E9 3.63840770004E9 3.913225034744E9 4.90432406366E8)
Error minima by case: (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.176
Average program size in population (points): 44.562
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 69100437
--- Timings ---
Current time: 1481337781711 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 10 51 9 136 20 14 8 52 164 10 47 12 136 136 136 136 136 20 136 136 136 47 136 10 12 11)
Population mean number of elite cases: 3.75
Count of perfect (error zero) individuals by case: (0 10 51 9 136 20 14 8 52 164 10 47 12 136 136 136 136 136 0 136 136 136 47 136 10 0 11)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_dup_times} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction string_dup_times} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not string_yank exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt integer_dup_times) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 string_dup_times in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min string_yank boolean_not string_yank exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt integer_dup_times) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 string_dup_times in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 8.266925837704E9
Median total errors in population: 69003
Error averages by case: (2.36105985218E8 6.09089225506E8 1.29538084697E9 1.471652176898E9 1.064316101122E9 9.3871191478E7 3.1639098942E7 3.1640967694E7 35744.024 17908.138 8.4907772794E7 2.16585524042E8 1.1420850527E8 2754448.172 2312262.228 4.17888811844E8 6.2205025938E7 27788.966 4.51422538846E8 5.0080339786E7 3282075.226 5360341.636 2.36069983038E8 1.483671047E7 7.03753952462E8 1.064214286418E9 3266224.578)
Error minima by case: (2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.42
Average program size in population (points): 44.932
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 33500
Number of point (instruction) evaluations so far: 70733809
--- Timings ---
Current time: 1481337791130 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_lt integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_lt integer_min boolean_or boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_lt integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_lt integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 12 44 10 127 19 11 13 49 156 6 42 13 127 127 127 127 127 38 127 127 127 42 127 16 10 9)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (0 12 44 10 127 19 11 13 49 156 6 42 13 127 127 127 127 127 0 127 127 127 42 127 16 0 9)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.12114639799738E11
Median total errors in population: 69003
Error averages by case: (5.372589904016E9 6.206257160028E9 7.218469026866E9 7.430596563006E9 6.917093506456E9 4.864396603022E9 4.500275617972E9 4.50027750552E9 1.0968965374E7 4451367.178 4.82190539546E9 5.314572824114E9 4.953746851464E9 8.8258969002E8 8.05500144274E8 5.82691626637E9 4.702845120992E9 6646990.564 5.898965375624E9 4.630214419792E9 1.269614960672E9 2.080889985068E9 5.372553807654E9 4.34097242362E9 6.371670756852E9 6.916991609728E9 8.92666958032E8)
Error minima by case: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.3
Average program size in population (points): 44.78
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 72377726
--- Timings ---
Current time: 1481337800482 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (exec_dup (exec_yank integer_add (in2 in1 100 integer_mult)))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 9 45 12 133 21 16 13 51 159 14 41 9 133 133 133 133 133 12 133 133 133 41 133 11 14 14)
Population mean number of elite cases: 3.66
Count of perfect (error zero) individuals by case: (0 9 45 12 133 21 16 13 51 159 14 41 9 133 133 133 133 133 0 133 133 133 41 133 11 0 14)
Population mean number of perfect (error zero) cases: 3.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*while} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*while (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (in1 exec_yank integer_dec integer_max (boolean_stackdepth in2 100 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 50
Size: 56
Percent parens: 0.107
--- Population Statistics ---
Average total errors in population: 1.08494458413502E11
Median total errors in population: 69003
Error averages by case: (5.150582977668E9 6.304733909182E9 8.169629858304E9 8.62515657202E9 7.561329425234E9 4.615915198044E9 3.810332888118E9 3.810338766678E9 5622671.648 2254682.508 4.577098741172E9 5.082945193344E9 4.700719454626E9 5.26339704054E8 4.71327180866E8 5.736888543964E9 4.47292010741E9 3393797.956 5.83922152105E9 4.412780435138E9 7.39647815202E8 1.229934476994E9 5.15039572399E9 2.807951908466E9 6.574760084976E9 7.561112319748E9 5.51124455142E8)
Error minima by case: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.502
Average program size in population (points): 44.992
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 66
Genome diversity (% unique Plush genomes):	 0.49
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 66
Syntactic diversity (% unique Push programs):	 0.49
Total error diversity:				 0.11
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 34500
Number of point (instruction) evaluations so far: 73990501
--- Timings ---
Current time: 1481337807968 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) boolean_dup integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_dup (string_yank exec_yank integer_add boolean_not boolean_dup (exec_dup (integer_gt integer_mult in2 integer_mult in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) boolean_dup integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) boolean_dup integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 8 39 13 146 15 8 22 36 167 10 30 12 146 146 146 146 146 16 146 146 146 30 146 13 8 14)
Population mean number of elite cases: 3.82
Count of perfect (error zero) individuals by case: (0 8 39 13 146 15 8 22 36 167 10 30 12 146 146 146 146 146 0 146 146 146 30 146 13 0 14)
Population mean number of perfect (error zero) cases: 3.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_stackdepth} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dup integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult exec_stackdepth 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min string_yank integer_inc integer_dup integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult exec_stackdepth 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.16266258740036E11
Median total errors in population: 69003
Error averages by case: (4.23608562475E9 4.609094756762E9 5.295370456866E9 5.471634086702E9 5.064181562778E9 4.093892388406E9 4.031653426378E9 4.031653290874E9 4.000038246882E9 3.99964944154E9 4.084922016198E9 4.216602933762E9 4.114219574266E9 4.002759673254E9 4.002314498406E9 4.417797599754E9 4.062187082406E9 4.000027808684E9 4.451376434188E9 4.050060164466E9 4.003278783842E9 4.005354783338E9 4.23608690617E9 4.014826478062E9 4.703730068354E9 5.064183530634E9 4.003277122314E9)
Error minima by case: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.504
Average program size in population (points): 44.818
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.128
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 75629032
--- Timings ---
Current time: 1481337816890 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or boolean_not integer_inc integer_min boolean_not exec_yank integer_dec integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (1 12 42 6 135 22 3 13 41 163 10 33 14 135 135 135 135 135 18 135 135 135 33 135 16 10 19)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (1 12 42 6 135 22 3 13 41 163 10 33 14 135 135 135 135 135 0 135 135 135 33 135 16 0 19)
Population mean number of perfect (error zero) cases: 3.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min string_yank boolean_not exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.23504534035712E11
Median total errors in population: 69003
Error averages by case: (4.687180611138E9 5.104354599338E9 5.610795108242E9 5.716921470802E9 5.45995140243E9 4.432867830736E9 4.250603291426E9 4.250603280542E9 4.004436236638E9 4.001667637598E9 4.411597184074E9 4.658164873202E9 4.47758245811E9 4.072138443472E9 4.065785935934E9 4.914497135132E9 4.351989942902E9 4.002697578336E9 4.95056946209E9 4.315633921182E9 4.078891555958E9 4.101640944716E9 4.687180279662E9 4.170838924278E9 5.187106577098E9 5.459949400386E9 4.07888795029E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.244
Average program size in population (points): 44.558
Average percent parens in population: 0.120
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.138
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 35500
Number of point (instruction) evaluations so far: 77236147
--- Timings ---
Current time: 1481337826197 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (exec_dup (exec_yank integer_add (in2 in1 100 integer_mult)))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 13 43 16 132 15 7 17 41 155 14 36 12 132 132 132 132 132 26 132 132 132 36 132 10 22 12)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (20 13 43 16 132 15 7 17 41 155 14 36 12 132 132 132 132 132 0 132 132 132 36 132 10 0 12)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction string_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_gte} {:close 0, :instruction boolean_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank in1 string_pop exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_gte boolean_shove exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove boolean_or exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (in1 exec_yank integer_dec integer_max exec_dup (100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 40
Size: 46
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 8.869660602055E10
Median total errors in population: 69003
Error averages by case: (4.000907336662E9 4.001120317098E9 4.001433241866E9 4.00150228911E9 4.001615893724E9 4.00059966295E9 4.000435148714E9 4.000441061518E9 5.8235443342E7 2.0239691424E7 4.000598687618E9 4.000794687594E9 4.000665565402E9 2.369574403272E9 2.337370256974E9 4.00122426326E9 4.000631804904E9 2.997906138E7 4.001141989402E9 4.000604342108E9 2.556391900844E9 2.93936356226E9 4.000817558822E9 4.000418578204E9 4.001233383306E9 4.00139768941E9 2.367868199382E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.658
Average program size in population (points): 45.194
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 78877338
--- Timings ---
Current time: 1481337833854 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 8 40 12 145 16 12 14 39 170 9 36 15 145 145 145 145 145 29 145 145 145 36 145 12 11 13)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (19 8 40 12 145 16 12 14 39 170 9 36 15 145 145 145 145 145 0 145 145 145 36 145 12 0 13)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yankdup} {:close 0, :instruction boolean_stackdepth})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_not integer_yankdup boolean_stackdepth))))
Partial simplification: (integer_min integer_min boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring 100 in2 integer_mult in1 100 string_empty integer_mult boolean_not integer_yankdup boolean_stackdepth))))
Errors: [23 14 15 13 263 17 6 2 15 17 7 15 4 1006 2505 2250 1629 7284 32 2627 4607 4610 15 3817 5 1 8]
Total: 30807
Mean: 1141.0
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.58211554736052E11
Median total errors in population: 69003
Error averages by case: (6.000360766082E9 6.000220441332E9 6.000265679234E9 6.000290668714E9 6.000813062366E9 6.000118786918E9 6.000126477674E9 6.000140423426E9 4.18479382327E9 4.020009648046E9 6.000157757954E9 6.000160265138E9 6.000183650738E9 6.000118819902E9 6.00014498635E9 6.000699188982E9 6.00035378869E9 6.000065107694E9 6.00047380835E9 6.000368738246E9 6.00020957087E9 6.00023927531E9 6.000164142238E9 6.000291733138E9 6.000352145462E9 6.000363446794E9 6.000068533134E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0)
Average genome size in population (length): 39.712
Average program size in population (points): 45.204
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.118
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 36500
Number of point (instruction) evaluations so far: 80520650
--- Timings ---
Current time: 1481337843306 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (boolean_not integer_max exec_dup (exec_yank integer_add string_parse_to_chars (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (26 11 37 12 120 29 10 11 38 156 10 33 14 120 120 120 120 120 2 120 120 120 33 120 17 1 9)
Population mean number of elite cases: 3.30
Count of perfect (error zero) individuals by case: (26 11 37 12 120 29 10 11 38 156 10 33 14 120 120 120 120 120 2 120 120 120 33 120 17 1 9)
Population mean number of perfect (error zero) cases: 3.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min boolean_not integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt)) integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 4.8035718936362E10
Median total errors in population: 69003
Error averages by case: (2.000789481574E9 2.001083013548E9 2.001391901564E9 2.001452197854E9 2.001302888622E9 2.000581630472E9 2.000404466524E9 2.000404366408E9 1.2694031766E7 2037517.402 2.000562164728E9 2.000767936074E9 2.00062041672E9 2.000177567024E9 2.00016789496E9 2.00095563954E9 2.000506779802E9 4219567.986 2.000979479724E9 2.000472004686E9 2.000190227902E9 2.000224483996E9 2.000790254084E9 2.00031520555E9 2.001135988978E9 2.001303600022E9 2.000188228852E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.654
Average program size in population (points): 45.026
Average percent parens in population: 0.119
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.118
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 82163301
--- Timings ---
Current time: 1481337852226 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 12 39 8 129 16 14 12 42 155 11 34 13 129 129 129 129 129 13 129 129 129 34 129 15 21 17)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (10 12 39 8 129 16 14 12 42 155 11 34 13 129 129 129 129 129 13 129 129 129 34 129 15 21 17)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min boolean_not integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.2533816408768E10
Median total errors in population: 69003
Error averages by case: (3.034332639532E9 4.23593198199E9 5.256522467444E9 5.480611374528E9 6.2995988947E9 1.763197607972E9 1.038044986388E9 1.04725222062E9 1.8353563768E7 8336626.468 1.697471501E9 2.685030458952E9 1.978300992348E9 3.3237638316E8 3.3294876288E8 4.875917610292E9 1.752899046348E9 2.8184296394E7 4.283727066468E9 1.653445211564E9 4.67619137304E8 6.00523835184E8 2.803351585924E9 9.52915307876E8 4.524035191916E9 5.055133532612E9 3.27754125136E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.598
Average program size in population (points): 45.048
Average percent parens in population: 0.121
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 37500
Number of point (instruction) evaluations so far: 83774326
--- Timings ---
Current time: 1481337862508 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc boolean_empty integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_min boolean_or boolean_not integer_min integer_min boolean_or boolean_not integer_inc boolean_empty integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 51
Percent parens: 0.118
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc boolean_empty integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (exec_dup (exec_yank integer_add string_swap exec_dup (integer_gt in2 in1 100 integer_mult)))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 51
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 9 38 16 132 20 14 16 39 161 12 35 15 132 132 132 132 132 12 132 132 132 35 132 18 15 7)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (14 9 38 16 132 20 14 16 39 161 12 35 15 132 132 132 132 132 12 132 132 132 35 132 18 15 7)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_inc integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) integer_pop exec_dup (boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.3513077013244E10
Median total errors in population: 69003
Error averages by case: (2.6865917956E9 3.103548187666E9 3.609758034596E9 3.715839263932E9 3.458976937892E9 2.432435894892E9 2.25030302755E9 2.25030293803E9 1.860641563E7 4215265.108 2.41117933257E9 2.657593758762E9 2.477121027058E9 2.072006995648E9 2.06566201801E9 2.913782816878E9 2.351611976344E9 7011302.466 2.949838335352E9 2.31528208692E9 2.0787511354E9 2.101474822114E9 2.686592505748E9 2.170604710348E9 3.186259875224E9 3.458977678232E9 2.078748875274E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.568
Average program size in population (points): 44.958
Average percent parens in population: 0.121
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 85418400
--- Timings ---
Current time: 1481337871467 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc boolean_empty integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc boolean_empty integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 51
Percent parens: 0.118
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc boolean_empty integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min integer_min boolean_or boolean_not integer_min integer_min boolean_or integer_inc boolean_empty integer_dec integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 51
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 13 38 10 137 19 11 12 43 167 13 34 10 137 137 137 137 137 26 137 137 137 34 137 9 12 6)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (19 13 38 10 137 19 11 12 43 167 13 34 10 137 137 137 137 137 26 137 137 137 34 137 9 12 6)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult 100 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt integer_mult 100 in2 integer_mult 100 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 2.3538099209034E10
Median total errors in population: 69003
Error averages by case: (9.14871982794E8 1.696278472374E9 2.875260619178E9 3.154379628738E9 2.49764681705E9 5.22440027678E8 2.80176865104E8 2.80176735464E8 4416848.69 2010786.2 4.9249130243E8 8.66890503626E8 5.8684216218E8 7.438447014E7 6.7629474006E7 1.319418251312E9 4.10924168742E8 2679488.224 1.388293475176E9 3.6288260333E8 8.1606563026E7 1.0626563404E8 9.14873231014E8 1.84363872062E8 1.87164185613E9 2.497648711434E9 8.1604658892E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.58
Average program size in population (points): 44.928
Average percent parens in population: 0.119
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 38500
Number of point (instruction) evaluations so far: 87043315
--- Timings ---
Current time: 1481337880796 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush in2 exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_max exec_dup (exec_yank integer_add (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush in2 exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush in2 exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 6 47 19 134 16 13 18 48 156 10 42 16 134 134 134 134 134 9 134 134 134 42 134 10 15 14)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (15 6 47 19 134 16 13 18 48 156 10 42 16 134 134 134 134 134 9 134 134 134 42 134 10 15 14)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction string_empty} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast string_empty exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (in1 exec_yank integer_dec integer_max (integer_gt 100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 2.0544175822761E11
Median total errors in population: 69003
Error averages by case: (8.74459277021E9 1.0206015654114E10 1.1218126109304E10 1.143022818161E10 1.091665332169E10 7.7284370225E9 7.000304474444E9 7.00030439584E9 4.018680709856E9 4.004237173088E9 7.643454574976E9 8.628648603112E9 7.907090194972E9 4.656990289552E9 4.599426396888E9 9.652981590948E9 7.405309315994E9 4.011321440846E9 9.797151071792E9 7.260067463426E9 4.870706032146E9 5.344449862092E9 8.74459331932E9 6.681710278166E9 1.0371386183462E10 1.091665401395E10 4.682237783312E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.138
Average program size in population (points): 45.706
Average percent parens in population: 0.121
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.14
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 88669407
--- Timings ---
Current time: 1481337888566 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_yank exec_yank integer_min integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_dup_items boolean_dup in2 integer_mult in1 100 boolean_invert_first_then_and integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_yank exec_yank integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring string_dup_items in2 integer_mult in1 100 boolean_invert_first_then_and integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 52
Percent parens: 0.115
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_dup_items} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_yank exec_yank integer_min integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_dup_items boolean_dup in2 integer_mult in1 100 boolean_invert_first_then_and integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank integer_yank exec_yank integer_min integer_min boolean_or integer_inc integer_min integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 boolean_invert_first_then_and integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 52
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 11 45 10 124 20 11 15 44 151 10 38 11 124 124 124 124 124 14 124 124 124 38 124 12 15 5)
Population mean number of elite cases: 3.41
Count of perfect (error zero) individuals by case: (13 11 45 10 124 20 11 15 44 151 10 38 11 124 124 124 124 124 14 124 124 124 38 124 12 15 5)
Population mean number of perfect (error zero) cases: 3.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 5.6161615038848E10
Median total errors in population: 69003
Error averages by case: (2.689953121476E9 3.110864563316E9 3.62341115284E9 3.731015608576E9 3.470577274256E9 2.434029162138E9 2.250976681908E9 2.250976565964E9 5504364.182 2237805.486 2.412649253718E9 2.660727466016E9 2.478986233324E9 4.41478491542E8 4.0291586829E8 2.919146445802E9 2.352757815488E9 3338578.038 2.955554435984E9 2.316246757976E9 6.35006004696E8 1.040707719486E9 2.689954218578E9 2.170980604308E9 3.194501709472E9 3.470578959604E9 4.46538176384E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.586
Average program size in population (points): 45.098
Average percent parens in population: 0.121
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 39500
Number of point (instruction) evaluations so far: 90278132
--- Timings ---
Current time: 1481337897933 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not string_dup boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush boolean_yank exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (boolean_not exec_dup (exec_yank integer_add exec_dup (in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 47
Percent parens: 0.128
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not string_dup boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush boolean_yank exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not boolean_not exec_yank integer_dec integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) boolean_yank exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 47
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 15 43 14 147 14 8 13 48 163 7 43 11 147 147 147 147 145 10 147 147 147 43 147 13 17 17)
Population mean number of elite cases: 3.91
Count of perfect (error zero) individuals by case: (7 15 43 14 147 14 8 13 48 163 7 43 11 147 147 147 147 145 10 147 147 147 43 147 13 17 17)
Population mean number of perfect (error zero) cases: 3.91
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction in2} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_do*range} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min in2 boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (exec_do*range (exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove boolean_or exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst)))))
Partial simplification: (in2 exec_yank integer_dec integer_max (100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 1.21885981608304E11
Median total errors in population: 69003
Error averages by case: (5.379529345792E9 6.103686057958E9 7.234561526866E9 7.447731496082E9 6.931568880242E9 3.30805296322E9 3.627468834822E9 4.096666661526E9 2.00620078564E8 2.6408169146E7 4.497017441626E9 4.281068859074E9 4.958642896022E9 3.513966445166E9 4.132009443188E9 5.836035326678E9 4.70646929555E9 2.210448654734E9 5.908486792894E9 4.633476721394E9 4.158298372634E9 4.203942667718E9 4.381470681232E9 4.342813642194E9 6.38355615636E9 6.931570838068E9 2.450413359554E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.92
Average program size in population (points): 45.572
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 91920344
--- Timings ---
Current time: 1481337906021 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 9 40 10 129 23 20 13 45 153 14 40 10 129 129 129 129 128 14 129 129 129 40 129 11 8 12)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (18 9 40 10 129 23 20 13 45 153 14 40 10 129 129 129 129 128 14 129 129 129 40 129 11 8 12)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 2.3060276712E7
Median total errors in population: 69003
Error averages by case: (1081605.352 1484703.33 1908870.248 1991621.476 1785621.256 796304.218 553379.126 553243.08 38763.702 23439.568 769726.556 1052161.796 849660.416 242141.43 228574.762 1308677.972 693374.392 31817.514 1342261.208 645428.996 258728.396 305665.166 1082797.938 430179.684 1557259.564 1787401.836 256867.73)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.296
Average program size in population (points): 45.884
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 40500
Number of point (instruction) evaluations so far: 93577781
--- Timings ---
Current time: 1481337915411 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add boolean_not exec_dup (exec_dup (in2 in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min integer_min string_yank integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 22 34 12 134 18 8 5 39 162 15 34 15 134 134 134 134 133 10 134 134 134 34 134 19 16 13)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (11 22 34 12 134 18 8 5 39 162 15 34 15 134 134 134 134 133 10 134 134 134 34 134 19 16 13)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.45140699462034E11
Median total errors in population: 69003
Error averages by case: (6.0591800313E9 7.30982740398E9 7.21950988328E9 9.146422072098E9 8.375947557908E9 4.86486899419E9 4.750604251968E9 4.75060412326E9 2.031999711686E9 1.987822799602E9 5.233114043006E9 5.315183903552E9 5.430895172616E9 4.215887104798E9 4.1968582244E9 6.740625429318E9 5.054452750488E9 2.067540175916E9 6.848776186836E9 4.945488421628E9 4.23610692294E9 4.30425205239E9 5.373181299374E9 4.51157376856E9 7.557922542968E9 8.375949443756E9 4.236105190216E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.582
Average program size in population (points): 46.17
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.13
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 95228391
--- Timings ---
Current time: 1481337924430 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank integer_min string_dup boolean_not integer_inc exec_yank integer_dec boolean_invert_first_then_and exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush boolean_yank exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_yank exec_dup (exec_yank integer_add exec_dup (integer_dec exec_dup (integer_gt string_substring in2 integer_mult in1 100 integer_mult boolean_dup))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 47
Percent parens: 0.128
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank integer_min string_dup boolean_not integer_inc exec_yank integer_dec boolean_invert_first_then_and exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush boolean_yank exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (string_dup exec_dup (exec_yank integer_add (in2 in1 100 integer_mult string_replacefirst)))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 47
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 5 33 22 160 12 13 8 40 178 4 33 11 160 160 160 160 159 14 160 160 160 33 160 14 14 9)
Population mean number of elite cases: 4.11
Count of perfect (error zero) individuals by case: (12 5 33 22 160 12 13 8 40 178 4 33 11 160 160 160 160 159 14 160 160 160 33 160 14 14 9)
Population mean number of perfect (error zero) cases: 4.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank string_butlast) string_parse_to_chars) string_flush exec_dup (boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.62013904399792E11
Median total errors in population: 69003
Error averages by case: (6.000662769504E9 6.000835112574E9 6.00106848296E9 6.00111815863E9 6.001144246696E9 6.000448693056E9 6.00032455547E9 6.000328450878E9 6.00002485947E9 6.0000154015E9 6.000445678086E9 6.00059335328E9 6.000494365178E9 6.000161526128E9 6.000162562238E9 6.000870287016E9 6.000461057616E9 6.000037901814E9 6.000827628006E9 6.000440831584E9 6.000197506456E9 6.000230240488E9 6.000610374986E9 6.000308990476E9 6.000907264504E9 6.00103003368E9 6.000154067518E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.438
Average program size in population (points): 46.06
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.124
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 41500
Number of point (instruction) evaluations so far: 96869480
--- Timings ---
Current time: 1481337932573 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 14 55 16 134 19 9 8 64 162 12 55 11 134 134 134 134 134 12 134 134 134 55 134 12 6 7)
Population mean number of elite cases: 3.74
Count of perfect (error zero) individuals by case: (14 14 55 16 134 19 9 8 64 162 12 55 11 134 134 134 134 134 12 134 134 134 55 134 12 6 7)
Population mean number of perfect (error zero) cases: 3.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 5.4770117174542E10
Median total errors in population: 69003
Error averages by case: (2.031338781134E9 2.021546454472E9 2.021816894316E9 2.021869691044E9 2.040306429888E9 2.021107448032E9 2.020952922988E9 2.025964875456E9 2.020625051928E9 2.020615044346E9 2.021090411346E9 2.02127071036E9 2.025751864256E9 2.029391237844E9 2.032210878062E9 2.041429604972E9 2.035545246614E9 2.03756285834E9 2.033324444096E9 2.037139219422E9 2.036893463158E9 2.037533104E9 2.021290237344E9 2.037408892822E9 2.028012707194E9 2.027354696244E9 2.020764004864E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.058
Average program size in population (points): 45.542
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.13
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 98512533
--- Timings ---
Current time: 1481337941944 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_split} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_yank integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_inc exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_split boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_yank integer_min boolean_or boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) string_flush integer_inc exec_dup (string_yank exec_dup (integer_gt string_substring string_split boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 52
Percent parens: 0.115
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_split} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_yank integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_inc exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_split boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_dec exec_dup (exec_yank integer_add (in2 in1 100 integer_mult exec_empty)))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 52
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 9 39 17 123 21 16 17 48 152 16 39 12 123 123 123 123 122 7 123 123 123 39 123 9 9 13)
Population mean number of elite cases: 3.42
Count of perfect (error zero) individuals by case: (16 9 39 17 123 21 16 17 48 152 16 39 12 123 123 123 123 122 7 123 123 123 39 123 9 9 13)
Population mean number of perfect (error zero) cases: 3.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not boolean_pop exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (boolean_not boolean_pop exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (integer_gt string_butlast) string_parse_to_chars) integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.50240581857484E11
Median total errors in population: 69003
Error averages by case: (6.001229502892E9 6.00171080982E9 6.002233131946E9 6.00233690103E9 6.002083411168E9 6.000894612804E9 6.00061633696E9 6.000616300336E9 2.120824853828E9 2.024043461234E9 6.000864231138E9 6.001193400778E9 6.00095690478E9 6.000266809358E9 6.000251833736E9 6.001501352318E9 6.000777580316E9 2.069420679192E9 6.001540543104E9 6.000722659584E9 6.000285584904E9 6.000338017182E9 6.001229533248E9 6.000477890636E9 6.001799922128E9 6.002082766148E9 6.000282826916E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.63
Average program size in population (points): 46.244
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 42500
Number of point (instruction) evaluations so far: 100161429
--- Timings ---
Current time: 1481337950887 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_dup exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_stackdepth exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_dup exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_stackdepth exec_dup (string_yank integer_dec exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_dup exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_stackdepth exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_dup exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_stackdepth exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 11 37 15 139 15 12 6 45 158 11 37 17 139 139 139 139 139 10 139 139 139 37 139 20 9 12)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (16 11 37 15 139 15 12 6 45 158 11 37 17 139 139 139 139 139 10 139 139 139 37 139 20 9 12)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_pop} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction string_substring} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min integer_pop boolean_or integer_inc exec_yank boolean_empty integer_max exec_dup (string_yank exec_do*times (exec_yank boolean_not boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (boolean_dup_items string_dup string_butlast integer_dec exec_dup (string_rest string_substring in1 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Partial simplification: (integer_min integer_min exec_yank boolean_empty exec_dup (string_yank exec_do*times (exec_yank boolean_not boolean_dup_items boolean_stackdepth integer_add exec_dup (string_substring string_swap) string_parse_to_chars) integer_pop exec_dup (boolean_dup_items string_dup string_butlast integer_dec exec_dup (string_rest string_substring in1 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_yankdup string_replacefirst))))
Errors: [14 18 18 18 254 18 15 11 18 18 16 18 13 997 2496 2241 1620 7275 23 2618 4598 4601 18 3808 4 8 17]
Total: 30773
Mean: 1139.7407
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 7.4725625853656E10
Median total errors in population: 69003
Error averages by case: (2.93466032351E9 3.13318986969E9 3.647803244764E9 3.765854036724E9 4.841260788714E9 2.441014282472E9 2.272877531538E9 2.28207739977E9 2.00489975156E9 2.002211651102E9 2.440289457416E9 2.67415481854E9 2.519426235218E9 2.112325259136E9 2.132239748026E9 4.080994547944E9 2.677711001938E9 2.019754986142E9 3.378758829822E9 2.68932063561E9 2.22677594161E9 2.29019156332E9 2.703773575106E9 2.431218380178E9 3.33858683083E9 3.597102717758E9 2.087152445218E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.428
Average program size in population (points): 46.07
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 101803816
--- Timings ---
Current time: 1481337960361 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_pop exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_pop exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_pop exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_pop exec_dup (integer_gt string_substring integer_mult boolean_dup in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 13 32 12 143 17 12 7 42 167 11 32 16 143 143 143 143 143 17 143 143 143 32 143 13 9 12)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (14 13 32 12 143 17 12 7 42 167 11 32 16 143 143 143 143 143 17 143 143 143 32 143 13 9 12)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.23492452291532E11
Median total errors in population: 69003
Error averages by case: (4.686730228704E9 5.103589479172E9 5.609800952616E9 5.715890642456E9 5.459304973636E9 4.432459194378E9 4.250344423014E9 4.25035227733E9 4.004421786928E9 3.999637253116E9 4.411225725076E9 4.657625922168E9 4.47717714273E9 4.072063266528E9 4.065734392842E9 4.9140850845E9 4.351771856064E9 4.00271831921E9 4.950020398938E9 4.31545345954E9 4.07885912678E9 4.101596745476E9 4.68662512177E9 4.170747912348E9 5.186365633736E9 5.459076567836E9 4.07877440464E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.79
Average program size in population (points): 45.3
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.126
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 43500
Number of point (instruction) evaluations so far: 103419274
--- Timings ---
Current time: 1481337969715 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 12 39 16 142 18 8 12 42 162 20 39 5 142 142 142 142 142 15 142 142 142 39 142 8 7 13)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (12 12 39 16 142 18 8 12 42 162 20 39 5 142 142 142 142 142 15 142 142 142 39 142 8 7 13)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 7.9737884731464E10
Median total errors in population: 69003
Error averages by case: (3.86276498876E9 4.381268492762E9 5.426248086808E9 5.683501261634E9 6.407712052332E9 2.93652371779E9 2.605377817826E9 2.625381806258E9 1.395591771E7 6239806.728 2.961274592234E9 3.4289916478E9 3.130710629526E9 6.06948189868E8 5.85149155544E8 5.001068710708E9 3.154576343296E9 2.634694679E7 4.617073861154E9 3.096919832388E9 8.98529682428E8 1.369183043876E9 3.490311441446E9 2.658592053592E9 4.823451944156E9 5.370795335676E9 5.68987372374E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.38
Average program size in population (points): 46.06
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.13
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 105060606
--- Timings ---
Current time: 1481337979434 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_concat} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec string_concat exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_min integer_min string_yank boolean_not integer_inc string_concat exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 47
Percent parens: 0.128
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_concat} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec string_concat exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min integer_min integer_min string_yank boolean_not exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 47
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 12 46 12 127 15 17 9 50 150 12 46 12 127 127 127 127 127 12 127 127 127 46 127 11 10 13)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (14 12 46 12 127 15 17 9 50 150 12 46 12 127 127 127 127 127 12 127 127 127 46 127 11 10 13)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min in1 integer_inc exec_yank integer_dec integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_or exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Partial simplification: (in1 exec_yank integer_dec integer_dec integer_max (integer_gt 100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 92 10 21 25 12 10 20 12 23 35 34 79 58 13 59 56 36 39 12 46 32 28 19]
Total: 860
Mean: 31.851852
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.7975182284E7
Median total errors in population: 69003
Error averages by case: (855430.924 1074614.736 1408039.416 1482754.622 1581878.828 552440.828 396565.8 402438.292 28701.878 17524.684 552036.442 743445.816 616870.188 194630.518 196404.292 1173154.246 587009.38 42534.994 1092051.628 561289.148 241261.068 283425.894 766203.026 385966.292 1189829.26 1364828.764 183851.32)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.512
Average program size in population (points): 46.158
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.12
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 44500
Number of point (instruction) evaluations so far: 106704486
--- Timings ---
Current time: 1481337987780 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap)) exec_dup (string_yank integer_dec exec_dup (integer_gt in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 9 38 14 119 16 15 13 43 142 15 38 8 119 120 119 119 119 17 119 119 119 38 119 15 15 12)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (16 9 38 14 119 16 15 13 43 142 15 38 8 119 120 119 119 119 17 119 119 119 38 119 15 15 12)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup string_yank integer_gt string_butlast string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 8.248429045708E9
Median total errors in population: 69003
Error averages by case: (2.37596008342E8 6.03199724828E8 1.283230511632E9 1.458378262578E9 1.067434229662E9 9.221321104E7 3.201782653E7 3.2227393742E7 76183.542 18976.784 8.4789719816E7 2.14456545088E8 1.1405738763E8 3648703.92 3486631.5 4.24351040904E8 6.5704727598E7 389739.03 4.5276994547E8 5.3951178598E7 5191969.878 7655550.072 2.3373553112E8 1.7832215402E7 6.99717194146E8 1.056695376958E9 3603259.898)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.388
Average program size in population (points): 45.036
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.134
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 108308386
--- Timings ---
Current time: 1481337997144 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_min integer_min boolean_or exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 51
Percent parens: 0.118
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 51
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (21 11 50 12 142 13 8 9 56 161 10 50 17 142 143 142 142 141 9 142 142 142 50 142 4 5 11)
Population mean number of elite cases: 3.83
Count of perfect (error zero) individuals by case: (21 11 50 12 142 13 8 9 56 161 10 50 17 142 143 142 142 141 9 142 142 142 50 142 4 5 11)
Population mean number of perfect (error zero) cases: 3.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank integer_inc integer_dec exec_dup (exec_do*times (exec_yank boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (integer_gt string_butlast)) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.62849619351608E11
Median total errors in population: 69003
Error averages by case: (6.686613073774E9 7.103527109316E9 7.60975898583E9 7.71585037069E9 7.459113546298E9 6.432402897506E9 6.250287421716E9 6.250291322132E9 1.09728388634E9 2.06087089198E8 6.411158614526E9 6.65756171487E9 6.47710334152E9 6.072016534836E9 6.065680611086E9 6.91388831906E9 6.351650463542E9 2.062611405708E9 6.9498841791E9 6.315327998674E9 6.07878553765E9 6.101513101816E9 6.686560631406E9 6.170646267278E9 7.186273761954E9 7.458999183474E9 6.078741982308E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.968
Average program size in population (points): 45.552
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 45500
Number of point (instruction) evaluations so far: 109930927
--- Timings ---
Current time: 1481338006466 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_take} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add string_take integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (string_yank integer_min exec_dup (exec_yank integer_add string_parse_to_chars string_yank exec_dup (integer_gt in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_take} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add string_take integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank integer_min boolean_not integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add string_take integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 10 42 9 140 12 9 13 46 156 19 42 13 140 140 140 140 139 9 140 140 140 42 140 6 8 17)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (10 10 42 9 140 12 9 13 46 156 19 42 13 140 140 140 140 139 9 140 140 140 42 140 6 8 17)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction integer_gte} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_flush} {:close 0, :instruction string_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_max})
Best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) integer_gte) integer_dup_times integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_flush string_rot exec_dup (boolean_yankdup string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty integer_max))))))
Partial simplification: (integer_min boolean_or exec_dup string_yank integer_add boolean_not integer_mult integer_gte integer_dec exec_dup string_flush exec_dup string_butlast integer_dec string_substring 100 in2 integer_mult in1 100 integer_mult exec_empty integer_max)
Errors: [50 13 12 14 90 10 21 25 12 10 20 12 23 33 32 77 56 11 59 54 34 37 12 44 32 28 19]
Total: 840
Mean: 31.11111
Genome size: 49
Size: 57
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 6.9511149601436E10
Median total errors in population: 69003
Error averages by case: (2.68747462115E9 3.104759200114E9 3.61131535839E9 3.717464248006E9 3.460435496352E9 2.433084773618E9 2.250753945882E9 2.250753856594E9 2.004446710286E9 2.00202987906E9 2.411806808014E9 2.658451557462E9 2.47781382805E9 2.072203808988E9 2.06584700511E9 2.914850607588E9 2.352177234276E9 2.002703472198E9 2.95093419971E9 2.31580767024E9 2.07895972636E9 2.101721767924E9 2.687475315834E9 2.170953801088E9 3.18753062167E9 3.460436252742E9 2.07895783473E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.66
Average program size in population (points): 45.24
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 111531485
--- Timings ---
Current time: 1481338015185 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_lt integer_min boolean_or boolean_not integer_inc string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_lt integer_min boolean_or boolean_not integer_inc string_parse_to_chars exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (17 12 42 14 137 17 8 15 48 156 12 42 15 137 137 137 137 136 11 137 137 137 42 137 17 13 13)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (17 12 42 14 137 17 8 15 48 156 12 42 15 137 137 137 137 136 11 137 137 137 42 137 17 13 13)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_replace} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_rest} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min string_replace string_yank boolean_not integer_inc exec_yank string_reverse integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_rest) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min string_replace string_yank boolean_not integer_inc string_reverse integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (integer_gt string_butlast) string_rest) string_flush exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 4.6453831707302E10
Median total errors in population: 69003
Error averages by case: (2.058722173234E9 3.308925407864E9 4.82707700965E9 5.145245524018E9 4.375443318098E9 1.29636499014E9 7.50298856366E8 7.50314726958E8 1.320936587E7 6017286.436 1.232673832596E9 1.971549785792E9 1.430421882922E9 2.15826864146E8 1.96840540826E8 2.740355117644E9 1.054291367276E9 8074553.544 2.84824306542E9 9.45382639536E8 2.36140423896E8 3.04280633274E8 2.058510587798E9 5.11558329712E8 3.55710633545E9 4.374984407854E9 2.35972680982E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.184
Average program size in population (points): 45.796
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 46500
Number of point (instruction) evaluations so far: 113163846
--- Timings ---
Current time: 1481338024621 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction string_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 string_replacefirst in1 100 string_empty integer_mult boolean_dup boolean_invert_first_then_and string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_min string_yank boolean_not integer_dec integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 string_replacefirst in1 100 string_empty integer_mult boolean_dup boolean_invert_first_then_and string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 49
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction string_replacefirst} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 string_replacefirst in1 100 string_empty integer_mult boolean_dup boolean_invert_first_then_and string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_not integer_inc exec_yank integer_dec integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 in1 100 string_empty integer_mult boolean_dup boolean_invert_first_then_and string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 11 40 12 128 16 15 13 47 151 9 40 11 128 128 128 128 128 13 128 128 128 40 128 11 15 16)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (11 11 40 12 128 16 15 13 47 151 9 40 11 128 128 128 128 128 13 128 128 128 40 128 11 15 16)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min boolean_not exec_yank integer_dec integer_max exec_dup (exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) integer_pop exec_dup (string_yank boolean_dup_items boolean_shove exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.73687416111792E11
Median total errors in population: 69003
Error averages by case: (7.372198414036E9 8.205744999162E9 9.217778468222E9 9.42986552549E9 8.916326093552E9 6.864147257332E9 6.500102506676E9 6.500102382988E9 2.10652589283E9 2.02424328151E9 6.821658137734E9 7.314229992878E9 6.95346868486E9 4.51315308037E9 4.468270355388E9 7.826372200826E9 6.70259196602E9 2.041712325708E9 7.898453817436E9 6.629975681336E9 4.713395342312E9 5.14172607995E9 7.372199592684E9 6.340817029324E9 8.371101767496E9 8.916327890684E9 4.524927344988E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.968
Average program size in population (points): 45.55
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.12
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 114776621
--- Timings ---
Current time: 1481338034030 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction string_dup} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_or integer_dec integer_min string_dup string_yankdup integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_flush integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (boolean_or integer_dec integer_min string_dup string_yankdup integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_flush integer_mult boolean_dup in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction string_dup} {:close 0, :instruction string_yankdup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_or integer_dec integer_min string_dup string_yankdup integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_flush integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (boolean_or integer_dec integer_min string_dup integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_flush integer_mult boolean_dup in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 15 40 16 126 21 15 14 44 154 11 40 15 126 126 126 126 126 15 126 126 126 40 126 16 8 16)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (13 15 40 16 126 21 15 14 44 154 11 40 15 126 126 126 126 126 15 126 126 126 40 126 16 8 16)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_rest} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_rest) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank string_butlast) string_rest) exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.3915070442804E11
Median total errors in population: 69003
Error averages by case: (5.380804633352E9 6.215330405266E9 7.234309309666E9 7.448436605014E9 6.943678065884E9 4.865926709896E9 4.501939002058E9 4.502140923038E9 4.008848196724E9 4.00401185367E9 4.824704320182E9 5.318798990098E9 4.95731875869E9 4.144883908532E9 4.13242421347E9 5.84400109268E9 4.708444310588E9 4.005547229214E9 5.911846286938E9 4.635782963732E9 4.159295568496E9 4.205187999718E9 5.37704397782E9 4.344471232088E9 6.384452190532E9 6.93320692474E9 4.157868755954E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.352
Average program size in population (points): 45.958
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.112
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 47500
Number of point (instruction) evaluations so far: 116422087
--- Timings ---
Current time: 1481338043376 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (boolean_dup integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min boolean_not integer_inc boolean_or integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (boolean_dup integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (boolean_dup integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or integer_inc integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (boolean_dup integer_gt string_swap)) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 11 43 15 135 21 17 14 47 162 12 43 13 135 135 135 135 135 16 135 135 135 43 135 11 6 12)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (13 11 43 15 135 21 17 14 47 162 12 43 13 135 135 135 135 135 16 135 135 135 43 135 11 6 12)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min string_yank boolean_not exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_butlast)) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.8707110530875E11
Median total errors in population: 69003
Error averages by case: (7.375896867068E9 8.213471483536E9 9.232060634416E9 9.445755508698E9 8.928793954048E9 6.86585846132E9 6.500869667812E9 6.500877617788E9 4.01030209722E9 4.004191079114E9 6.82327461743E9 7.317565098604E9 6.9555120273E9 6.143972449382E9 6.131297196972E9 7.832330430966E9 6.703981393068E9 4.005761958416E9 7.904657068968E9 6.631184785768E9 6.157512787064E9 6.202987839482E9 7.375773838826E9 6.341369671332E9 8.37985648148E9 8.928563128724E9 6.157427163948E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.222
Average program size in population (points): 45.804
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 118051041
--- Timings ---
Current time: 1481338052763 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 9 45 12 145 21 4 8 56 174 12 45 8 145 145 145 145 145 14 145 145 145 45 145 13 10 16)
Population mean number of elite cases: 3.90
Count of perfect (error zero) individuals by case: (9 9 45 12 145 21 4 8 56 174 12 45 8 145 145 145 145 145 14 145 145 145 45 145 13 10 16)
Population mean number of perfect (error zero) cases: 3.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_rest} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_rest) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_butlast)) integer_pop exec_dup (string_yank boolean_dup_items boolean_shove exec_dup (integer_gt string_substring 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.9227613956426E11
Median total errors in population: 69003
Error averages by case: (8.686444895758E9 9.103296017748E9 9.609431772932E9 9.715502457276E9 9.458802367074E9 7.365418824062E9 6.906463516368E9 7.03146544224E9 2.007238069026E9 2.002449742682E9 8.098275161042E9 8.657414369724E9 8.476984865152E9 4.552398827458E9 4.52519416821E9 8.913663625754E9 8.351532140416E9 2.004057196376E9 8.949666852802E9 8.31521259756E9 4.88202150048E9 5.466408951554E9 8.686407866516E9 7.3605946587E9 9.186022341798E9 9.458698360106E9 4.505072975446E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.53
Average program size in population (points): 45.12
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 48500
Number of point (instruction) evaluations so far: 119650266
--- Timings ---
Current time: 1481338062049 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_yankdup integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (string_yankdup integer_min integer_min string_yank boolean_not exec_yank integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_yankdup integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (string_yankdup integer_min integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 12 57 21 127 14 7 9 63 144 10 57 7 127 127 127 127 127 14 127 127 127 57 127 11 13 21)
Population mean number of elite cases: 3.60
Count of perfect (error zero) individuals by case: (12 12 57 21 127 14 7 9 63 144 10 57 7 127 127 127 127 127 14 127 127 127 57 127 11 13 21)
Population mean number of perfect (error zero) cases: 3.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_rest} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_rest) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min boolean_not integer_inc exec_yank exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_butlast) string_rest) integer_pop exec_dup (string_yank boolean_dup_items boolean_shove exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 2.3790896391982E10
Median total errors in population: 69003
Error averages by case: (1.180408784944E9 1.286161738094E9 1.831680955732E9 1.984470033168E9 2.962038681508E9 5.06216178002E8 3.56128147994E8 3.76140142634E8 8491974.058 4025474.628 5.52103863312E8 7.75274420596E8 6.56063131574E8 1.65887845874E8 1.8263472005E8 2.093882621186E9 8.04708789716E8 2.3073896506E7 1.674091336994E9 7.83178864156E8 2.64033413596E8 3.29131782178E8 8.078488223E8 4.88765216272E8 1.646691334748E9 1.924891028564E9 1.22873193598E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.446
Average program size in population (points): 45.988
Average percent parens in population: 0.122
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.11
Error (vector) diversity:			 0.11
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 121285407
--- Timings ---
Current time: 1481338071306 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min boolean_or boolean_not exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 10 35 14 136 17 13 17 41 159 12 35 13 136 136 136 136 136 14 136 136 136 35 136 14 15 7)
Population mean number of elite cases: 3.65
Count of perfect (error zero) individuals by case: (16 10 35 14 136 17 13 17 41 159 12 35 13 136 136 136 136 136 14 136 136 136 35 136 14 15 7)
Population mean number of perfect (error zero) cases: 3.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.89683999366282E11
Median total errors in population: 69003
Error averages by case: (7.37614087653E9 8.213783117918E9 7.623736400188E9 9.446132007508E9 8.929144065962E9 6.434060000286E9 6.501006619702E9 6.501014487006E9 6.004425856044E9 6.002019221158E9 6.823458487748E9 6.660803162908E9 6.955712195062E9 6.144034880252E9 6.131355831786E9 7.832611989996E9 6.704148017658E9 6.00538273193E9 7.904945401866E9 6.631340784554E9 6.157578369514E9 6.203064964876E9 6.690035763914E9 6.341476797434E9 8.38017813223E9 8.928915573366E9 6.157493628886E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.758
Average program size in population (points): 45.258
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.124
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 49500
Number of point (instruction) evaluations so far: 122914003
--- Timings ---
Current time: 1481338080627 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt exec_do*while (integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Lexicase best partial simplification: (integer_min integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt exec_do*while integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt exec_do*while (integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Zero cases best partial simplification: (integer_min integer_min boolean_or integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt exec_do*while (integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult exec_empty)))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 11 48 8 148 16 14 10 51 171 14 48 12 148 148 148 148 147 17 148 148 148 48 148 14 13 9)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (12 11 48 8 148 16 14 10 51 171 14 48 12 148 148 148 148 147 17 148 148 148 48 148 14 13 9)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup (string_yank integer_gt string_butlast)) exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 8.4971271393566E10
Median total errors in population: 69003
Error averages by case: (3.37256439924E9 4.20617183073E9 5.218321775852E9 5.430435704676E9 4.91697961556E9 2.86437730921E9 2.500275534558E9 2.500279401258E9 2.008811366354E9 2.004013241178E9 2.82189263493E9 3.314534251676E9 2.953729877146E9 2.14388923994E9 2.13121558477E9 3.8268822751E9 2.70286268554E9 2.005359583974E9 3.898912871094E9 2.6302389314E9 2.157391779736E9 2.202816122608E9 3.37251243185E9 2.34100721348E9 4.371580914976E9 4.916866332444E9 2.157348484286E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.098
Average program size in population (points): 45.732
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 124567603
--- Timings ---
Current time: 1481338089870 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt exec_do*while (integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt exec_do*while integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_do*while} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt exec_do*while (integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Zero cases best partial simplification: (integer_min boolean_or integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt exec_do*while (integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty)))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 10 47 15 155 10 11 12 52 175 8 47 15 155 155 155 155 155 11 155 155 155 47 155 17 13 10)
Population mean number of elite cases: 4.13
Count of perfect (error zero) individuals by case: (14 10 47 15 155 10 11 12 52 175 8 47 15 155 155 155 155 155 11 155 155 155 47 155 17 13 10)
Population mean number of perfect (error zero) cases: 4.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_not integer_pop exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove boolean_or exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty))))
Partial simplification: (in1 exec_yank integer_dec integer_max (100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 42
Size: 48
Percent parens: 0.125
--- Population Statistics ---
Average total errors in population: 7.741090496757E10
Median total errors in population: 69003
Error averages by case: (3.430586538628E9 5.514379816722E9 8.044464054178E9 8.574686955148E9 7.29111426093E9 2.160375795948E9 1.250275453068E9 1.250280231796E9 2.1991141898E7 1.0013055128E7 2.054167133138E9 3.28558738957E9 2.383699650756E9 3.59512940302E8 3.27827905498E8 4.566194047198E9 1.756588810498E9 1.3346939618E7 4.74626484316E9 1.575057866322E9 3.93228220802E8 5.0675062259E8 3.430511610684E9 8.52134877474E8 5.92781704774E9 7.290876721076E9 3.931710377E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.264
Average program size in population (points): 45.968
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 50500
Number of point (instruction) evaluations so far: 126206386
--- Timings ---
Current time: 1481338098136 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add (in2 in1 100 integer_mult exec_empty)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 17 51 14 119 15 11 16 59 136 12 51 14 119 119 119 119 119 11 119 119 119 51 119 7 17 11)
Population mean number of elite cases: 3.38
Count of perfect (error zero) individuals by case: (9 17 51 14 119 15 11 16 59 136 12 51 14 119 119 119 119 119 11 119 119 119 51 119 7 17 11)
Population mean number of perfect (error zero) cases: 3.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank boolean_not exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.69927364169934E11
Median total errors in population: 69003
Error averages by case: (6.744395818568E9 8.411487460696E9 1.043555409575E10 1.0859728221638E10 9.83265189408E9 5.728292433912E9 5.00020353821E9 5.000203424874E9 4.017591300208E9 4.008009650462E9 5.643314540932E9 6.628457742662E9 5.906935680384E9 4.287585909558E9 4.262229468386E9 7.652742916598E9 5.405182601792E9 4.010663141432E9 7.796906723506E9 5.259949472088E9 4.314529182408E9 4.405338303222E9 6.744396917466E9 4.68163143242E9 8.742201571476E9 9.832653532148E9 4.314527195058E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.844
Average program size in population (points): 45.508
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.13
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 127808484
--- Timings ---
Current time: 1481338107076 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_min integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_flush integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_min integer_inc exec_yank exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_min integer_pop exec_dup (integer_dec exec_dup (integer_gt string_flush integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_min integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_flush integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_min integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_flush integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 10 49 16 124 13 11 13 51 144 14 49 17 124 124 124 124 124 12 124 124 124 49 124 8 8 14)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (12 10 49 16 124 13 11 13 51 144 14 49 17 124 124 124 124 124 12 124 124 124 49 124 8 8 14)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (boolean_yankdup 101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 1.77508183126872E11
Median total errors in population: 69003
Error averages by case: (6.68734623037E9 7.104509284952E9 7.610989186124E9 7.71712723232E9 7.4602734364E9 6.432951081482E9 6.250673408464E9 6.25067729034E9 6.004442486266E9 6.002029434842E9 6.411689401932E9 6.65827574318E9 6.477686714404E9 6.072187481914E9 6.065841412032E9 6.914762755586E9 6.352130369888E9 6.002716875732E9 6.950780115488E9 6.315775408864E9 6.078966694384E9 6.101727108034E9 6.687294156682E9 6.170946909408E9 7.187299550582E9 7.460159950014E9 6.078923407188E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.174
Average program size in population (points): 45.766
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 51500
Number of point (instruction) evaluations so far: 129432804
--- Timings ---
Current time: 1481338115227 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_dec integer_dec exec_dup (exec_yank integer_add (in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (21 17 31 11 136 19 11 7 39 162 9 31 12 136 136 136 136 136 13 136 136 136 31 136 15 13 16)
Population mean number of elite cases: 3.64
Count of perfect (error zero) individuals by case: (21 17 31 11 136 19 11 7 39 162 9 31 12 136 136 136 136 136 13 136 136 136 31 136 15 13 16)
Population mean number of perfect (error zero) cases: 3.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (string_yank in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 6.9497727762888E10
Median total errors in population: 69003
Error averages by case: (2.68679040381E9 3.103746960742E9 3.609956429376E9 3.716037563066E9 3.459174005534E9 2.432635307596E9 2.250502551392E9 2.250502421216E9 2.004615662476E9 2.002213287948E9 2.411378660586E9 2.657792918496E9 2.477320241692E9 2.072206675028E9 2.06586162377E9 2.91398039918E9 2.351810784362E9 2.002881510828E9 2.95003650956E9 2.315480873846E9 2.078950536686E9 2.10167411846E9 2.686791638116E9 2.170803806066E9 3.186458261126E9 3.459175908566E9 2.078948703364E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.934
Average program size in population (points): 45.58
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 131032474
--- Timings ---
Current time: 1481338122939 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_mod exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_mod integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_mod exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_mod exec_yank integer_dec integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 10 34 6 149 13 9 13 41 175 16 34 11 149 149 149 149 149 11 149 149 149 34 149 8 9 10)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (15 10 34 6 149 13 9 13 41 175 16 34 11 149 149 149 149 149 11 149 149 149 34 149 8 9 10)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 1.62008347250756E11
Median total errors in population: 69003
Error averages by case: (6.00078718332E9 6.000981755154E9 6.001258833304E9 6.001320616168E9 6.001435598464E9 5.996524339222E9 6.000373892592E9 6.000377761296E9 6.000025872404E9 5.996017700426E9 6.00051867086E9 6.0006938626E9 6.000577106456E9 6.000173196092E9 6.000169381438E9 6.001068621646E9 6.00053211346E9 6.000025679968E9 6.000998822692E9 6.00050471104E9 6.000202498736E9 6.000240824906E9 6.000714061974E9 6.000338016128E9 6.001083085738E9 6.001230327234E9 6.000172717438E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.032
Average program size in population (points): 45.666
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 52500
Number of point (instruction) evaluations so far: 132656915
--- Timings ---
Current time: 1481338131130 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_or boolean_not string_take exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min boolean_or boolean_not string_take exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_or boolean_not string_take exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or boolean_not exec_yank string_parse_to_chars exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult integer_mult in1 100 string_empty integer_mult boolean_dup string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 15 43 14 125 17 13 9 56 144 18 43 18 125 125 125 125 124 10 125 125 125 43 125 13 9 12)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (16 15 43 14 125 17 13 9 56 144 18 43 18 125 125 125 125 124 10 125 125 125 43 125 13 9 12)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 1.38964524945412E11
Median total errors in population: 69003
Error averages by case: (5.37224731496E9 6.205762262194E9 7.217798972448E9 7.429890542268E9 6.916475065436E9 4.86415428443E9 4.500112903402E9 4.500114788546E9 4.008796500728E9 4.00400548301E9 4.821671929528E9 5.314241227584E9 4.953486232734E9 4.14380290387E9 4.131127422464E9 5.826489561158E9 4.7026370996E9 4.005336210266E9 5.89852550553E9 4.630022326148E9 4.157284697868E9 4.202693470326E9 5.37221115842E9 4.340848790792E9 6.37114674582E9 6.91637304406E9 4.157268501822E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.564
Average program size in population (points): 46.286
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 134262552
--- Timings ---
Current time: 1481338139209 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (8 10 44 11 127 13 20 13 49 145 12 44 13 127 127 127 127 127 17 127 127 127 44 127 11 11 15)
Population mean number of elite cases: 3.50
Count of perfect (error zero) individuals by case: (8 10 44 11 127 13 20 13 49 145 12 44 13 127 127 127 127 127 17 127 127 127 44 127 11 11 15)
Population mean number of perfect (error zero) cases: 3.50
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max exec_dup (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 2.7070284224864E11
Median total errors in population: 69003
Error averages by case: (1.0293979120458E10 1.1916957613498E10 1.4121056850662E10 1.4615418944666E10 1.3438173962488E10 9.389706236518E9 8.781554805574E9 8.78156467507E9 8.0132164586E9 8.006017413938E9 9.317046961562E9 1.0187414274854E10 9.544030276182E9 8.218381772292E9 8.198945063886E9 1.1157060612688E10 9.115900224184E9 8.008045442822E9 1.1298577605814E10 8.994887587456E9 8.239160098952E9 8.309335527404E9 1.0293836699166E10 8.525989547284E9 1.2259681539018E10 1.3437841708466E10 8.239061225138E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.706
Average program size in population (points): 46.412
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.118
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 53500
Number of point (instruction) evaluations so far: 135900862
--- Timings ---
Current time: 1481338147528 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction string_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (exec_noop integer_min string_yank boolean_not integer_min integer_min boolean_or string_yank integer_min integer_min boolean_or boolean_not string_swap exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_dup_times integer_mult exec_dup (boolean_eq integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring exec_noop boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_dec exec_dup (exec_yank integer_add exec_dup integer_gt string_flush (exec_dup (integer_gt exec_noop in2 integer_mult in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 53
Percent parens: 0.113
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction string_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (exec_noop integer_min string_yank boolean_not integer_min integer_min boolean_or string_yank integer_min integer_min boolean_or boolean_not string_swap exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_dup_times integer_mult exec_dup (boolean_eq integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring exec_noop boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (exec_noop integer_min string_yank boolean_not integer_min integer_min boolean_or string_yank integer_min integer_min boolean_or boolean_not string_swap exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_dup_times integer_mult exec_dup string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring exec_noop boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 53
Percent parens: 0.113
--- Lexicase Population Statistics ---
Count of elite individuals by case: (17 19 42 10 121 22 12 7 49 148 16 42 16 121 121 121 121 121 11 121 121 121 42 121 11 14 11)
Population mean number of elite cases: 3.40
Count of perfect (error zero) individuals by case: (17 19 42 10 121 22 12 7 49 148 16 42 16 121 121 121 121 121 11 121 121 121 42 121 11 14 11)
Population mean number of perfect (error zero) cases: 3.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (string_emptystring boolean_yankdup 101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 1.93511301391382E11
Median total errors in population: 69003
Error averages by case: (7.392565589134E9 8.226173053778E9 9.23832318643E9 9.450437112222E9 8.936981210968E9 6.88437823233E9 6.520276350122E9 6.52028023201E9 6.028811671294E9 6.024015488788E9 6.841893571238E9 7.334535327886E9 6.973730866274E9 6.16388986791E9 6.151216219516E9 7.846883680198E9 6.722863720264E9 6.025361889692E9 7.918914201162E9 6.650239947736E9 6.177392477896E9 6.222816873862E9 7.392513522038E9 6.361008076608E9 8.391582241066E9 8.936867725606E9 6.177349055354E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.014
Average program size in population (points): 45.662
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.128
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 137529927
--- Timings ---
Current time: 1481338156226 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_eq exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_swap exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_eq exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (boolean_swap exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_eq exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_swap exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_eq exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_swap exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 13 52 7 133 9 12 16 54 146 15 52 17 133 133 133 133 133 11 133 133 133 52 133 12 13 8)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (15 13 52 7 133 9 12 16 54 146 15 52 17 133 133 133 133 133 11 133 133 133 52 133 12 13 8)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (integer_gt 101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 2.8170297898514E11
Median total errors in population: 69003
Error averages by case: (1.0686884124212E10 1.110395013519E10 1.1610275104352E10 1.1716378778482E10 1.1459459711516E10 1.0432651041668E10 1.025045227947E10 1.0250452147778E10 8.189204718314E9 8.021639087588E9 1.0411387250388E10 1.0657878312464E10 1.0477350610698E10 1.007207173097E10 1.0065722773708E10 1.0914135841162E10 1.0351798654084E10 1.0002688502482E10 1.095020126733E10 1.03154555399E10 1.007881959782E10 1.010155595921E10 1.0686885372172E10 1.0170719669044E10 1.1186681348644E10 1.1459461637552E10 1.0078817788942E10)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.306
Average program size in population (points): 45.964
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 54500
Number of point (instruction) evaluations so far: 139170265
--- Timings ---
Current time: 1481338165018 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 12 46 8 140 20 12 12 50 169 10 46 9 140 140 140 140 139 10 140 140 140 46 140 15 10 16)
Population mean number of elite cases: 3.80
Count of perfect (error zero) individuals by case: (11 12 46 8 140 20 12 12 50 169 10 46 9 140 140 140 140 139 10 140 140 140 46 140 15 10 16)
Population mean number of perfect (error zero) cases: 3.80
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 6.9486743201502E10
Median total errors in population: 69003
Error averages by case: (2.686538247106E9 3.10332411816E9 3.60945887218E9 3.715533876978E9 3.458987798436E9 2.432317654396E9 2.250246730376E9 2.250254662696E9 2.004415619196E9 1.998015705164E9 2.411089206312E9 2.657438337508E9 2.477026311804E9 2.072021455604E9 2.06569525112E9 2.91385377062E9 2.351649979544E9 2.002714160706E9 2.949781835196E9 2.315340371148E9 2.078815024468E9 2.1015443563E9 2.686432019234E9 2.170673325536E9 3.186087712522E9 3.458757077334E9 2.078729721858E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.31
Average program size in population (points): 46.066
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.134
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 140801170
--- Timings ---
Current time: 1481338173200 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not string_take boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add integer_gt (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not string_take boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min string_yank boolean_not string_take boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 18 38 8 120 15 14 12 46 141 15 38 12 120 120 120 120 120 11 120 120 120 38 120 9 12 13)
Population mean number of elite cases: 3.31
Count of perfect (error zero) individuals by case: (14 18 38 8 120 15 14 12 46 141 15 38 12 120 120 120 120 120 11 120 120 120 38 120 9 12 13)
Population mean number of perfect (error zero) cases: 3.31
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 1.25516810197E11
Median total errors in population: 69003
Error averages by case: (5.37254072777E9 6.09112134512E9 7.218447290338E9 7.430570176694E9 6.916943624692E9 3.303142950764E9 3.624269080228E9 4.093364918076E9 2.015614579794E9 2.006209232804E9 4.491921910294E9 4.273567435634E9 4.953729154672E9 3.512754946188E9 4.13117950172E9 5.826798485612E9 4.702800052724E9 2.21022099718E9 5.898893183152E9 4.630167868948E9 4.157338346924E9 4.202756749904E9 4.373647012544E9 4.34094086206E9 6.371624967654E9 6.916945370758E9 2.449299424752E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.924
Average program size in population (points): 45.53
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 55500
Number of point (instruction) evaluations so far: 142423667
--- Timings ---
Current time: 1481338180796 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or boolean_not integer_inc exec_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 15 45 8 128 15 10 14 49 147 12 45 8 128 128 128 128 128 15 128 128 128 45 128 11 13 16)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (13 15 45 8 128 15 10 14 49 147 12 45 8 128 128 128 128 128 15 128 128 128 45 128 11 13 16)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 1.71672878458352E11
Median total errors in population: 69003
Error averages by case: (6.689759684624E9 7.110597759524E9 7.623067355876E9 7.730656805936E9 7.470256687554E9 6.43388720861E9 6.250878839636E9 6.250878752516E9 4.027586314472E9 4.006015285052E9 6.412512193192E9 6.660539131076E9 6.478834691364E9 6.072077605472E9 6.065722547058E9 6.918912541032E9 6.352635011274E9 4.062204279682E9 6.955313832688E9 6.316132793778E9 6.078832963458E9 6.10160002764E9 6.689760325916E9 6.170905701002E9 7.194221899188E9 7.470257362992E9 6.07883085774E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.032
Average program size in population (points): 45.584
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 144043630
--- Timings ---
Current time: 1481338188989 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_mod exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_mod exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_mod exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_mod exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 16 39 9 145 26 12 14 47 178 13 39 10 145 145 145 145 145 12 145 145 145 39 145 9 5 8)
Population mean number of elite cases: 3.88
Count of perfect (error zero) individuals by case: (16 16 39 9 145 26 12 14 47 178 13 39 10 145 145 145 145 145 12 145 145 145 39 145 9 5 8)
Population mean number of perfect (error zero) cases: 3.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 4.8062430268328E10
Median total errors in population: 69003
Error averages by case: (2.000842376702E9 2.000913311982E9 2.001149222974E9 2.001179695854E9 2.001469706894E9 2.000566216672E9 2.000478190646E9 2.000487155894E9 1.1926913916E7 2235439.756 2.00058154678E9 2.000712391438E9 2.000629963422E9 2.00035938292E9 2.000371335818E9 2.001171842284E9 2.000680227286E9 3.031229206E7 2.001030009114E9 2.000671078406E9 2.000423267342E9 2.000459034104E9 2.000727557488E9 2.000538441394E9 2.00103689261E9 2.001144245438E9 2.000332529134E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.596
Average program size in population (points): 46.326
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.144
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 56500
Number of point (instruction) evaluations so far: 145687285
--- Timings ---
Current time: 1481338197177 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 15 43 14 124 25 11 15 50 157 11 43 10 124 124 124 124 123 9 124 124 124 43 124 5 9 16)
Population mean number of elite cases: 3.46
Count of perfect (error zero) individuals by case: (14 15 43 14 124 25 11 15 50 157 11 43 10 124 124 124 124 123 9 124 124 124 43 124 5 9 16)
Population mean number of perfect (error zero) cases: 3.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 3.06064416774272E11
Median total errors in population: 69003
Error averages by case: (1.2548422415144E10 1.3483687002434E10 1.503456495287E10 1.5397830269398E10 1.5865046503818E10 9.627550484638E9 1.085523151807E10 1.0875227402402E10 5.184896842386E9 4.228427314748E9 1.137184137665E10 1.1025830500134E10 1.1607150779658E10 1.0309358594296E10 1.0313412769214E10 1.3913583485552E10 1.1505515527766E10 7.521904440162E9 1.3565742809174E10 1.1411552273922E10 1.0420849160762E10 1.0531251464288E10 1.117181803481E10 1.082873306171E10 1.4008463285856E10 1.482836338078E10 8.62816112363E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.506
Average program size in population (points): 46.224
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 147288349
--- Timings ---
Current time: 1481338205245 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_lt} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_lt integer_min boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (21 11 50 12 136 17 5 12 57 158 11 50 8 136 136 136 136 136 13 136 136 136 50 136 9 9 11)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (21 11 50 12 136 17 5 12 57 158 11 50 8 136 136 136 136 136 13 136 136 136 50 136 9 9 11)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 9.3224351886626E10
Median total errors in population: 69003
Error averages by case: (3.607941794352E9 4.814319371576E9 6.512456274718E9 6.900775126438E9 5.97986504879E9 2.957830366152E9 2.531665973972E9 2.531665846372E9 2.009012749614E9 2.004211553012E9 2.906383838406E9 3.530503469326E9 3.067453687828E9 2.146622994902E9 2.133506809282E9 4.243725863734E9 2.764620061534E9 2.005542651698E9 4.34937192816E9 2.679900117494E9 2.160605208454E9 2.208061256758E9 3.607943009368E9 2.355615334966E9 5.074281317412E9 5.979866912544E9 2.160603319764E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.15
Average program size in population (points): 45.786
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 57500
Number of point (instruction) evaluations so far: 148911196
--- Timings ---
Current time: 1481338213425 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 53
Percent parens: 0.113
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 53
Percent parens: 0.113
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 14 51 13 128 15 17 15 57 155 22 51 12 128 128 128 128 128 8 128 128 128 51 128 11 11 14)
Population mean number of elite cases: 3.62
Count of perfect (error zero) individuals by case: (15 14 51 13 128 15 17 15 57 155 22 51 12 128 128 128 128 128 8 128 128 128 51 128 11 11 14)
Population mean number of perfect (error zero) cases: 3.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 1.3365240965803E11
Median total errors in population: 69003
Error averages by case: (5.143492741576E9 6.289323627956E9 8.14115765067E9 8.593338258626E9 7.536980310582E9 4.61261420042E9 4.31019482749E9 4.310202829438E9 2.028564739418E9 2.006016197624E9 4.573992201134E9 5.076413366574E9 4.696776871956E9 4.076864486984E9 4.069713495144E9 5.72560337952E9 4.470527777394E9 2.036378773992E9 5.82718163805E9 4.410777457926E9 4.084620566206E9 4.111237883632E9 5.143386163512E9 4.198349072662E9 6.557418063004E9 7.536749151884E9 4.084533924656E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.614
Average program size in population (points): 46.356
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.126
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 150527879
--- Timings ---
Current time: 1481338221628 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_shove integer_min integer_min string_yank boolean_not string_take boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_shove integer_min boolean_not string_take boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec string_yank integer_dec exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 53
Percent parens: 0.113
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_shove integer_min integer_min string_yank boolean_not string_take boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not exec_yank exec_dup (string_yank (exec_yank integer_add string_parse_to_chars) string_flush exec_dup (integer_dec string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 53
Percent parens: 0.113
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 11 39 12 125 17 9 8 45 150 12 39 15 125 125 125 125 125 14 125 125 125 39 125 18 11 14)
Population mean number of elite cases: 3.43
Count of perfect (error zero) individuals by case: (11 11 39 12 125 17 9 8 45 150 12 39 15 125 125 125 125 125 14 125 125 125 39 125 18 11 14)
Population mean number of perfect (error zero) cases: 3.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup (string_yank exec_do*times (exec_yank exec_noop integer_min string_yank) boolean_not integer_inc string_stackdepth integer_min integer_min string_yank) boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring boolean_yankdup string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (in1 exec_yank integer_dec integer_max (100 in2 integer_mult in1 100 integer_mult))
Errors: [50 13 12 14 91 10 21 25 12 10 20 12 23 34 33 78 57 12 59 55 35 38 12 45 32 28 19]
Total: 850
Mean: 31.481482
Genome size: 48
Size: 54
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 3.0971056725634E10
Median total errors in population: 69003
Error averages by case: (1.372546797224E9 2.206059387628E9 3.218171481622E9 3.43028228666E9 2.916989879174E9 8.64319609058E8 5.00256386996E8 5.00266427948E8 8827752.59 4029841.076 8.21852877056E8 1.314457345126E9 9.5368792646E8 1.43934195954E8 1.31284482042E8 1.826930910666E9 7.02910247826E8 5510873.57 1.898891192092E9 6.30302866382E8 1.57493781462E8 2.02917314874E8 1.372432867634E9 3.41093654106E8 2.371496225956E9 2.916756347248E9 1.57353767204E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.776
Average program size in population (points): 46.644
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 58500
Number of point (instruction) evaluations so far: 152144284
--- Timings ---
Current time: 1481338229742 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction string_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min integer_min integer_min integer_min string_yank integer_min integer_min string_yank integer_min integer_min boolean_or string_dup integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_lt boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add (in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 55
Percent parens: 0.109
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction string_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_lt} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min integer_min integer_min integer_min string_yank integer_min integer_min string_yank integer_min integer_min boolean_or string_dup integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_lt boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min integer_min integer_min integer_min integer_min string_yank integer_min integer_min string_dup exec_yank integer_dec exec_dup (exec_do*times (exec_yank integer_add integer_mult exec_dup (integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_lt boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 55
Percent parens: 0.109
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 12 39 13 132 21 15 7 47 163 14 39 9 132 132 132 132 132 13 132 132 132 39 132 13 8 13)
Population mean number of elite cases: 3.61
Count of perfect (error zero) individuals by case: (18 12 39 13 132 21 15 7 47 163 14 39 9 132 132 132 132 132 13 132 132 132 39 132 13 8 13)
Population mean number of perfect (error zero) cases: 3.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction string_emptystring} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 101} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction string_contains} {:close 0, :instruction string_replace} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank boolean_not string_yank in1 integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (string_emptystring integer_dec boolean_yankdup integer_gt string_substring string_substring integer_mult 101 in2 integer_mult string_contains string_replace in1 100 string_empty integer_mult boolean_dup string_replacefirst)))
Partial simplification: (in1 exec_yank integer_dec integer_max (101 in2 integer_mult in1 100 integer_mult))
Errors: [20 69 81 81 91 50 29 25 1 0 39 57 39 34 33 78 57 12 19 55 35 38 58 45 52 62 15]
Total: 1175
Mean: 43.51852
Genome size: 31
Size: 34
Percent parens: 0.088
--- Population Statistics ---
Average total errors in population: 5.401302951378E10
Median total errors in population: 69003
Error averages by case: (2.000612664836E9 2.000790141936E9 2.001043498726E9 2.001098764098E9 2.001112426218E9 2.000402662216E9 2.000287409164E9 2.000291322996E9 2.000022002412E9 2.000013784802E9 2.00040041789E9 2.000543233426E9 2.000447082212E9 2.000142768082E9 2.000144870842E9 2.000821763102E9 2.000418445202E9 2.000036135642E9 2.000779514948E9 2.000400029082E9 2.0001778107E9 2.000207355984E9 2.00056011878E9 2.000278450874E9 2.000864777504E9 2.000997897596E9 2.00013416451E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.944
Average program size in population (points): 45.694
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 153736467
--- Timings ---
Current time: 1481338237141 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_if (integer_min string_yank) (boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (boolean_xor integer_gt string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Lexicase best partial simplification: (integer_min exec_if (integer_min string_yank) (boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (boolean_xor integer_gt string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty)))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 47
Percent parens: 0.170
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_if (integer_min string_yank) (boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (boolean_xor integer_gt string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Zero cases best partial simplification: (integer_min exec_if integer_min string_yank (boolean_not integer_inc exec_yank exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (boolean_xor integer_gt string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty)))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 15 48 12 127 12 11 16 54 140 7 48 9 127 127 127 127 127 12 127 127 127 48 127 14 14 11)
Population mean number of elite cases: 3.51
Count of perfect (error zero) individuals by case: (14 15 48 12 127 12 11 16 54 140 7 48 9 127 127 127 127 127 12 127 127 127 48 127 14 14 11)
Population mean number of perfect (error zero) cases: 3.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (string_yank string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (string_yank string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.08009700205494E11
Median total errors in population: 69003
Error averages by case: (4.000465288954E9 4.000563620512E9 4.000719085272E9 4.000753505876E9 4.000817516378E9 4.00030351687E9 4.000223899714E9 4.00022781839E9 4.000018195734E9 4.00001143293E9 4.000305384998E9 4.00040129265E9 4.000339419314E9 4.00011796978E9 4.000121718824E9 4.000631491604E9 4.00033502345E9 4.000033598908E9 4.000582307098E9 4.000323741698E9 4.00015148717E9 4.000175639762E9 4.00041269413E9 4.000231494038E9 4.000622449262E9 4.00070292749E9 4.000107684688E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.296
Average program size in population (points): 46.264
Average percent parens in population: 0.132
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 59500
Number of point (instruction) evaluations so far: 155343327
--- Timings ---
Current time: 1481338246421 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_lte boolean_or boolean_not integer_inc integer_fromboolean integer_dec integer_max integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_inc exec_dup (exec_yank integer_add ((boolean_dup in2 in1 100 integer_mult boolean_dup))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_lte} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_lte boolean_or boolean_not integer_inc integer_fromboolean integer_dec integer_max integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or boolean_not integer_inc integer_fromboolean integer_max integer_inc integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 24 36 16 130 14 14 13 42 147 17 36 11 130 130 130 130 130 11 130 130 130 36 130 10 9 16)
Population mean number of elite cases: 3.53
Count of perfect (error zero) individuals by case: (13 24 36 16 130 14 14 13 42 147 17 36 11 130 130 130 130 130 11 130 130 130 36 130 10 9 16)
Population mean number of perfect (error zero) cases: 3.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank string_parse_to_chars integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min integer_min string_yank string_parse_to_chars integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.0927543298E7
Median total errors in population: 69003
Error averages by case: (448576.65 565542.086 702206.662 730532.812 659430.694 375347.396 317173.308 317049.8 210301.298 207461.188 368528.008 441477.526 388389.468 250111.49 248029.496 512641.226 349795.418 212243.63 521980.004 338850.31 255027.446 264646.334 449762.204 290700.19 587465.45 661246.06 253027.144)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.746
Average program size in population (points): 46.656
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.564
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.564
Total error diversity:				 0.134
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 156987429
--- Timings ---
Current time: 1481338255177 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt integer_yank) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt integer_yank) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 39
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction integer_yank} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt integer_yank) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt integer_yank) string_parse_to_chars) string_flush boolean_frominteger exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 12 38 16 137 15 14 17 48 163 14 38 14 137 137 137 137 137 15 137 137 137 38 137 21 5 11)
Population mean number of elite cases: 3.73
Count of perfect (error zero) individuals by case: (15 12 38 16 137 15 14 17 48 163 14 38 14 137 137 137 137 137 15 137 137 137 38 137 21 5 11)
Population mean number of perfect (error zero) cases: 3.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min string_yank string_parse_to_chars integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_yank integer_gt string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min string_yank string_parse_to_chars integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_not exec_dup (string_yank integer_gt string_butlast)) string_flush exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 3.0965845129616E10
Median total errors in population: 69003
Error averages by case: (1.37232070159E9 2.205786543708E9 3.21782519687E9 3.429921351158E9 2.916648282482E9 8.6416768843E8 5.00135085956E8 5.00141060088E8 8799665.53 4007474.466 8.21697153034E8 1.31425977023E9 9.53516640872E8 1.43832111284E8 1.3116486664E8 1.8266480725E9 7.02720580354E8 5354866.356 1.89862207736E9 6.30111601466E8 1.57340472714E8 2.02756505736E8 1.37223000527E9 3.40923054462E8 2.371204489898E9 2.916427852658E9 1.57281958504E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.468
Average program size in population (points): 46.158
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.108
Error (vector) diversity:			 0.108
--- Run Statistics ---
Number of program evaluations used so far: 60500
Number of point (instruction) evaluations so far: 158644204
--- Timings ---
Current time: 1481338264526 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not string_take boolean_or boolean_not integer_inc exec_yank integer_dec boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank string_take boolean_or boolean_not exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not string_take boolean_or boolean_not integer_inc exec_yank integer_dec boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank string_take boolean_or boolean_not exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 10 48 16 141 12 11 10 53 162 10 48 13 141 141 141 141 141 9 141 141 141 48 141 10 8 10)
Population mean number of elite cases: 3.81
Count of perfect (error zero) individuals by case: (15 10 48 16 141 12 11 10 53 162 10 48 13 141 141 141 141 141 9 141 141 141 48 141 10 8 10)
Population mean number of perfect (error zero) cases: 3.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.3544072902374E10
Median total errors in population: 69003
Error averages by case: (2.687002510292E9 3.103881360114E9 3.610173829596E9 3.71628422616E9 3.459918715096E9 2.43261361366E9 2.250459453504E9 2.250470229962E9 1.621779758E7 4065355.982 2.4113841655E9 2.657831882652E9 2.477355209552E9 2.072122371336E9 2.065795808108E9 2.914558844216E9 2.351977406228E9 3.2563439938E7 2.950380965026E9 2.315656454752E9 2.078940742872E9 2.101695198984E9 2.686837044612E9 2.1708853351E9 3.186710742616E9 3.459462156276E9 2.07882804266E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.242
Average program size in population (points): 46.058
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.138
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 160272430
--- Timings ---
Current time: 1481338274048 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_xor boolean_or boolean_not integer_mod integer_min boolean_xor boolean_or boolean_not boolean_invert_first_then_and exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) boolean_stackdepth integer_pop exec_dup (string_yank integer_yankdup exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add string_parse_to_chars boolean_stackdepth integer_pop (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_xor boolean_or boolean_not integer_mod integer_min boolean_xor boolean_or boolean_not boolean_invert_first_then_and exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) boolean_stackdepth integer_pop exec_dup (string_yank integer_yankdup exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_xor boolean_or boolean_not integer_mod integer_min boolean_xor boolean_not boolean_invert_first_then_and exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) boolean_stackdepth integer_pop exec_dup (string_yank integer_yankdup exec_dup (integer_gt string_substring integer_mult boolean_dup in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 10 42 12 150 19 13 11 52 176 10 42 14 150 150 150 150 150 10 150 150 150 42 150 10 9 12)
Population mean number of elite cases: 3.99
Count of perfect (error zero) individuals by case: (12 10 42 12 150 19 13 11 52 176 10 42 14 150 150 150 150 150 10 150 150 150 42 150 10 9 12)
Population mean number of perfect (error zero) cases: 3.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 7.4730113199118E10
Median total errors in population: 69003
Error averages by case: (2.93486850413E9 3.133349669602E9 3.648127634064E9 3.76622979875E9 4.84196417917E9 2.441010707614E9 2.272890818894E9 2.282102722078E9 2.004902474868E9 2.002213434762E9 2.440318741242E9 2.674196928384E9 2.519477282438E9 2.11237625924E9 2.132316576806E9 4.081499588024E9 2.67790723721E9 2.019805260974E9 3.379090919394E9 2.689532219746E9 2.226903673986E9 2.29033623708E9 2.703821687394E9 2.431387850466E9 3.338867862546E9 3.597459441522E9 2.087155488734E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.08
Average program size in population (points): 45.968
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
--- Run Statistics ---
Number of program evaluations used so far: 61500
Number of point (instruction) evaluations so far: 161888212
--- Timings ---
Current time: 1481338282714 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max integer_min boolean_or integer_inc integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 56
Percent parens: 0.107
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min integer_inc exec_yank integer_max integer_min boolean_not integer_inc exec_dup ((exec_yank integer_add integer_mult exec_dup (string_swap)) exec_dup (exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 56
Percent parens: 0.107
--- Lexicase Population Statistics ---
Count of elite individuals by case: (23 13 31 7 132 14 15 10 37 151 10 31 16 132 132 132 132 132 19 132 132 132 31 132 12 13 6)
Population mean number of elite cases: 3.52
Count of perfect (error zero) individuals by case: (23 13 31 7 132 14 15 10 37 151 10 31 16 132 132 132 132 132 19 132 132 132 31 132 12 13 6)
Population mean number of perfect (error zero) cases: 3.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.19335819300352E11
Median total errors in population: 69003
Error averages by case: (5.372593370698E9 5.103550059852E9 5.609760129924E9 5.715841442556E9 6.916978992126E9 4.432437240538E9 4.500304132122E9 4.50030404263E9 2.00549704648E9 2.00223342305E9 4.82193864346E9 4.6575952992E9 4.953778406798E9 2.513241542282E9 2.46835361702E9 5.826850530692E9 4.702845211418E9 2.005995698316E9 5.898944099706E9 4.63021126323E9 2.71348941247E9 3.141837444562E9 4.68659406917E9 4.340973639158E9 6.371669768554E9 6.916979709938E9 2.525021064402E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.382
Average program size in population (points): 46.156
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.138
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 163530864
--- Timings ---
Current time: 1481338292124 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_yank exec_dup (exec_yank integer_add exec_dup integer_gt (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_dup (string_rest (exec_yank integer_add string_replacefirst exec_dup string_yank integer_gt string_parse_to_chars) string_flush (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 10 34 14 132 13 13 10 40 151 13 34 15 132 132 132 132 132 20 132 132 132 34 132 11 15 10)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (20 10 34 14 132 13 13 10 40 151 13 34 15 132 132 132 132 132 20 132 132 132 34 132 11 15 10)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.10027104448572E11
Median total errors in population: 69003
Error averages by case: (4.686594291888E9 4.985460060216E9 5.60961036362E9 5.715676478388E9 5.458849968896E9 2.870366992424E9 3.373335478174E9 3.84222726922E9 2.011405243022E9 2.0044022375E9 4.079599393812E9 3.61500996462E9 4.477166341926E9 3.440419384324E9 4.065820557908E9 4.9137432413E9 4.351685271236E9 2.207707330168E9 4.94979305834E9 4.315364190488E9 4.078904268928E9 4.101619338964E9 3.686031910056E9 4.170726337868E9 5.186175922548E9 5.458851818816E9 2.370557733922E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.498
Average program size in population (points): 46.196
Average percent parens in population: 0.123
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 62500
Number of point (instruction) evaluations so far: 165188955
--- Timings ---
Current time: 1481338301206 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_empty boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_empty boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_empty boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_empty boolean_dup in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 8 36 11 131 22 10 17 44 161 11 36 15 131 131 131 131 131 7 131 131 131 36 131 15 5 17)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (15 8 36 11 131 22 10 17 44 161 11 36 15 131 131 131 131 131 7 131 131 131 36 131 15 5 17)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.1871033774E7
Median total errors in population: 69003
Error averages by case: (567265.196 701499.798 896064.834 938200.446 986291.976 377708.2 275952.998 279987.67 22081.596 13815.052 377441.962 499197.858 418975.362 141667.932 144422.078 756137.372 401599.16 37965.416 708753.706 386036.832 177495.872 206141.66 513429.336 273681.716 767757.024 869337.168 132125.554)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.18
Average program size in population (points): 45.91
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.11
Error (vector) diversity:			 0.11
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 166797686
--- Timings ---
Current time: 1481338310606 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_xor boolean_or boolean_not integer_mod integer_min boolean_xor boolean_or boolean_not boolean_invert_first_then_and exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) boolean_stackdepth integer_pop exec_dup (string_yank integer_yankdup exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min exec_dup (string_yank exec_yank integer_add string_swap boolean_stackdepth integer_pop exec_dup (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_xor boolean_or boolean_not integer_mod integer_min boolean_xor boolean_or boolean_not boolean_invert_first_then_and exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) boolean_stackdepth integer_pop exec_dup (string_yank integer_yankdup exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (exec_dup (exec_yank integer_add exec_dup string_swap boolean_stackdepth integer_pop (integer_gt in2 in1 100 integer_mult)))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 26 48 9 138 21 9 15 54 163 10 48 9 138 138 138 138 138 10 138 138 138 48 138 16 8 9)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (12 26 48 9 138 21 9 15 54 163 10 48 9 138 138 138 138 138 10 138 138 138 48 138 16 8 9)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.565724848781E10
Median total errors in population: 69003
Error averages by case: (6.93719691922E8 1.113610301278E9 1.626341668322E9 1.734239930296E9 1.484149636086E9 4.35182125882E8 2.5175037737E8 2.51804407406E8 4418667.118 2013620.488 4.13997568616E8 6.62543905778E8 4.8066194871E8 7.233475231E7 6.5990511356E7 9.27764658806E8 3.5497308347E8 2701260.14 9.61535348706E8 3.18333289662E8 7.9245241902E7 1.02173615286E8 6.91840829756E8 1.71974071562E8 1.19927711011E9 1.475633646906E9 7.9037218566E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.006
Average program size in population (points): 46.88
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 63500
Number of point (instruction) evaluations so far: 168450863
--- Timings ---
Current time: 1481338319134 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 11 40 11 128 15 10 14 47 149 10 40 11 128 128 128 128 128 12 128 128 128 40 128 11 10 17)
Population mean number of elite cases: 3.49
Count of perfect (error zero) individuals by case: (18 11 40 11 128 15 10 14 47 149 10 40 11 128 128 128 128 128 12 128 128 128 40 128 11 10 17)
Population mean number of perfect (error zero) cases: 3.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 3.09250849022924E11
Median total errors in population: 69003
Error averages by case: (1.2322895749114E10 1.351033413902E10 1.489585591039E10 1.5180894490154E10 1.4487887947426E10 1.1562618233242E10 1.0985151771384E10 1.0985151682792E10 6.054906797986E9 6.025624838496E9 1.1497040876974E10 1.223795807311E10 1.1699280672084E10 1.0355080953736E10 1.0329791904824E10 1.297671671252E10 1.131103834421E10 6.059293180662E9 1.3078870888656E10 1.1195737730026E10 1.0381553049282E10 1.046828386494E10 1.232289643633E10 1.0716439505982E10 1.3740105813942E10 1.4487888673382E10 1.038155078226E10)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.588
Average program size in population (points): 46.424
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.126
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 170055253
--- Timings ---
Current time: 1481338328541 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank boolean_or boolean_not boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_when (string_replacefirst)))))
Lexicase best partial simplification: (integer_inc boolean_not integer_dec integer_max exec_dup (string_yank exec_yank integer_add boolean_not (string_yank string_swap) string_parse_to_chars string_flush (string_yank integer_dec exec_dup (integer_gt string_parse_to_chars in2 integer_mult in1 100 string_empty integer_mult boolean_dup))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 51
Percent parens: 0.137
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank boolean_or boolean_not boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_when (string_replacefirst)))))
Zero cases best partial simplification: (integer_min exec_dup_items integer_inc boolean_or exec_yank integer_dec integer_max exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult exec_when (string_replacefirst)))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 51
Percent parens: 0.137
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 7 37 6 128 12 17 12 41 146 7 37 12 128 128 128 128 128 17 128 128 128 37 128 14 16 11)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (15 7 37 6 128 12 17 12 41 146 7 37 12 128 128 128 128 128 17 128 128 128 37 128 14 16 11)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.596265702277E10
Median total errors in population: 69003
Error averages by case: (3.196104669458E9 3.327862363338E9 3.703687342026E9 3.787138619766E9 4.943410180218E9 2.705964651242E9 2.507305784594E9 2.516506420786E9 3.437264609E7 1.9831559526E7 2.703516620346E9 2.937827445738E9 2.786797352386E9 6.21012905756E8 6.02462134562E8 4.31305231067E9 2.933855103122E9 4.1222133914E7 3.604491247738E9 2.93926225809E9 9.28490976042E8 1.393414681428E9 2.96520773475E9 2.636147536834E9 3.51408894529E9 3.699230090626E9 6.00393308434E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.638
Average program size in population (points): 46.396
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.604
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.604
Total error diversity:				 0.12
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 64500
Number of point (instruction) evaluations so far: 171677210
--- Timings ---
Current time: 1481338337792 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_xor boolean_or boolean_not integer_mod integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (boolean_or exec_dup (exec_yank integer_add string_replacefirst (in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 54
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_xor} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_xor boolean_or boolean_not integer_mod integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (boolean_or integer_mod integer_min integer_min string_replace boolean_not integer_inc string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (exec_do*times (exec_yank integer_add boolean_not exec_dup (integer_gt string_swap)) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 54
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (21 9 48 11 132 17 9 13 55 153 11 48 14 132 132 132 132 132 14 132 132 132 48 132 12 10 4)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (21 9 48 11 132 17 9 13 55 153 11 48 14 132 132 132 132 132 14 132 132 132 48 132 12 10 4)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.6034504505808E10
Median total errors in population: 69003
Error averages by case: (7.06588137796E8 1.12339873821E9 1.629454212808E9 1.73550527054E9 1.47871580726E9 4.52537003876E8 2.70492239218E8 2.70492112346E8 2.4791800446E7 2.2394941726E7 4.3128987262E8 6.77601728884E8 4.97202417814E8 9.2309267178E7 8.5969447126E7 9.33695899282E8 3.71749671376E8 2.3061682736E7 9.69739540234E8 3.35437379132E8 9.9047854432E7 1.21754400322E8 7.06589329004E8 1.90838719428E8 1.20608350278E9 1.478717629648E9 9.9045899586E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.146
Average program size in population (points): 45.92
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 173299777
--- Timings ---
Current time: 1481338346644 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction string_dup_times} {:close 1, :instruction string_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_emptystring} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_gt string_dup_times string_frominteger boolean_not integer_inc boolean_not integer_inc exec_yank string_emptystring boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_gte integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (string_dup_times string_frominteger boolean_not integer_inc boolean_not integer_inc exec_yank boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_dec exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 52
Percent parens: 0.115
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction string_dup_times} {:close 1, :instruction string_frominteger} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_emptystring} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_gt string_dup_times string_frominteger boolean_not integer_inc boolean_not integer_inc exec_yank string_emptystring boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_gte integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (string_dup_times string_frominteger integer_inc boolean_not integer_inc exec_yank string_emptystring boolean_not exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add integer_gte integer_mult exec_dup (string_yank integer_gt)) string_flush integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 52
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 21 36 14 149 18 4 4 44 173 16 36 7 149 149 149 149 149 14 149 149 149 36 149 15 13 17)
Population mean number of elite cases: 3.93
Count of perfect (error zero) individuals by case: (9 21 36 14 149 18 4 4 44 173 16 36 7 149 149 149 149 149 14 149 149 149 36 149 15 13 17)
Population mean number of perfect (error zero) cases: 3.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.326688362E7
Median total errors in population: 69003
Error averages by case: (3629295.668 1680738.368 2279098.042 2774695.104 1.3861535E7 552939.664 601359.226 703341.386 10876.048 7866.388 933057.994 944644.268 1224317.328 345851.97 412188.474 9352218.798 2661273.108 33832.916 5871922.348 2646966.808 679240.036 900935.272 985265.826 1480970.256 4084091.956 4426187.352 182174.016)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.778
Average program size in population (points): 46.61
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 65500
Number of point (instruction) evaluations so far: 174941171
--- Timings ---
Current time: 1481338356109 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_yankdup boolean_or boolean_not integer_inc exec_yank integer_dec integer_max integer_min boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min boolean_yankdup boolean_or boolean_not integer_inc integer_dec integer_max integer_min boolean_or exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 47
Percent parens: 0.128
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_yankdup} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_yankdup boolean_or boolean_not integer_inc exec_yank integer_dec integer_max integer_min boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_or integer_inc exec_yank integer_dec integer_max integer_min boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 47
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 16 27 17 120 14 15 19 31 142 8 27 7 120 120 120 120 119 15 120 120 120 27 120 13 18 11)
Population mean number of elite cases: 3.23
Count of perfect (error zero) individuals by case: (11 16 27 17 120 14 15 19 31 142 8 27 7 120 120 120 120 119 15 120 120 120 27 120 13 18 11)
Population mean number of perfect (error zero) cases: 3.23
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 5.40463679395E10
Median total errors in population: 69003
Error averages by case: (2.001496549736E9 2.000196646026E9 2.00023599825E9 2.00026956873E9 2.013285285288E9 2.000098838976E9 2.000137955662E9 2.000181068686E9 2.000014425732E9 2.00000772493E9 2.000168348426E9 2.000137995066E9 2.00022362417E9 2.000299919266E9 2.00056974065E9 2.012174073338E9 2.002695558548E9 2.000433865566E9 2.002855871194E9 2.003391123624E9 2.001522201744E9 2.001934964202E9 2.000141539044E9 2.00251954596E9 2.000702700808E9 2.000604139884E9 2.000068665994E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.178
Average program size in population (points): 45.92
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 176554938
--- Timings ---
Current time: 1481338365531 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_when (string_replacefirst)))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add integer_gt string_swap string_flush (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult ()))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 47
Percent parens: 0.149
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_when} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_when (string_replacefirst)))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_when string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 47
Percent parens: 0.149
--- Lexicase Population Statistics ---
Count of elite individuals by case: (7 8 57 16 143 21 11 7 62 170 10 57 13 143 143 143 143 143 16 143 143 143 57 143 15 13 13)
Population mean number of elite cases: 3.97
Count of perfect (error zero) individuals by case: (7 8 57 16 143 21 11 7 62 170 10 57 13 143 143 143 143 143 16 143 143 143 57 143 15 13 13)
Population mean number of perfect (error zero) cases: 3.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 4.3892188318894E10
Median total errors in population: 69003
Error averages by case: (2.003874982404E9 2.007873635758E9 2.014490728E9 2.016085866532E9 2.012938977764E9 2.001815376648E9 2.000832399362E9 2.000844881458E9 3033738.334 635638.312 2.001701798964E9 2.00345722768E9 2.002139843518E9 8.8619164781E8 7.66928818524E8 2.006392508588E9 2.001591787868E9 1553250.304 2.00644088805E9 2.001436553684E9 1.174468440964E9 1.965852142474E9 2.003699503176E9 2.000756134956E9 2.008936750956E9 2.012432267472E9 9.85782529334E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.802
Average program size in population (points): 46.626
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 66500
Number of point (instruction) evaluations so far: 178203601
--- Timings ---
Current time: 1481338374320 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_dec boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_lte string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_max exec_dup (integer_gt string_substring integer_mult boolean_dup in2 exec_swap (in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst) ()))))
Lexicase best partial simplification: (integer_dec boolean_or boolean_not string_parse_to_chars exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank integer_lte string_swap)) exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 exec_swap (in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst) ()))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 47
Percent parens: 0.170
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_lte} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_swap} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_dec boolean_or boolean_not integer_inc exec_yank string_parse_to_chars integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_lte string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_max exec_dup (integer_gt string_substring integer_mult boolean_dup in2 exec_swap (in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst) ()))))
Zero cases best partial simplification: (integer_dec exec_yank string_parse_to_chars exec_dup (exec_do*times (integer_add exec_dup string_parse_to_chars) exec_dup (exec_dup (integer_gt integer_mult in2 exec_swap (in1 100 integer_mult exec_empty)))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (16 19 43 17 148 28 16 6 53 183 10 43 7 148 148 148 148 147 11 148 148 148 43 148 6 10 9)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (16 19 43 17 148 28 16 6 53 183 10 43 7 148 148 148 148 147 11 148 148 148 43 148 6 10 9)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 1, :instruction string_yank} {:close 0, :instruction string_yankdup} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_yankdup} {:close 0, :instruction string_rot} {:close 1, :instruction string_butlast} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank integer_pop exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Partial simplification: (integer_min exec_dup_items string_yank string_yankdup exec_yank integer_dec string_yank integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_shove boolean_stackdepth integer_add boolean_yank exec_dup (exec_yankdup string_rot string_butlast) string_parse_to_chars) string_flush in1 exec_dup (string_yank boolean_dup_items boolean_shove integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Errors: [22 15 16 14 262 18 7 3 16 18 8 16 5 1005 2504 2249 1628 7283 31 2626 4606 4609 16 3816 4 0 9]
Total: 30806
Mean: 1140.963
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 5.4108385966526E10
Median total errors in population: 69003
Error averages by case: (2.003852227576E9 2.007964178496E9 2.014516814638E9 2.016087733954E9 2.012530122084E9 2.001916744112E9 2.000898655436E9 2.000900551344E9 2.00002224494E9 2.000013218156E9 2.001788753374E9 2.003573677966E9 2.002222138384E9 2.000212552362E9 2.00019759737E9 2.006029092886E9 2.001464299472E9 2.00002152621E9 2.006350403092E9 2.001265056084E9 2.000243454364E9 2.000317764754E9 2.003815812052E9 2.000573996012E9 2.0089528282E9 2.012427378032E9 2.000227145176E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.964
Average program size in population (points): 46.776
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 179874237
--- Timings ---
Current time: 1481338383725 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 49
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min string_replace boolean_not integer_inc integer_min string_yank exec_yank integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (17 11 48 13 135 18 9 12 54 158 12 48 13 135 135 135 135 135 15 135 135 135 48 135 13 13 8)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (17 11 48 13 135 18 9 12 54 158 12 48 13 135 135 135 135 135 15 135 135 135 48 135 13 13 8)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop integer_min string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop string_yank boolean_not boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup string_swap string_swap string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.2687405496E7
Median total errors in population: 69003
Error averages by case: (594576.028 814613.872 1046562.496 1091847.12 980934.844 437902.72 304911.246 304864.35 22173.84 13620.234 423435.41 577961.488 467238.65 134521.51 127617.796 720565.17 382636.12 20178.028 737453.628 356776.132 145009.212 170855.214 594726.53 239032.248 854659.576 980479.02 142253.014)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.68
Average program size in population (points): 46.444
Average percent parens in population: 0.126
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.148
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 67500
Number of point (instruction) evaluations so far: 181538641
--- Timings ---
Current time: 1481338393242 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction string_take} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_or string_yank integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_mult exec_dup (string_swap string_take exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replace string_replacefirst))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add exec_dup (exec_dup (integer_gt in2 in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction string_take} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_or string_yank integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_mult exec_dup (string_swap string_take exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replace string_replacefirst))))
Zero cases best partial simplification: (string_yank exec_yank exec_dup (string_yank exec_yank integer_add exec_dup string_swap (in2 in1 100 integer_mult)))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 15 42 17 137 13 16 8 48 155 20 42 15 137 137 137 137 137 10 137 137 137 42 137 11 12 11)
Population mean number of elite cases: 3.72
Count of perfect (error zero) individuals by case: (14 15 42 17 137 13 16 8 48 155 20 42 15 137 137 137 137 137 10 137 137 137 42 137 11 12 11)
Population mean number of perfect (error zero) cases: 3.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop integer_min string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop integer_min boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_swap boolean_dup_times string_swap)) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 7.7738343886098E10
Median total errors in population: 69003
Error averages by case: (2.92169169319E9 3.71133798546E9 4.903517368996E9 5.185806024344E9 4.521635608134E9 2.52558324162E9 2.281427823456E9 2.281427772032E9 2.004415176004E9 2.002009249166E9 2.495379659822E9 2.873234435296E9 2.590549597444E9 2.074529441592E9 2.06775245976E9 3.330412942968E9 2.41314539379E9 2.002678015866E9 3.40002042134E9 2.364731342526E9 2.081777099406E9 2.106532036344E9 2.9216918648E9 2.185016583554E9 3.888631035178E9 4.521635203058E9 2.081774410952E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.464
Average program size in population (points): 46.35
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 183178246
--- Timings ---
Current time: 1481338401574 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_take} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (integer_min integer_min integer_flush) boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_mult exec_dup (string_yank string_take exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add (exec_dup integer_gt integer_mult in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 54
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_take} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (integer_min integer_min integer_flush) boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_mult exec_dup (string_yank string_take exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min boolean_not exec_dup integer_inc exec_yank integer_dec exec_dup (exec_yank integer_add integer_mult integer_gt string_flush (string_yank exec_dup (integer_gt integer_mult in2 integer_mult in1 100 integer_mult))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 54
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 8 33 15 142 12 7 11 41 161 14 33 10 142 142 142 142 142 10 142 142 142 33 142 11 11 8)
Population mean number of elite cases: 3.70
Count of perfect (error zero) individuals by case: (12 8 33 15 142 12 7 11 41 161 14 33 10 142 142 142 142 142 10 142 142 142 33 142 11 11 8)
Population mean number of perfect (error zero) cases: 3.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop integer_min string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (integer_min string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_swap string_swap)) integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 1.2359076205396E11
Median total errors in population: 69003
Error averages by case: (4.689944786204E9 5.110874794726E9 5.623531538404E9 5.73116795729E9 5.470787958E9 4.43397425904E9 4.250938443374E9 4.250940270862E9 4.004436528684E9 4.002030106354E9 4.412601601488E9 4.66068049186E9 4.47894079006E9 4.072116976028E9 4.065763516812E9 4.919227303568E9 4.35274373234E9 4.002701009796E9 4.955595083368E9 4.316236874306E9 4.078881470762E9 4.101654519632E9 4.689909323252E9 4.170975650758E9 5.194553601428E9 5.47068730918E9 4.078866156384E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.42
Average program size in population (points): 46.276
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.144
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 68500
Number of point (instruction) evaluations so far: 184826521
--- Timings ---
Current time: 1481338410261 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction string_take} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_or string_yank integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_mult exec_dup (string_swap string_take exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replace string_replacefirst))))
Lexicase best partial simplification: (integer_inc exec_dup (exec_yank integer_add string_parse_to_chars ((integer_gt in2 in1 100 integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_or} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction string_take} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replace} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_or string_yank integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_mult exec_dup (string_swap string_take exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replace string_replacefirst))))
Zero cases best partial simplification: (exec_dup (exec_yank integer_add string_parse_to_chars (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 8 45 12 148 25 16 10 51 179 9 45 15 148 148 148 148 148 17 148 148 148 45 148 10 12 7)
Population mean number of elite cases: 4.00
Count of perfect (error zero) individuals by case: (12 8 45 12 148 25 16 10 51 179 9 45 15 148 148 148 148 148 17 148 148 148 45 148 10 12 7)
Population mean number of perfect (error zero) cases: 4.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop integer_min string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop string_yank boolean_not string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_swap boolean_dup_times string_swap)) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.9491928615674E10
Median total errors in population: 69003
Error averages by case: (2.68654028572E9 3.103253419436E9 3.609311155268E9 3.715370828474E9 3.458860374048E9 2.432372506668E9 2.250345582376E9 2.250353482768E9 2.004608471936E9 2.002209342858E9 2.41114863365E9 2.657446592372E9 2.477071121272E9 2.072177018418E9 2.065853422602E9 2.913813781794E9 2.351722850664E9 2.002908989292E9 2.949736121616E9 2.315422075272E9 2.078967829648E9 2.101688538406E9 2.686434695872E9 2.170794587964E9 3.186003362164E9 3.458630872992E9 2.078882672124E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.15
Average program size in population (points): 46.922
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 186482102
--- Timings ---
Current time: 1481338418629 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Lexicase best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best partial simplification: (integer_min string_replace boolean_not integer_inc integer_min integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 49
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Zero cases best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Zero cases best partial simplification: (integer_min boolean_not integer_inc string_yank integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 8 46 10 113 14 17 17 50 132 16 46 19 113 113 113 113 113 15 113 113 113 46 113 11 12 9)
Population mean number of elite cases: 3.22
Count of perfect (error zero) individuals by case: (13 8 46 10 113 14 17 17 50 132 16 46 19 113 113 113 113 113 15 113 113 113 46 113 11 12 9)
Population mean number of perfect (error zero) cases: 3.22
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_swap string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 1.16251163730382E11
Median total errors in population: 69003
Error averages by case: (4.235350671712E9 4.608109651828E9 5.294136525762E9 5.470353330662E9 5.063018958424E9 4.093342544458E9 4.031266333298E9 4.031266261026E9 4.000011492126E9 3.999999598984E9 4.08438970226E9 4.215886786002E9 4.113634559694E9 4.002588459156E9 4.002153604678E9 4.416921391156E9 4.061706299452E9 4.000005926906E9 4.45047830725E9 4.04961204652E9 4.003097701712E9 4.005140776508E9 4.23535120493E9 4.01452556516E9 4.702701425256E9 5.06301942706E9 4.003095178402E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.438
Average program size in population (points): 46.122
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 69500
Number of point (instruction) evaluations so far: 188113282
--- Timings ---
Current time: 1481338428065 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_replace} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or integer_min integer_min boolean_or integer_min string_empty boolean_not integer_inc integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank string_replace string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min boolean_or integer_min integer_min boolean_or integer_min string_empty boolean_not integer_inc integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank string_replace string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 48
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction integer_min} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_replace} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or integer_min integer_min boolean_or integer_min string_empty boolean_not integer_inc integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank string_replace string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult string_split exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or integer_min integer_min boolean_or integer_min string_empty boolean_not integer_inc integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add string_replacefirst exec_dup (string_yank string_replace string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult string_split exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 48
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 9 39 10 132 18 10 13 46 153 7 39 10 132 132 132 132 132 13 132 132 132 39 132 9 12 14)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (10 9 39 10 132 18 10 13 46 153 7 39 10 132 132 132 132 132 13 132 132 132 39 132 9 12 14)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop integer_min string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop integer_min string_yank boolean_not integer_inc string_stackdepth integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 2.8508590037458E10
Median total errors in population: 69003
Error averages by case: (1.18683289049E9 1.913703134986E9 2.97347084635E9 3.222690572152E9 2.635893329198E9 7.92371649396E8 5.16713893724E8 5.16715766916E8 3.282804371E7 1.9421661824E7 7.60319621402E8 1.14034375795E9 8.60050239634E8 2.14056766626E8 2.01002632822E8 1.568260022794E9 6.70679084218E8 2.35064044E7 1.631866325422E9 6.1586926415E8 2.2758442923E8 2.70990929178E8 1.186796858974E9 3.90481011482E8 2.07278084419E9 2.63579151681E9 2.2756853943E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.714
Average program size in population (points): 46.45
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.148
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 189752552
--- Timings ---
Current time: 1481338437453 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_butlast integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_min string_yank boolean_not exec_yank integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_butlast string_swap) string_parse_to_chars) string_flush exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_butlast integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min integer_min string_yank boolean_not exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add string_replacefirst exec_dup (string_butlast string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (17 9 34 16 138 21 11 13 42 163 12 34 9 138 138 138 138 138 16 138 138 138 34 138 11 10 11)
Population mean number of elite cases: 3.69
Count of perfect (error zero) individuals by case: (17 9 34 16 138 21 11 13 42 163 12 34 9 138 138 138 138 138 16 138 138 138 34 138 11 10 11)
Population mean number of perfect (error zero) cases: 3.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop exec_pop string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 5.5524209573888E10
Median total errors in population: 69003
Error averages by case: (2.24588457783E9 2.001214579354E9 2.001561553328E9 2.001629250036E9 3.37262821451E9 2.00065147142E9 2.022502698782E9 2.000452601928E9 2.000031940532E9 2.0019480232E7 2.000629700466E9 2.000860748912E9 2.000695065148E9 2.040469385878E9 2.06672673045E9 3.163272911354E9 2.32570759671E9 5.87725810628E8 2.42466581231E9 2.373776002094E9 2.148180040894E9 2.188871225638E9 2.000885809096E9 2.26070540187E9 2.145780663102E9 2.12847006827E9 2.000210233116E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.374
Average program size in population (points): 46.14
Average percent parens in population: 0.125
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 70500
Number of point (instruction) evaluations so far: 191376121
--- Timings ---
Current time: 1481338446949 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min integer_min string_yank boolean_not exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (10 8 36 11 149 16 11 11 43 173 9 36 16 149 149 149 149 149 9 149 149 149 36 149 13 5 12)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (10 8 36 11 149 16 11 11 43 173 9 36 16 149 149 149 149 149 9 149 149 149 36 149 13 5 12)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_add} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction string_rot} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_yank} {:close 0, :instruction 100} {:close 0, :instruction string_frominteger} {:close 0, :instruction string_replacefirst})
Best program: (integer_min exec_if (string_yank) (boolean_not integer_inc exec_yank integer_dec integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec integer_add integer_fromboolean integer_pop exec_dup (string_yank integer_dup_times string_swap) string_parse_to_chars) string_flush string_rot exec_dup (boolean_yankdup string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty boolean_yank 100 string_frominteger string_replacefirst)))))
Partial simplification: (integer_min exec_if () (boolean_not exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec integer_add integer_fromboolean exec_dup (string_yank integer_dup_times string_swap) string_parse_to_chars) string_flush exec_dup (boolean_yankdup string_dup string_butlast integer_dec exec_dup (integer_gt string_substring integer_mult 100 in2 integer_mult in1 100 string_empty boolean_yank 100 string_frominteger string_replacefirst)))))
Errors: [1 1 1 1 199 1 1 1 1 1 1 1 1 991 2476 2179 1585 7228 1 2575 4555 4555 1 3763 1 1 1]
Total: 30123
Mean: 1115.6666
Genome size: 42
Size: 50
Percent parens: 0.160
--- Population Statistics ---
Average total errors in population: 1.5448389549356E11
Median total errors in population: 69003
Error averages by case: (6.744289743294E9 7.812992467504E9 9.040612738358E9 9.291900828128E9 8.680493428188E9 6.040228750168E9 5.480163340344E9 5.480165205648E9 2.264690824902E9 2.2002436213E9 5.97812081521E9 6.66668459552E9 6.168733857176E9 3.077353211648E9 2.996741731192E9 7.335725205678E9 5.800286588796E9 2.221348786192E9 7.427360266888E9 5.688472156644E9 3.166676147668E9 3.49753134821E9 6.744253752984E9 4.81419981254E9 8.017574247482E9 8.680391727342E9 3.166660294556E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.612
Average program size in population (points): 46.502
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.148
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 193004525
--- Timings ---
Current time: 1481338456963 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult integer_lt in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_replace boolean_not string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult integer_lt in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 49
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_lt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult integer_lt in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_dec exec_dup (integer_gt string_substring integer_mult integer_lt in2 in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 13 45 11 129 11 10 13 52 151 14 45 9 129 129 129 129 129 16 129 129 129 45 129 15 11 10)
Population mean number of elite cases: 3.55
Count of perfect (error zero) individuals by case: (13 13 45 11 129 11 10 13 52 151 14 45 9 129 129 129 129 129 16 129 129 129 45 129 15 11 10)
Population mean number of perfect (error zero) cases: 3.55
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop integer_min string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop integer_min boolean_pop exec_dup ((exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup (string_swap)) exec_dup (boolean_shove exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod exec_empty))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 50
Percent parens: 0.120
--- Population Statistics ---
Average total errors in population: 6.9697957275644E10
Median total errors in population: 69003
Error averages by case: (2.695021197632E9 3.10531872013E9 3.611975086038E9 3.718630458416E9 3.489317426254E9 2.433067450878E9 2.251709816732E9 2.252177722934E9 2.004709053918E9 2.002215395552E9 2.41280044503E9 2.658669518142E9 2.479274876596E9 2.076014121102E9 2.072533646804E9 2.942423425526E9 2.36450858645E9 2.016816162972E9 2.96239924472E9 2.330601284974E9 2.092180049094E9 2.11609367943E9 2.687703016986E9 2.185449658606E9 3.192100138656E9 3.464626830672E9 2.0796202614E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.372
Average program size in population (points): 46.2
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 71500
Number of point (instruction) evaluations so far: 194617620
--- Timings ---
Current time: 1481338466805 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_parse_to_chars string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_parse_to_chars boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_parse_to_chars string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_not exec_yank exec_dup (string_rest exec_yank integer_add boolean_not exec_dup (integer_dec (integer_gt in2 in1 100 integer_mult string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 11 43 5 141 18 14 12 48 168 8 43 12 141 141 141 141 141 16 141 141 141 43 141 12 11 12)
Population mean number of elite cases: 3.79
Count of perfect (error zero) individuals by case: (11 11 43 5 141 18 14 12 48 168 8 43 12 141 141 141 141 141 16 141 141 141 43 141 12 11 12)
Population mean number of perfect (error zero) cases: 3.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 8.3084049577972E10
Median total errors in population: 69003
Error averages by case: (4.686368369084E9 3.1031668454E9 3.609262097908E9 3.715325014164E9 5.458657220208E9 2.432232716084E9 4.250174726098E9 4.250178611242E9 5490004.758 2429436.986 4.410994799234E9 2.657325472372E9 4.4769196131E9 6.97040708942E8 6.1539302574E8 4.91358039957E9 4.351505099352E9 3695795.752 4.949565863926E9 4.315194210096E9 9.40737175168E8 1.548523889386E9 2.686316118436E9 3.60731149624E9 5.185890817508E9 5.458542589256E9 7.52227461962E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.076
Average program size in population (points): 46.9
Average percent parens in population: 0.124
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.146
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 196289066
--- Timings ---
Current time: 1481338476100 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Lexicase best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best partial simplification: (integer_min integer_min string_replace boolean_not integer_inc string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest (exec_yank integer_add boolean_not string_substring exec_dup string_yank integer_gt string_swap) string_flush exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 49
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Zero cases best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Zero cases best partial simplification: (integer_min string_replace boolean_not integer_min string_yank boolean_not integer_inc exec_yank exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add string_substring exec_dup (string_yank integer_gt) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (18 9 33 15 139 19 13 12 39 163 12 33 14 139 139 139 139 139 17 139 139 139 33 139 14 14 8)
Population mean number of elite cases: 3.71
Count of perfect (error zero) individuals by case: (18 9 33 15 139 19 13 12 39 163 12 33 14 139 139 139 139 139 17 139 139 139 33 139 14 14 8)
Population mean number of perfect (error zero) cases: 3.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Partial simplification: (exec_noop (string_yank) integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Errors: [10 19 19 19 250 19 19 15 19 19 19 19 17 993 2492 2237 1616 7271 19 2614 4594 4597 19 3804 8 12 19]
Total: 30758
Mean: 1139.1852
Genome size: 39
Size: 45
Percent parens: 0.133
--- Population Statistics ---
Average total errors in population: 5.1209014195448E10
Median total errors in population: 69003
Error averages by case: (2.323091731934E9 3.510603105178E9 4.896201896638E9 5.181255497754E9 4.488211913214E9 1.562774225772E9 9.85251767732E8 9.85251676748E8 4.1592028062E7 2.3413118608E7 1.49718011534E9 2.238148535614E9 1.699434429096E9 3.55124513264E8 3.29832885688E8 2.976953871376E9 1.311163783006E9 2.8815308552E7 3.079114227684E9 1.195854383574E9 3.81599333734E8 4.68338669392E8 2.32309245899E9 7.16516980242E8 3.740388049074E9 4.488212671778E9 3.81597017404E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.738
Average program size in population (points): 46.676
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 72500
Number of point (instruction) evaluations so far: 197936245
--- Timings ---
Current time: 1481338485470 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_min exec_if (string_yank) (boolean_not integer_inc exec_yank integer_empty boolean_invert_second_then_and exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_eq exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Lexicase best partial simplification: ((integer_inc exec_yank exec_dup (exec_yank integer_add exec_dup string_swap ((in2 in1 100 integer_mult)))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction boolean_invert_second_then_and} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not integer_inc exec_yank integer_min exec_if (string_yank) (boolean_not integer_inc exec_yank integer_empty boolean_invert_second_then_and exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank boolean_eq exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_min exec_if () boolean_not integer_inc exec_yank integer_empty boolean_invert_second_then_and exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank boolean_eq exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 21 37 6 129 20 10 10 40 153 11 37 8 129 129 129 129 129 12 129 129 129 37 129 11 10 16)
Population mean number of elite cases: 3.48
Count of perfect (error zero) individuals by case: (9 21 37 6 129 20 10 10 40 153 11 37 8 129 129 129 129 129 12 129 129 129 37 129 11 10 16)
Population mean number of perfect (error zero) cases: 3.48
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop string_yank boolean_not integer_inc boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 8.057374864687E10
Median total errors in population: 69003
Error averages by case: (3.375756831062E9 3.110693387352E9 3.623324838822E9 5.445702836448E9 4.928461881436E9 2.433846885224E9 2.500827999548E9 2.5008279121E9 2.004409752994E9 2.002009449954E9 2.82322777436E9 2.660530998822E9 2.955455314312E9 2.143915854242E9 2.131224299572E9 3.832024677206E9 2.70381988408E9 2.005338915886E9 3.904472779424E9 2.631011677444E9 2.15740386098E9 2.202864821018E9 2.689757501808E9 2.341225114896E9 4.379749161262E9 4.928462593962E9 2.157401642656E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.236
Average program size in population (points): 46.234
Average percent parens in population: 0.132
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.6
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.6
Total error diversity:				 0.126
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 199539785
--- Timings ---
Current time: 1481338494249 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_length} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Lexicase best program: (integer_min integer_min string_length boolean_not integer_inc exec_yank integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_inc integer_min string_yank integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 51
Percent parens: 0.118
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_length} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Zero cases best program: (integer_min integer_min string_length boolean_not integer_inc exec_yank integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Zero cases best partial simplification: (boolean_not exec_dup (exec_yank integer_add (in2 in1 100 integer_mult)))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 51
Percent parens: 0.118
--- Lexicase Population Statistics ---
Count of elite individuals by case: (11 17 38 7 113 15 19 8 44 132 7 38 12 113 113 113 113 113 11 113 113 113 38 113 14 12 21)
Population mean number of elite cases: 3.15
Count of perfect (error zero) individuals by case: (11 17 38 7 113 15 19 8 44 132 7 38 12 113 113 113 113 113 11 113 113 113 38 113 14 12 21)
Population mean number of perfect (error zero) cases: 3.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop (string_yank) boolean_not integer_inc string_stackdepth integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup (string_swap string_swap)) string_flush exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 6.9495701098212E10
Median total errors in population: 69003
Error averages by case: (2.686759794526E9 3.103704394584E9 3.609954075534E9 3.71604694179E9 3.459304017926E9 2.432520320824E9 2.25037431576E9 2.250378206472E9 2.004422580076E9 2.00201769817E9 2.411272818376E9 2.657706004686E9 2.4772266669E9 2.072057469294E9 2.065719237188E9 2.91405325811E9 2.351755237898E9 2.002702993726E9 2.950051945648E9 2.315426658518E9 2.078828783678E9 2.101563690014E9 2.686707777012E9 2.17071556007E9 3.186454964046E9 3.459190394354E9 2.078785293032E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.228
Average program size in population (points): 46.104
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.144
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 73500
Number of point (instruction) evaluations so far: 201154961
--- Timings ---
Current time: 1481338502745 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_min boolean_not integer_mod integer_min integer_min integer_min boolean_or boolean_not string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_yankdup integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best partial simplification: (integer_min boolean_not integer_mod integer_min integer_min integer_min boolean_or boolean_not string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_yankdup integer_dec exec_dup (integer_gt string_substring integer_mult in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mod} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_min boolean_not integer_mod integer_min integer_min integer_min boolean_or boolean_not string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_yankdup integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best partial simplification: (integer_min integer_mod integer_min integer_min integer_min boolean_or boolean_not string_yank boolean_not integer_inc integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_yankdup integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (20 12 52 15 133 10 15 8 58 148 10 52 10 133 133 133 133 133 8 133 133 133 52 133 16 9 12)
Population mean number of elite cases: 3.67
Count of perfect (error zero) individuals by case: (20 12 52 15 133 10 15 8 58 148 10 52 10 133 133 133 133 133 8 133 133 133 52 133 16 9 12)
Population mean number of perfect (error zero) cases: 3.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop string_yank boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 7.7731765442764E10
Median total errors in population: 69003
Error averages by case: (2.921399791332E9 3.710889202748E9 4.902873767608E9 5.185120829348E9 4.52104920424E9 2.525399798044E9 2.281302940158E9 2.281302853662E9 2.00440832026E9 2.002007206874E9 2.495192221454E9 2.87295396652E9 2.59033702296E9 2.074480997544E9 2.067707124756E9 3.330034823712E9 2.412980336928E9 2.002673289654E9 3.399629207318E9 2.364580344544E9 2.081725246304E9 2.106469475984E9 2.921400493218E9 2.1849238082E9 3.888150463796E9 4.521049895544E9 2.081722810054E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.894
Average program size in population (points): 46.766
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.134
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 202818215
--- Timings ---
Current time: 1481338512303 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_yank} {:close 0, :instruction string_emptystring} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_gt integer_min string_yank boolean_not integer_inc exec_yank string_emptystring exec_yank string_emptystring boolean_or boolean_not integer_inc exec_yank string_parse_to_chars string_replace exec_dup (string_yank exec_do*times (exec_yank integer_add integer_gte integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank string_emptystring exec_yank string_emptystring boolean_or boolean_not integer_inc exec_yank string_parse_to_chars string_replace exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 52
Percent parens: 0.115
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gt} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_yank} {:close 0, :instruction string_emptystring} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_replace} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_gte} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_gt integer_min string_yank boolean_not integer_inc exec_yank string_emptystring exec_yank string_emptystring boolean_or boolean_not integer_inc exec_yank string_parse_to_chars string_replace exec_dup (string_yank exec_do*times (exec_yank integer_add integer_gte integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_gt string_yank boolean_not integer_inc exec_yank string_emptystring exec_yank string_emptystring boolean_or boolean_not exec_yank string_parse_to_chars string_replace exec_dup (string_yank exec_do*times (exec_yank integer_add integer_gte integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 52
Percent parens: 0.115
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 21 38 10 141 19 11 12 43 167 8 38 12 141 141 141 141 141 15 141 141 141 38 141 14 8 10)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (14 21 38 10 141 19 11 12 43 167 8 38 12 141 141 141 141 141 15 141 141 141 38 141 14 8 10)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Best program: (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Partial simplification: (exec_noop integer_inc string_stackdepth boolean_pop integer_max exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_swap boolean_dup_times string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup boolean_shove integer_dec exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst))))
Errors: [18 15 15 15 258 15 11 7 15 15 12 15 9 1001 2500 2245 1624 7279 27 2622 4602 4605 15 3812 0 4 13]
Total: 30769
Mean: 1139.5927
Genome size: 44
Size: 51
Percent parens: 0.137
--- Population Statistics ---
Average total errors in population: 4.8004512211738E10
Median total errors in population: 69003
Error averages by case: (2.0001041122E9 2.000143187322E9 2.000183125148E9 2.000190827806E9 2.00016928076E9 2.000078364316E9 2.000055018088E9 2.000054886428E9 1636963.428 203877.504 2.00007555655E9 2.000102480732E9 2.000083024914E9 2.000025354038E9 2.000024746484E9 2.000125695226E9 2.000067973916E9 436795.632 2.00012840298E9 2.000063939936E9 2.00002854584E9 2.000032971362E9 2.000105370328E9 2.000044314332E9 2.000149444744E9 2.000171209392E9 2.000026742332E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.858
Average program size in population (points): 46.834
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 74500
Number of point (instruction) evaluations so far: 204469080
--- Timings ---
Current time: 1481338521889 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_dup} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_dup string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_dup string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_dup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_dup string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min exec_dup_items exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_dup string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 11 48 13 118 18 11 13 54 141 11 48 11 118 118 118 118 118 8 118 118 118 48 118 20 9 14)
Population mean number of elite cases: 3.34
Count of perfect (error zero) individuals by case: (12 11 48 13 118 18 11 13 54 141 11 48 11 118 118 118 118 118 8 118 118 118 48 118 20 9 14)
Population mean number of perfect (error zero) cases: 3.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not (string_substring integer_gt) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [38 1 0 2 78 2 9 13 0 2 8 0 11 21 20 65 44 1 47 42 22 25 0 32 20 16 7]
Total: 526
Mean: 19.481482
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.00549635981396E11
Median total errors in population: 69003
Error averages by case: (4.061902786408E9 5.316390027116E9 6.841075145366E9 7.160795946888E9 6.386755063692E9 3.297944685704E9 2.750890443552E9 2.750890367896E9 2.01320133848E9 2.006011771908E9 3.234079527326E9 3.974707392998E9 3.432217639776E9 2.21581407341E9 2.196782975968E9 4.74527958625E9 3.055134316708E9 2.008004038068E9 4.853772413812E9 2.946015070524E9 2.236037787324E9 2.304202079514E9 4.061903356584E9 2.511639437916E9 5.565397670304E9 6.386755588336E9 2.236035449568E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.72
Average program size in population (points): 46.804
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 206091889
--- Timings ---
Current time: 1481338531126 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_dup} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_dup string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_dup string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction string_dup} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_dup string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup string_dup string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (14 14 48 13 130 10 12 14 51 141 8 48 11 130 130 130 130 130 13 130 130 130 48 130 8 7 8)
Population mean number of elite cases: 3.54
Count of perfect (error zero) individuals by case: (14 14 48 13 130 10 12 14 51 141 8 48 11 130 130 130 130 130 13 130 130 130 48 130 8 7 8)
Population mean number of perfect (error zero) cases: 3.54
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [38 1 0 2 78 2 9 13 0 2 8 0 11 21 20 65 44 1 47 42 22 25 0 32 20 16 7]
Total: 526
Mean: 19.481482
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.5270788524028E11
Median total errors in population: 69003
Error averages by case: (6.24166405207E9 6.597995751368E9 7.257729251572E9 7.427631854168E9 7.035121168594E9 6.106991477464E9 5.611203449036E9 5.611203399468E9 4.02013385311E9 4.020022871626E9 6.098548604406E9 6.223146608932E9 6.126157064448E9 4.10750046149E9 4.09059408824E9 6.414914393522E9 6.077201961338E9 4.020045955376E9 6.447009249436E9 6.065853557866E9 4.127767292178E9 4.214430776802E9 6.241664167064E9 4.671724119782E9 6.68874402879E9 7.035120669946E9 4.127765112188E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.176
Average program size in population (points): 46.0
Average percent parens in population: 0.131
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 75500
Number of point (instruction) evaluations so far: 207717295
--- Timings ---
Current time: 1481338540478 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Lexicase best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank) string_parse_to_chars) integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 49
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Zero cases best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Zero cases best partial simplification: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_substring exec_dup (string_yank integer_gt)) string_flush exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (17 15 58 13 120 11 10 11 62 136 13 58 8 120 120 120 120 120 15 120 120 120 58 120 19 8 11)
Population mean number of elite cases: 3.45
Count of perfect (error zero) individuals by case: (17 15 58 13 120 11 10 11 62 136 13 58 8 120 120 120 120 120 15 120 120 120 58 120 19 8 11)
Population mean number of perfect (error zero) cases: 3.45
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (exec_dup_items boolean_not integer_dec exec_dup (string_yank exec_do*times (exec_yank boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [38 1 0 2 78 2 9 13 0 2 8 0 11 21 20 65 44 1 47 42 22 25 0 32 20 16 7]
Total: 526
Mean: 19.481482
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.08002595305426E11
Median total errors in population: 69003
Error averages by case: (4.000142671344E9 4.000046858912E9 4.000049298198E9 4.000057872918E9 4.000333542712E9 4.000027469888E9 4.000044768992E9 4.000052649262E9 4.000007898588E9 4.000005603592E9 4.000050339006E9 4.000036876518E9 4.00006020236E9 4.000058955276E9 4.000075767528E9 4.000307983692E9 4.000163919864E9 4.000041603362E9 4.000186788822E9 4.000175836888E9 4.000112498944E9 4.000126563568E9 4.000037394172E9 4.000147768632E9 4.000111241544E9 4.000104865996E9 4.000028064848E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.51
Average program size in population (points): 46.446
Average percent parens in population: 0.129
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 209368126
--- Timings ---
Current time: 1481338549817 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Lexicase best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add integer_dup_times string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best partial simplification: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add integer_dup_times string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 49
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup_times} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_rest})
Zero cases best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add integer_dup_times string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_rest))))
Zero cases best partial simplification: (integer_min integer_min string_replace boolean_not integer_inc string_yank boolean_not integer_inc exec_yank integer_dec exec_noop exec_dup (string_rest exec_do*times (exec_yank integer_add integer_dup_times string_substring exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 integer_mult boolean_dup exec_empty string_rest))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 49
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 12 48 12 129 19 13 15 50 153 10 48 11 129 129 129 129 129 13 129 129 129 48 129 14 13 8)
Population mean number of elite cases: 3.58
Count of perfect (error zero) individuals by case: (12 12 48 12 129 19 13 15 50 153 10 48 11 129 129 129 129 129 13 129 129 129 48 129 14 13 8)
Population mean number of perfect (error zero) cases: 3.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup string_substring integer_gt string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [36 1 2 0 76 4 7 11 2 4 6 2 9 19 18 63 42 3 45 40 20 23 2 30 18 14 5]
Total: 502
Mean: 18.592592
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 5.4002190884656E10
Median total errors in population: 69003
Error averages by case: (2.000101466048E9 2.00013997638E9 2.000179458474E9 2.00018710606E9 2.000165955104E9 2.000076010382E9 2.00005307146E9 2.0000529519E9 2.000004961588E9 2.00000353511E9 2.000073252286E9 2.000099764458E9 2.000080611552E9 2.00002404309E9 2.000023367002E9 2.0001227017E9 2.000065785484E9 2.000007089482E9 2.00012546928E9 2.00006175426E9 2.000026947268E9 2.000031263836E9 2.000102614462E9 2.000042408056E9 2.000146191954E9 2.000167707984E9 2.000025419996E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.62
Average program size in population (points): 46.628
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 76500
Number of point (instruction) evaluations so far: 211010611
--- Timings ---
Current time: 1481338559147 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_if (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_swap integer_max integer_min integer_min integer_min string_yank) (boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_butlast integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add string_flush string_yank (in2 in1 100 integer_mult)))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 59
Percent parens: 0.153
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction exec_if} {:close 0, :instruction exec_noop} {:close 0, :instruction exec_pop} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_stackdepth} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_max} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_if (exec_noop exec_pop (string_yank) boolean_not integer_inc string_stackdepth boolean_swap integer_max integer_min integer_min integer_min string_yank) (boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_butlast integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Zero cases best partial simplification: (integer_min exec_if (exec_noop string_yank integer_inc string_stackdepth boolean_swap integer_min integer_min integer_min string_yank) (boolean_not exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank exec_dup (integer_gt integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst)))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 59
Percent parens: 0.153
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 10 58 16 134 17 7 15 61 163 9 58 18 134 134 134 134 134 5 134 134 134 58 134 15 7 10)
Population mean number of elite cases: 3.76
Count of perfect (error zero) individuals by case: (13 10 58 16 134 17 7 15 61 163 9 58 18 134 134 134 134 134 5 134 134 134 58 134 15 7 10)
Population mean number of perfect (error zero) cases: 3.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast integer_dec exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) integer_pop exec_dup (string_dup string_butlast integer_dec exec_dup (string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [36 1 2 0 76 4 7 11 2 4 6 2 9 19 18 63 42 3 45 40 20 23 2 30 18 14 5]
Total: 502
Mean: 18.592592
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 6.3079146364028E10
Median total errors in population: 69003
Error averages by case: (2.686203291346E9 3.102940329332E9 3.608918762028E9 3.714954841368E9 3.458203921652E9 2.000203500302E9 2.250202887154E9 2.25020281077E9 2.5804550228E7 2201488.228 2.410961281722E9 2.657221801884E9 2.476859356562E9 2.072076353404E9 2.065738998398E9 2.913270440876E9 2.351435309132E9 7582342.926 2.94930755289E9 2.31513173102E9 2.0788119975E9 2.101510094412E9 2.686203841936E9 2.170571958448E9 3.185612175998E9 3.45820448377E9 2.078810260742E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.434
Average program size in population (points): 46.298
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 212662827
--- Timings ---
Current time: 1481338567922 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_dec integer_mult exec_yank integer_dec boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (string_yank exec_dup (exec_yank integer_add string_yank string_parse_to_chars (integer_dec exec_dup (integer_gt boolean_dup in2 integer_mult in1 100 integer_mult string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (17 16 51 6 136 19 9 13 52 160 8 51 8 136 136 136 136 137 16 136 136 136 51 136 19 18 10)
Population mean number of elite cases: 3.77
Count of perfect (error zero) individuals by case: (17 16 51 6 136 19 9 13 52 160 8 51 8 136 136 136 136 137 16 136 136 136 51 136 19 18 10)
Population mean number of perfect (error zero) cases: 3.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min exec_dup_items boolean_not boolean_empty exec_yank exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 2636143.384
Median total errors in population: 69003
Error averages by case: (144828.584 48524.872 51553.988 60332.024 338481.282 28181.342 45407.528 53368.568 7711.944 5395.6 51238.536 37933.748 61282.944 59472.038 76449.758 312065.054 165886.346 41758.44 189691.804 177881.778 113578.898 127823.246 38490.632 149344.114 113657.568 107519.552 28283.196)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.686
Average program size in population (points): 46.666
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.514
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.514
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 77500
Number of point (instruction) evaluations so far: 214320251
--- Timings ---
Current time: 1481338576923 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_or boolean_not boolean_not integer_inc integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult string_rot exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min boolean_or boolean_not boolean_not integer_inc integer_inc exec_yank integer_dec integer_dec exec_dup (exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt) string_parse_to_chars) string_flush exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult string_rot exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 47
Percent parens: 0.128
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_rot} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_or boolean_not boolean_not integer_inc integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult string_rot exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_or boolean_not boolean_not integer_inc integer_inc exec_yank integer_dec integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring boolean_dup in2 integer_mult in1 100 string_empty integer_mult string_rot exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 47
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (19 8 38 11 133 26 11 7 41 168 4 38 16 133 133 133 133 133 13 133 133 133 38 133 16 13 16)
Population mean number of elite cases: 3.63
Count of perfect (error zero) individuals by case: (19 8 38 11 133 26 11 7 41 168 4 38 16 133 133 133 133 133 13 133 133 133 38 133 16 13 16)
Population mean number of perfect (error zero) cases: 3.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min boolean_not boolean_empty exec_yank exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not (string_substring string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 4321574.008
Median total errors in population: 69003
Error averages by case: (201304.656 276281.816 354142.824 369251.304 329538.538 149956.186 104977.626 104847.538 10137.538 5270.068 144795.138 196913.064 159406.198 47619.088 45593.084 242966.564 130311.578 9097.444 248928.442 121848.154 51753.97 60335.752 202539.75 82857.594 289087.396 331417.516 50395.182)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.01
Average program size in population (points): 46.974
Average percent parens in population: 0.127
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 215975421
--- Timings ---
Current time: 1481338586222 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_min boolean_not integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_shove integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_min boolean_not integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add string_replacefirst exec_dup (string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_shove integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 50
Percent parens: 0.120
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_replace} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min string_replace boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_min boolean_not integer_dec exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_shove integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (string_replace exec_dup (exec_yank integer_add (exec_dup (integer_gt in2 integer_mult in1 100 integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 50
Percent parens: 0.120
--- Lexicase Population Statistics ---
Count of elite individuals by case: (12 12 40 16 145 16 9 13 41 167 13 40 7 145 145 145 145 145 16 145 145 145 40 145 11 13 12)
Population mean number of elite cases: 3.86
Count of perfect (error zero) individuals by case: (12 12 40 16 145 16 9 13 41 167 13 40 7 145 145 145 145 145 16 145 145 145 40 145 11 13 12)
Population mean number of perfect (error zero) cases: 3.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 4.8003213305712E10
Median total errors in population: 69003
Error averages by case: (2.000055023136E9 2.000024028164E9 2.000028044416E9 2.000032740558E9 2.0001578905E9 2.000012209954E9 2.000014795742E9 2.000016780926E9 1623978.96 199906.898 2.000018885518E9 2.000017063024E9 2.000022875002E9 2.000012768124E9 2.000015792104E9 2.00012615374E9 2.000050974172E9 431826.0 2.000078666398E9 2.000052922372E9 2.000023914268E9 2.0000284372E9 2.000017465382E9 2.000037709828E9 2.00005215984E9 2.000052764332E9 2.000007529154E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.434
Average program size in population (points): 46.398
Average percent parens in population: 0.130
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.134
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 78500
Number of point (instruction) evaluations so far: 217613686
--- Timings ---
Current time: 1481338595303 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_min string_yank boolean_not integer_inc exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_yankdup integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_min string_yank boolean_not integer_inc exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_yankdup integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction string_rest} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_replacefirst} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_min string_yank boolean_not integer_inc exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_yankdup integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_min string_yank boolean_not integer_inc exec_dup (string_rest exec_do*times (exec_yank integer_add boolean_not string_replacefirst exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (integer_yankdup integer_dec exec_dup (integer_gt string_substring integer_mult boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (15 13 40 17 132 18 10 9 42 161 16 40 9 132 132 132 132 132 7 132 132 132 40 132 11 14 13)
Population mean number of elite cases: 3.59
Count of perfect (error zero) individuals by case: (15 13 40 17 132 18 10 9 42 161 16 40 9 132 132 132 132 132 7 132 132 132 40 132 11 14 13)
Population mean number of perfect (error zero) cases: 3.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 5.407787004879E10
Median total errors in population: 69003
Error averages by case: (2.000735203988E9 2.000229553786E9 2.000327477842E9 2.000348784262E9 2.013049580184E9 2.000101390102E9 2.000072053074E9 2.000082071538E9 2.00000528993E9 2.00000355373E9 2.000102231752E9 2.000144530786E9 2.000120556102E9 2.000314296506E9 2.001208450434E9 2.018706528114E9 2.003831962884E9 2.008207090548E9 2.001554068862E9 2.006452371E9 2.00643861856E9 2.007734623714E9 2.00015003459E9 2.0072851488E9 2.000304867404E9 2.000327731448E9 2.00003197885E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.808
Average program size in population (points): 46.726
Average percent parens in population: 0.128
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.12
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 219263750
--- Timings ---
Current time: 1481338604539 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_swap} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min string_swap string_yank boolean_not string_take boolean_or boolean_not integer_dec boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Lexicase best partial simplification: (exec_dup (exec_yank integer_add integer_mult string_yank (string_yank integer_dec exec_dup (integer_gt string_substring in2 integer_mult in1 100 string_empty integer_mult))))
Lexicase best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Lexicase best number of elite cases: 11
Lexicase best total error: 69003
Lexicase best mean error: 2555.6667
Lexicase best size: 46
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_swap} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_take} {:close 1, :instruction boolean_or} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_or} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_substring} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min string_swap string_yank boolean_not string_take boolean_or boolean_not integer_dec boolean_or exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best partial simplification: (integer_min string_swap string_yank boolean_not boolean_or boolean_not integer_dec boolean_or exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank integer_dec exec_dup (integer_gt string_substring string_parse_to_chars boolean_dup in2 integer_mult in1 100 string_empty integer_mult boolean_dup exec_empty string_replacefirst))))
Zero cases best errors: [1980 6831 8019 8019 0 4950 2871 2475 99 0 3861 5643 3861 0 0 0 0 0 1881 0 0 0 5742 0 5148 6138 1485]
Zero cases best number of elite cases: 11
Zero cases best number of zero cases: 11
Zero cases best total error: 69003
Zero cases best mean error: 2555.6667
Zero cases best size: 46
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (9 19 42 6 146 11 16 16 45 161 7 42 16 146 146 146 146 146 15 146 146 146 42 146 15 8 13)
Population mean number of elite cases: 3.89
Count of perfect (error zero) individuals by case: (9 19 42 6 146 11 16 16 45 161 7 42 16 146 146 146 146 146 15 146 146 146 42 146 15 8 13)
Population mean number of perfect (error zero) cases: 3.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_empty exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not (string_substring string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.00885941986E8
Median total errors in population: 69003
Error averages by case: (3462186.492 7553772.058 1.409173725E7 1.5661126746E7 1.1974216188E7 1630882.864 677881.422 677751.798 5757.27 3720.878 1502762.452 3227265.57 1912467.902 102214.178 90321.344 5535208.346 1166805.116 7101.136 5898861.358 979637.868 117553.548 169660.17 3463424.426 371904.9 8509316.872 1.1976140484E7 116263.35)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.462
Average program size in population (points): 46.502
Average percent parens in population: 0.132
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 79500
Number of point (instruction) evaluations so far: 220888436
--- Timings ---
Current time: 1481338613536 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add exec_dup (string_yank) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup () string_parse_to_chars) boolean_xor exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (13 15 49 17 137 20 6 12 51 162 15 49 11 137 137 137 137 137 16 137 137 137 49 137 10 8 17)
Population mean number of elite cases: 3.78
Count of perfect (error zero) individuals by case: (13 15 49 17 137 20 6 12 51 162 15 49 11 137 137 137 137 137 16 137 137 137 49 137 10 8 17)
Population mean number of perfect (error zero) cases: 3.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup (string_substring integer_gt string_swap)) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 8.258477218096E9
Median total errors in population: 69003
Error averages by case: (2.35731518142E8 6.08379623256E8 1.294413344364E9 1.470641531936E9 1.063713040782E9 9.3541038954E7 3.1457380732E7 3.1467332592E7 47564.562 29882.438 8.4615488676E7 2.16120672204E8 1.138819907E8 2740443.53 2320767.086 4.17548181458E8 6.2069033642E7 71194.848 4.50940058048E8 4.9981837494E7 3313281.774 5383937.442 2.35588023818E8 1.4821261626E7 7.0306573773E8 1.063378571722E9 3214478.54)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.236
Average program size in population (points): 46.236
Average percent parens in population: 0.132
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.14
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 222534171
--- Timings ---
Current time: 1481338622814 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup string_yank string_swap string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min integer_min string_yank boolean_not exec_yank integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 164 187 169 152 165 164 164 187 317 170 187 164 152 152 152 152 151 164 152 152 152 187 152 164 164 164)
Population mean number of elite cases: 9.13
Count of perfect (error zero) individuals by case: (165 164 187 169 152 165 164 164 187 317 170 187 164 152 152 152 152 151 164 152 152 152 187 152 164 164 164)
Population mean number of perfect (error zero) cases: 9.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.02031120397722E11
Median total errors in population: 69003
Error averages by case: (4.000536679984E9 4.000870542976E9 4.001285397806E9 4.001373437632E9 4.001169104296E9 4.00033367858E9 4.000191979466E9 4.000192018554E9 2.012670136022E9 2.002022820706E9 4.00031728317E9 4.00051170539E9 4.000369220488E9 4.000055919572E9 4.000052018574E9 4.00072421821E9 4.00027301506E9 2.004201608216E9 4.000749191962E9 4.00024539592E9 4.000063313288E9 4.000080748E9 4.000534813788E9 4.000133528276E9 4.000939415588E9 4.001162645888E9 4.00006056031E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.82
Average program size in population (points): 48.672
Average percent parens in population: 0.143
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 149
Genome diversity (% unique Plush genomes):	 0.466
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.466
Total error diversity:				 0.084
Error (vector) diversity:			 0.084
--- Run Statistics ---
Number of program evaluations used so far: 80500
Number of point (instruction) evaluations so far: 224146109
--- Timings ---
Current time: 1481338632044 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_dec integer_mult integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup (exec_yank integer_add (boolean_shove 100 in2 integer_mult in1 100 integer_mod)))
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (159 159 169 163 143 164 159 159 169 307 165 169 159 143 143 143 143 142 159 143 143 143 169 143 159 159 159)
Population mean number of elite cases: 8.67
Count of perfect (error zero) individuals by case: (159 159 169 163 143 164 159 159 169 307 165 169 159 143 143 143 143 142 159 143 143 143 169 143 159 159 159)
Population mean number of perfect (error zero) cases: 8.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min exec_dup_items boolean_not boolean_empty exec_yank exec_dup (string_yank exec_do*times (exec_yank boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt) string_parse_to_chars) string_flush exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 4.4047970237892E10
Median total errors in population: 69003
Error averages by case: (2.00083627763E9 2.01048653168E9 2.001944762862E9 2.019218605906E9 2.00177788145E9 2.5972492961E8 2.000306157708E9 2.00030629306E9 1191390.276 203928.676 2.000500661108E9 9.4084694851E8 2.000580583704E9 2.00009059661E9 2.000083903468E9 2.00111899729E9 2.000432737708E9 1.457873405934E9 2.001155973644E9 2.000389626368E9 2.000101573448E9 2.000129586554E9 9.96573764362E8 2.000213840516E9 2.001437802468E9 2.001766102546E9 3.48677374796E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.522
Average program size in population (points): 48.32
Average percent parens in population: 0.143
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 136
Genome diversity (% unique Plush genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 136
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.08
Error (vector) diversity:			 0.08
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 225761750
--- Timings ---
Current time: 1481338640614 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (exec_dup (exec_yank integer_add (100 in2 integer_mult in1 100 integer_mod)))
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (162 162 176 165 136 168 162 162 176 305 165 176 162 136 136 136 136 136 162 136 136 136 176 136 162 162 162)
Population mean number of elite cases: 8.65
Count of perfect (error zero) individuals by case: (162 162 176 165 136 168 162 162 176 305 165 176 162 136 136 136 136 136 162 136 136 136 176 136 162 162 162)
Population mean number of perfect (error zero) cases: 8.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.0681291824E7
Median total errors in population: 69003
Error averages by case: (467530.27 759294.418 1123187.782 1200557.134 1022231.294 290072.29 166791.378 166848.29 4327.166 2726.456 275854.378 445390.102 321130.642 48845.316 45637.038 632294.364 237720.714 6647.528 653516.93 213804.902 55673.662 70811.596 465560.926 116582.714 819875.522 1015642.734 52736.278)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.48
Average program size in population (points): 48.448
Average percent parens in population: 0.145
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 122
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 122
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.078
Error (vector) diversity:			 0.078
--- Run Statistics ---
Number of program evaluations used so far: 81500
Number of point (instruction) evaluations so far: 227347923
--- Timings ---
Current time: 1481338649237 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not exec_yank integer_dec exec_yank exec_swap (exec_dup (string_yank (exec_yank integer_add boolean_not exec_dup ()) boolean_xor exec_dup (string_yank boolean_shove exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod exec_empty string_replacefirst)))))
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (161 161 182 165 146 166 161 161 182 312 162 182 161 146 146 146 146 145 161 146 146 146 182 146 161 161 161)
Population mean number of elite cases: 8.88
Count of perfect (error zero) individuals by case: (161 161 182 165 146 166 161 161 182 312 162 182 161 146 146 146 146 145 161 146 146 146 182 146 161 161 161)
Population mean number of perfect (error zero) cases: 8.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.50373498462234E11
Median total errors in population: 69003
Error averages by case: (6.00693521637E9 6.015166063738E9 6.02831637656E9 6.031472166448E9 6.024068971486E9 6.00324431137E9 6.001329029032E9 6.0013291188E9 2.109318997936E9 2.02203890191E9 6.002987483408E9 6.006458096972E9 6.00381238118E9 6.000182014664E9 6.000158893172E9 6.011112649016E9 6.00231533339E9 2.039929576818E9 6.011841383256E9 6.001938879382E9 6.000212218742E9 6.000315013784E9 6.006933521202E9 6.00071822337E9 6.01709106099E9 6.024064191054E9 6.000208388184E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.216
Average program size in population (points): 48.168
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 118
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 118
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.082
Error (vector) diversity:			 0.082
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 228936623
--- Timings ---
Current time: 1481338658442 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_dec integer_mult integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup string_yank string_swap string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 165 185 168 138 169 165 165 185 309 168 185 165 138 138 138 138 138 165 138 138 138 185 138 165 165 165)
Population mean number of elite cases: 8.84
Count of perfect (error zero) individuals by case: (165 165 185 168 138 169 165 165 185 309 168 185 165 138 138 138 138 138 165 138 138 138 185 138 165 165 165)
Population mean number of perfect (error zero) cases: 8.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min exec_dup_items boolean_empty exec_yank integer_dec exec_dup (exec_do*times (exec_yank boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush exec_dup (string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.5488260558782E10
Median total errors in population: 69003
Error averages by case: (6.86350511708E8 1.103398542048E9 1.609788892756E9 1.7159146853E9 1.458960061368E9 4.32174775776E8 2.50066715086E8 2.50066793858E8 4386421.216 1995408.132 4.10919664512E8 6.5734527994E8 4.7686031978E8 7.1864336526E7 6.5525796674E7 9.13591039884E8 3.5135973822E8 2659846.816 9.49651476354E8 3.15034895664E8 7.8602547536E7 1.01307779386E8 6.86347929168E8 1.70397965172E8 1.186138141988E9 1.458951452E9 7.8599541914E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.12
Average program size in population (points): 49.168
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.084
Error (vector) diversity:			 0.084
--- Run Statistics ---
Number of program evaluations used so far: 82500
Number of point (instruction) evaluations so far: 230577775
--- Timings ---
Current time: 1481338667782 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 integer_mult in1 100 string_empty integer_mod string_split string_replacefirst)))))
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min boolean_not integer_inc integer_dec exec_yank (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (143 143 167 144 139 149 143 143 167 291 152 167 143 139 139 139 139 139 143 139 139 139 167 139 143 143 143)
Population mean number of elite cases: 8.16
Count of perfect (error zero) individuals by case: (143 143 167 144 139 149 143 143 167 291 152 167 143 139 139 139 139 139 143 139 139 139 167 139 143 143 143)
Population mean number of perfect (error zero) cases: 8.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 7.774021194678E10
Median total errors in population: 69003
Error averages by case: (2.921745648082E9 3.711416696966E9 4.903678621588E9 5.1859892675E9 4.52191337998E9 2.525566569384E9 2.28140245752E9 2.281404445712E9 2.004407992788E9 2.002004715386E9 2.495368032568E9 2.873246070844E9 2.590547858116E9 2.07452306664E9 2.06777855464E9 3.330645459048E9 2.413202218678E9 2.002812453956E9 3.400133087376E9 2.364815965906E9 2.081868497546E9 2.10663092412E9 2.921707364114E9 2.185107283458E9 3.888750752118E9 4.521797603086E9 2.08174695966E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.528
Average program size in population (points): 48.442
Average percent parens in population: 0.145
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 96
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 96
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 232190286
--- Timings ---
Current time: 1481338677064 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_dec exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod exec_empty string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_yank string_swap string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty))) ())
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (167 167 184 172 130 171 167 167 184 301 169 184 167 130 130 130 130 130 167 130 130 130 184 130 167 168 167)
Population mean number of elite cases: 8.71
Count of perfect (error zero) individuals by case: (167 167 184 172 130 171 167 167 184 301 169 184 167 130 130 130 130 130 167 130 130 130 184 130 167 168 167)
Population mean number of perfect (error zero) cases: 8.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min exec_dup_items boolean_not boolean_empty exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt)) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 4.5811242683996E10
Median total errors in population: 69003
Error averages by case: (2.000417510932E9 2.000667104482E9 2.000971321474E9 2.00103523153E9 2.000886445216E9 8.90183322792E8 2.000153642534E9 2.000153663766E9 1.2727805054E7 4023050.214 2.000250680174E9 1.947011794178E9 2.00029045755E9 2.000046178476E9 2.00004317607E9 2.000558336798E9 2.000216438992E9 3.75914189412E8 2.000576785586E9 2.00019515918E9 2.000052368172E9 2.00006627019E9 2.000416303762E9 2.000107962972E9 2.000717925296E9 2.000881822304E9 5.7267773689E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.74
Average program size in population (points): 47.578
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.062
Error (vector) diversity:			 0.062
--- Run Statistics ---
Number of program evaluations used so far: 83500
Number of point (instruction) evaluations so far: 233770926
--- Timings ---
Current time: 1481338686332 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_dec exec_dup (exec_yank integer_add (string_yank boolean_shove exec_dup integer_gt in2 integer_mult 100 integer_mult in1 100 integer_mod exec_empty)))
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min integer_min integer_inc exec_yank integer_dec integer_dec exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (159 160 180 163 138 162 159 159 180 302 163 180 159 138 138 138 138 138 159 138 138 138 180 138 159 160 159)
Population mean number of elite cases: 8.65
Count of perfect (error zero) individuals by case: (159 160 180 163 138 162 159 159 180 302 163 180 159 138 138 138 138 138 159 138 138 138 180 138 159 160 159)
Population mean number of perfect (error zero) cases: 8.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 8.364289579002E9
Median total errors in population: 69003
Error averages by case: (2.39382359036E8 6.16462497682E8 1.30939170246E9 1.487261924892E9 1.076319431144E9 9.5274573316E7 3.2124782756E7 3.2128880148E7 16797.5 5962.962 8.6193323136E7 2.19584061996E8 1.15902429134E8 2747923.678 2301176.7 4.23331148532E8 6.3197712176E7 15347.046 4.57182107538E8 5.089340616E7 3294319.472 5413397.852 2.39305242168E8 1.5066631316E7 7.12126672288E8 1.0761030451E9 3262722.814)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.378
Average program size in population (points): 48.332
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.094
Error (vector) diversity:			 0.094
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 235368660
--- Timings ---
Current time: 1481338695007 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min string_yank integer_inc integer_dec integer_dec integer_mult exec_yank (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap)) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt 100 in2 integer_mult in1 100 string_empty integer_mod exec_empty string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 173 186 176 136 172 169 169 186 308 174 186 169 136 136 136 136 136 169 136 136 136 186 136 169 169 169)
Population mean number of elite cases: 8.92
Count of perfect (error zero) individuals by case: (169 173 186 176 136 172 169 169 186 308 174 186 169 136 136 136 136 136 169 136 136 136 186 136 169 169 169)
Population mean number of perfect (error zero) cases: 8.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min integer_min boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add exec_dup (string_substring integer_gt string_swap)) string_flush integer_pop exec_dup (string_dup string_butlast boolean_dup exec_dup (string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 4.8240889550348E10
Median total errors in population: 69003
Error averages by case: (2.010490498206E9 2.011964861838E9 2.018698850342E9 2.020584199616E9 2.029682728986E9 2.003812409968E9 2.002611089016E9 2.002812143536E9 1.2725453318E7 2050797.188 2.004298635672E9 2.006407364822E9 2.005276667778E9 2.001313199288E9 2.001568979212E9 2.019998489984E9 2.007005182634E9 4692457.454 2.015652266898E9 2.006908676338E9 2.00244940777E9 2.003020184224E9 2.006738481516E9 2.004352254494E9 2.015752297362E9 2.019200308666E9 2.000821664222E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.694
Average program size in population (points): 48.56
Average percent parens in population: 0.142
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 84500
Number of point (instruction) evaluations so far: 236985311
--- Timings ---
Current time: 1481338704233 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_rot integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_rot integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_rot integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))))
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (152 157 173 154 130 160 152 152 173 292 157 173 152 130 130 130 130 130 152 130 130 130 173 130 152 152 152)
Population mean number of elite cases: 8.26
Count of perfect (error zero) individuals by case: (152 157 173 154 130 160 152 152 173 292 157 173 152 130 130 130 130 130 152 130 130 130 173 130 152 152 152)
Population mean number of perfect (error zero) cases: 8.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_empty} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_substring} {:close 0, :instruction integer_gt} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_flush} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction string_butlast} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_substring} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not integer_pop exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max string_replacefirst))))
Partial simplification: (integer_min exec_dup_items boolean_empty exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_dec boolean_dup_items boolean_stackdepth integer_add boolean_not exec_dup (string_substring integer_gt string_swap) string_parse_to_chars) string_flush integer_pop exec_dup (string_yank string_dup string_butlast boolean_dup exec_dup (integer_swap string_substring integer_mult 100 in2 integer_mult in1 100 string_empty integer_mult string_split integer_max))))
Errors: [30 7 8 6 70 10 1 5 8 10 0 8 3 13 12 57 36 9 39 34 14 17 8 24 12 8 1]
Total: 450
Mean: 16.666666
Genome size: 43
Size: 49
Percent parens: 0.122
--- Population Statistics ---
Average total errors in population: 1.4122693882E7
Median total errors in population: 30096
Error averages by case: (626145.978 999269.0 1455872.762 1551864.304 1331534.654 393183.938 229122.192 229298.168 5831.642 3597.418 374608.684 596667.146 434431.636 68412.366 63597.36 838358.318 324468.41 7591.23 865546.908 292329.902 77074.086 98024.526 622848.32 160947.742 1076310.642 1322153.43 73603.12)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.33
Average program size in population (points): 50.826
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 117
Genome diversity (% unique Plush genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.076
Error (vector) diversity:			 0.076
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 238540583
--- Timings ---
Current time: 1481338713456 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_rot integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best partial simplification: (integer_rot integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 30096
Lexicase best mean error: 1114.6666
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction string_empty} {:close 0, :instruction integer_mod} {:close 0, :instruction string_split} {:close 0, :instruction exec_empty} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_rot integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best partial simplification: (integer_rot integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt integer_mult 100 in2 integer_mult in1 100 string_empty integer_mod string_split exec_empty string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 198 0 0 0 0 0 0 0 0 990 2475 2178 1584 7227 0 2574 4554 4554 0 3762 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 30096
Zero cases best mean error: 1114.6666
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (149 151 169 151 138 153 149 149 169 292 151 169 149 138 138 138 138 138 149 138 138 138 169 138 149 149 149)
Population mean number of elite cases: 8.29
Count of perfect (error zero) individuals by case: (149 151 169 151 138 153 149 149 169 292 151 169 149 138 138 138 138 138 149 138 138 138 169 138 149 149 149)
Population mean number of perfect (error zero) cases: 8.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max)))) ())
Errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Total: 304
Mean: 11.259259
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 6.2257102119748E10
Median total errors in population: 30096
Error averages by case: (2.235790255334E9 2.608797535688E9 3.295121474374E9 3.471571395604E9 3.063925967518E9 2.093621767018E9 2.031431125834E9 2.031431262034E9 2.000014703102E9 1.99600720403E9 2.084656311868E9 2.216305476358E9 2.113942597914E9 2.002637727202E9 2.002198607574E9 2.417503313674E9 2.061938036326E9 2.000010491864E9 2.451078792682E9 2.049820793902E9 2.003151564214E9 2.005209927898E9 2.235787646276E9 2.014640550406E9 2.70344051263E9 3.06391865299E9 2.003148425434E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.642
Average program size in population (points): 50.098
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.102
Error (vector) diversity:			 0.102
--- Run Statistics ---
Number of program evaluations used so far: 85500
Number of point (instruction) evaluations so far: 240089291
--- Timings ---
Current time: 1481338722629 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min string_yank integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 304
Lexicase best mean error: 11.259259
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_mult exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 304
Zero cases best mean error: 11.259259
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (168 172 182 170 136 174 168 168 182 311 168 182 168 136 136 136 136 136 168 136 136 136 182 136 168 168 168)
Population mean number of elite cases: 8.85
Count of perfect (error zero) individuals by case: (168 172 182 170 136 174 168 168 182 311 168 182 168 136 136 136 136 136 168 136 136 136 182 136 168 168 168)
Population mean number of perfect (error zero) cases: 8.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Total: 304
Mean: 11.259259
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 3674151.246
Median total errors in population: 697
Error averages by case: (170936.948 147552.378 218191.25 241660.102 478865.204 54650.8 48273.458 53371.378 5798.012 4151.118 68422.21 85579.634 82563.13 47524.714 60191.508 387872.682 166549.776 27955.194 243708.858 174785.012 90969.38 105468.65 89251.364 132309.492 214607.112 248664.22 24277.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 45.078
Average program size in population (points): 52.648
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 149
Genome diversity (% unique Plush genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 149
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.086
Error (vector) diversity:			 0.086
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 241651791
--- Timings ---
Current time: 1481338731772 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 304
Lexicase best mean error: 11.259259
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank exec_yank integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 304
Zero cases best mean error: 11.259259
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (167 170 180 168 133 171 167 167 180 305 167 180 167 133 133 133 133 134 167 133 133 133 180 133 167 167 167)
Population mean number of elite cases: 8.74
Count of perfect (error zero) individuals by case: (167 170 180 168 133 171 167 167 180 305 167 180 167 133 133 133 133 134 167 133 133 133 180 133 167 167 167)
Population mean number of perfect (error zero) cases: 8.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_dec integer_mult exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))))
Errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Total: 304
Mean: 11.259259
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 5.7999884707634E10
Median total errors in population: 468
Error averages by case: (2.003441597294E9 2.001448093396E9 2.001948596388E9 2.002419533346E9 2.013432478186E9 4.00044055003E9 2.000531555586E9 2.000631593534E9 2.000007139586E9 3.940601627188E9 2.000829968858E9 2.000799226212E9 2.001105498938E9 2.000313632898E9 2.000379089268E9 2.009056976994E9 2.00253899097E9 2.000026534356E9 2.005613761974E9 2.002530204466E9 2.000636435354E9 2.000849145698E9 2.00083426879E9 2.001406387502E9 2.003808790962E9 2.00409980199E9 2.00015322787E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.074
Average program size in population (points): 51.518
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 106
Genome diversity (% unique Plush genomes):	 0.468
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.468
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 86500
Number of point (instruction) evaluations so far: 243151511
--- Timings ---
Current time: 1481338740811 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_swap string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 304
Lexicase best mean error: 11.259259
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (exec_swap (exec_dup (exec_yank integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_max))))
Zero cases best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 304
Zero cases best mean error: 11.259259
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 187 188 188 124 187 183 183 188 312 183 188 183 124 124 124 124 124 183 124 124 124 188 124 183 183 183)
Population mean number of elite cases: 9.03
Count of perfect (error zero) individuals by case: (183 187 188 188 124 187 183 183 188 312 183 188 183 124 124 124 124 124 183 124 124 124 188 124 183 183 183)
Population mean number of perfect (error zero) cases: 9.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Total: 304
Mean: 11.259259
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 418342.808
Median total errors in population: 468
Error averages by case: (17836.544 21566.3 27071.03 28269.322 30333.78 13784.808 9481.824 9600.806 2188.276 1931.27 12377.154 15826.79 13564.822 6606.958 8192.256 28241.67 15749.388 6264.604 21886.518 16874.34 11707.86 12925.878 16230.854 14615.172 23496.396 26365.18 5353.008)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.834
Average program size in population (points): 52.356
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 98
Genome diversity (% unique Plush genomes):	 0.504
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.504
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 244672094
--- Timings ---
Current time: 1481338749466 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not string_dup_items exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min integer_dec exec_dup (string_yank exec_yank integer_add exec_dup (in1 100 in2 integer_mult in1 100 integer_mult integer_max string_replacefirst)))
Lexicase best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 304
Lexicase best mean error: 11.259259
Lexicase best size: 50
Percent parens: 0.140
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not string_dup_items exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (integer_dec exec_swap (exec_dup (exec_yank integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_max))))
Zero cases best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 304
Zero cases best mean error: 11.259259
Zero cases best size: 50
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 191 193 185 129 186 185 185 193 315 185 193 185 129 129 129 129 128 185 129 129 129 193 129 185 185 185)
Population mean number of elite cases: 9.21
Count of perfect (error zero) individuals by case: (185 191 193 185 129 186 185 185 193 315 185 193 185 129 129 129 129 128 185 129 129 129 193 129 185 185 185)
Population mean number of perfect (error zero) cases: 9.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) boolean_xor exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Total: 304
Mean: 11.259259
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 310185.68
Median total errors in population: 468
Error averages by case: (12986.186 17057.812 21379.072 22225.792 20605.23 10012.59 7505.37 7517.826 2156.474 1998.454 9727.054 12636.784 10568.49 5013.452 5918.132 18880.076 10884.278 4129.98 15673.546 11473.254 7911.99 8678.988 12950.262 9856.61 17828.206 20170.498 4439.274)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.772
Average program size in population (points): 51.16
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.084
Error (vector) diversity:			 0.084
--- Run Statistics ---
Number of program evaluations used so far: 87500
Number of point (instruction) evaluations so far: 246158076
--- Timings ---
Current time: 1481338758256 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap)) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_dup exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 304
Lexicase best mean error: 11.259259
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (boolean_dup boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 304
Zero cases best mean error: 11.259259
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (158 159 171 158 133 162 158 158 171 295 158 171 159 133 133 133 133 133 158 133 133 133 171 133 158 158 158)
Population mean number of elite cases: 8.42
Count of perfect (error zero) individuals by case: (158 159 171 158 133 162 158 158 171 295 158 171 159 133 133 133 133 133 158 133 133 133 171 133 158 158 158)
Population mean number of perfect (error zero) cases: 8.42
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_eq integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Partial simplification: (string_eq integer_min exec_dup_items boolean_not exec_yank integer_min integer_min string_yank boolean_not exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))))
Errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Total: 304
Mean: 11.259259
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 354342.354
Median total errors in population: 468
Error averages by case: (14922.214 18855.406 23574.684 24540.88 24131.494 11069.082 8462.222 8506.214 2439.798 2203.39 10915.66 13988.364 11864.806 5866.722 7029.462 22463.442 12892.674 5034.338 18073.062 13701.982 9538.43 10474.034 14332.502 11860.978 20028.906 22545.534 5026.074)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.602
Average program size in population (points): 50.902
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.086
Error (vector) diversity:			 0.086
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 247630653
--- Timings ---
Current time: 1481338767195 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc integer_min integer_min integer_min exec_yank integer_dec integer_dec (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup_items integer_inc integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (153 156 165 153 137 155 153 153 165 293 153 165 154 137 137 137 137 137 153 137 137 137 165 137 153 153 153)
Population mean number of elite cases: 8.33
Count of perfect (error zero) individuals by case: (153 156 165 153 137 155 153 153 165 293 153 165 154 137 137 137 137 137 153 137 137 137 165 137 153 153 153)
Population mean number of perfect (error zero) cases: 8.33
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_take} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_take boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Partial simplification: (integer_min exec_dup_items boolean_not exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap)) boolean_xor integer_pop exec_dup (string_yank string_take boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Total: 304
Mean: 11.259259
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 3823650.64
Median total errors in population: 468
Error averages by case: (180950.68 155171.436 210959.548 228775.884 408698.32 69528.944 64135.468 70288.98 15344.328 12668.31 84376.824 100318.78 98500.956 65714.12 82703.69 328910.408 165027.584 92819.418 241665.26 171849.688 116679.768 127070.28 103780.284 143101.1 211765.304 236663.164 36182.114)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.1
Average program size in population (points): 51.694
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 88500
Number of point (instruction) evaluations so far: 249111832
--- Timings ---
Current time: 1481338776192 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) integer_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap)) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 304
Lexicase best mean error: 11.259259
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction integer_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) integer_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min integer_inc integer_min integer_min integer_min string_yank integer_inc integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup ((exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) integer_stackdepth) boolean_xor integer_pop (string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 304
Zero cases best mean error: 11.259259
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 171 180 169 138 171 169 169 180 313 169 180 172 138 138 138 138 138 169 138 138 138 180 138 169 169 169)
Population mean number of elite cases: 8.90
Count of perfect (error zero) individuals by case: (169 171 180 169 138 171 169 169 180 313 169 180 172 138 138 138 138 138 169 138 138 138 180 138 169 169 169)
Population mean number of perfect (error zero) cases: 8.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_gt exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 5.4002805949224E10
Median total errors in population: 468
Error averages by case: (2.00013642594E9 2.000150116904E9 2.000209028572E9 2.000225263892E9 2.00032561313E9 2.000063967068E9 2.000046204886E9 2.00004830659E9 2.000003641102E9 2.00000277326E9 2.00006858948E9 2.000094062428E9 2.000080090838E9 2.00002411165E9 2.00002724909E9 2.0002375854E9 2.00009698205E9 2.00000896273E9 2.000189399088E9 2.000095877298E9 2.00003875275E9 2.000046486426E9 2.000097680328E9 2.00006418651E9 2.000187893724E9 2.000218002552E9 2.000018695538E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.458
Average program size in population (points): 51.922
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 250630913
--- Timings ---
Current time: 1481338785254 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_gt (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult string_swap string_parse_to_chars) boolean_xor exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 181 191 177 121 178 177 177 191 300 177 191 178 121 121 121 121 121 177 121 121 121 191 121 177 177 178)
Population mean number of elite cases: 8.81
Count of perfect (error zero) individuals by case: (177 181 191 177 121 178 177 177 191 300 177 191 178 121 121 121 121 121 177 121 121 121 191 121 177 177 178)
Population mean number of perfect (error zero) cases: 8.81
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank exec_yank integer_dec integer_dec integer_gt integer_dec exec_swap (exec_dup (string_yank (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 938088.208
Median total errors in population: 468
Error averages by case: (49287.928 31955.082 41294.962 46975.072 159703.338 15299.628 13271.298 14392.738 2132.396 1853.01 18555.768 20917.954 22280.046 8883.882 10788.934 114150.802 38680.234 4854.722 74346.678 39461.466 16060.602 19191.138 21588.102 26247.194 57298.992 62441.508 6174.734)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.582
Average program size in population (points): 51.99
Average percent parens in population: 0.146
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 121
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
--- Run Statistics ---
Number of program evaluations used so far: 89500
Number of point (instruction) evaluations so far: 252157314
--- Timings ---
Current time: 1481338794282 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 177 186 176 131 178 176 176 186 309 176 186 178 131 131 131 131 131 176 131 131 131 186 131 176 176 179)
Population mean number of elite cases: 8.97
Count of perfect (error zero) individuals by case: (176 177 186 176 131 178 176 176 186 309 176 186 178 131 131 131 131 131 176 131 131 131 186 131 176 176 179)
Population mean number of perfect (error zero) cases: 8.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 215819.058
Median total errors in population: 468
Error averages by case: (8972.822 10787.226 13204.24 13716.024 14157.098 7449.59 5428.642 5466.682 2134.05 2009.404 6712.644 8269.6 7223.214 4125.426 4819.154 13308.866 8033.606 3811.732 10689.046 8512.394 6281.234 6798.818 8447.61 7538.49 11527.294 12800.626 3593.526)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.152
Average program size in population (points): 51.672
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.098
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 253658227
--- Timings ---
Current time: 1481338803278 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_shove integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (boolean_shove integer_min boolean_not integer_inc exec_yank integer_min string_yank boolean_not exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup () string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_shove} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_shove integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (164 165 181 164 121 167 164 164 181 289 164 181 169 121 121 121 121 121 164 121 121 121 181 121 164 164 166)
Population mean number of elite cases: 8.40
Count of perfect (error zero) individuals by case: (164 165 181 164 121 167 164 164 181 289 164 181 169 121 121 121 121 121 164 121 121 121 181 121 164 164 166)
Population mean number of perfect (error zero) cases: 8.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take) string_parse_to_chars) exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 4.8022564164222E10
Median total errors in population: 468
Error averages by case: (2.000135286774E9 2.000148583772E9 2.000207245438E9 2.00022343603E9 2.000324054284E9 2.00006291317E9 2.000045357008E9 2.000047479224E9 1.3393067754E7 2182699.19 2.000067558458E9 2.000092802254E9 2.000079012968E9 2.000023700142E9 2.000026945742E9 2.000236522524E9 2.000096313738E9 4221845.008 2.000188093784E9 2.000095335986E9 2.000038573514E9 2.000046280598E9 2.000096399146E9 2.000063852014E9 2.000186353934E9 2.000216307918E9 2.00001814385E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.472
Average program size in population (points): 51.826
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 90500
Number of point (instruction) evaluations so far: 255180965
--- Timings ---
Current time: 1481338812230 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min boolean_not integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_take string_swap)) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 164 173 163 134 167 163 163 173 302 163 173 164 134 134 134 134 134 163 134 134 134 173 134 163 163 165)
Population mean number of elite cases: 8.60
Count of perfect (error zero) individuals by case: (163 164 173 163 134 167 163 163 173 302 163 173 164 134 134 134 134 134 163 134 134 134 173 134 163 163 165)
Population mean number of perfect (error zero) cases: 8.60
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_lt exec_yank exec_yankdup integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_lt exec_yank exec_yankdup integer_min integer_min string_yank boolean_not exec_yank integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 4.8498155824418E10
Median total errors in population: 468
Error averages by case: (2.000015216728E9 2.00001902905E9 2.000023564974E9 2.000024514074E9 2.000024217378E9 2.000012125068E9 2.000008848972E9 2.000008882428E9 1.50473436164E8 1.9982187602E7 2.00001128461E9 2.000014280706E9 2.000012212552E9 2.000006127832E9 2.000007192696E9 2.00002241762E9 2.000013112338E9 3.27350304716E8 2.00001829082E9 2.00001382715E9 2.000009571118E9 2.000010499636E9 2.000014616852E9 2.000011923242E9 2.000020173392E9 2.000022601676E9 2.000005365024E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.028
Average program size in population (points): 51.334
Average percent parens in population: 0.147
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 256687130
--- Timings ---
Current time: 1481338821143 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_min integer_min boolean_not integer_inc integer_dec integer_dec integer_mult integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_yank string_swap string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)))) ())
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 174 183 172 126 175 172 172 183 302 172 183 174 126 126 126 126 126 172 126 126 126 183 126 172 172 174)
Population mean number of elite cases: 8.73
Count of perfect (error zero) individuals by case: (172 174 183 172 126 175 172 172 183 302 172 183 174 126 126 126 126 126 172 126 126 126 183 126 172 172 174)
Population mean number of perfect (error zero) cases: 8.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (exec_dup_items integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_dec integer_gt integer_dec (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult (string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 1125804.042
Median total errors in population: 468
Error averages by case: (61900.522 34488.562 42097.916 47456.632 169525.382 17826.998 17913.346 19912.53 2357.488 1945.942 23582.028 23994.14 28167.594 14202.594 17355.352 135907.234 55808.578 6035.142 87382.358 57820.166 26075.646 31052.898 24642.802 41261.814 62920.898 65473.69 8695.79)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.184
Average program size in population (points): 51.672
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.094
Error (vector) diversity:			 0.094
--- Run Statistics ---
Number of program evaluations used so far: 91500
Number of point (instruction) evaluations so far: 258209189
--- Timings ---
Current time: 1481338830201 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove exec_yank integer_dec exec_yank integer_dec (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (169 170 175 169 134 170 169 169 174 307 169 175 170 134 134 134 134 134 169 134 134 134 175 134 169 169 169)
Population mean number of elite cases: 8.75
Count of perfect (error zero) individuals by case: (169 170 175 169 134 170 169 169 174 307 169 175 170 134 134 134 134 134 169 134 134 134 175 134 169 169 169)
Population mean number of perfect (error zero) cases: 8.75
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_take string_swap) integer_pop exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 6896661.584
Median total errors in population: 468
Error averages by case: (302225.516 288791.092 393791.826 424182.426 657263.046 134413.246 113882.588 121872.706 11958.628 8030.246 153231.854 189458.302 176675.614 102210.944 147198.312 594590.244 298119.006 182769.002 399320.186 331977.662 249053.742 274921.344 195793.27 298382.438 370397.568 419083.172 57067.604)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.972
Average program size in population (points): 51.43
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 259704488
--- Timings ---
Current time: 1481338839309 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (exec_yank integer_min integer_min string_yank integer_inc string_contains integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_yank integer_add boolean_stackdepth integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (167 168 182 167 129 167 167 167 182 296 167 182 169 129 129 129 129 129 167 129 129 129 182 129 167 167 167)
Population mean number of elite cases: 8.64
Count of perfect (error zero) individuals by case: (167 168 182 167 129 167 167 167 182 296 167 182 169 129 129 129 129 129 167 129 129 129 182 129 167 167 167)
Population mean number of perfect (error zero) cases: 8.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_frominteger integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc string_frominteger integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 4.804513329066E10
Median total errors in population: 468
Error averages by case: (2.000012146278E9 2.000014899068E9 2.000018313394E9 2.000019012524E9 2.000019000496E9 2.000009203318E9 2.000007268602E9 2.000007305018E9 1.2542395054E7 2200139.32 2.000009113646E9 2.000011372738E9 2.000009824442E9 2.000005052546E9 2.000005654154E9 2.000016976458E9 2.000010202044E9 3.011678892E7 2.000014486566E9 2.000010525952E9 2.0000071684E9 2.000007825226E9 2.000011625086E9 2.000008939552E9 2.000015823146E9 2.000017628582E9 2.00000460013E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.578
Average program size in population (points): 50.894
Average percent parens in population: 0.147
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 92500
Number of point (instruction) evaluations so far: 261194508
--- Timings ---
Current time: 1481338848130 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not exec_yank integer_dec integer_dec integer_gt exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 180 184 176 120 176 176 176 184 296 176 184 176 120 120 120 120 120 176 120 120 120 184 120 176 176 176)
Population mean number of elite cases: 8.70
Count of perfect (error zero) individuals by case: (176 180 184 176 120 176 176 176 184 296 176 184 176 120 120 120 120 120 176 120 120 120 184 120 176 176 176)
Population mean number of perfect (error zero) cases: 8.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_dec integer_gt exec_yank exec_swap (exec_dup ((exec_yank integer_add exec_dup ()) boolean_xor exec_dup (string_yank string_dup boolean_shove boolean_eq (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 481812.488
Median total errors in population: 468
Error averages by case: (20670.122 23607.988 29343.014 30623.522 35854.992 15253.288 10937.544 11142.392 2619.656 2285.164 14028.326 17545.91 15358.208 8126.688 10070.384 33614.56 18979.0 8356.274 25326.224 20368.92 14470.016 15921.668 17972.872 17825.044 26109.674 29008.994 6392.044)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.44
Average program size in population (points): 50.76
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 262684848
--- Timings ---
Current time: 1481338857194 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_gt exec_yank integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 182 185 179 114 181 179 179 185 294 179 185 179 114 114 114 114 114 179 114 114 114 185 114 179 179 179)
Population mean number of elite cases: 8.65
Count of perfect (error zero) individuals by case: (179 182 185 179 114 181 179 179 185 294 179 185 179 114 114 114 114 114 179 114 114 114 185 114 179 179 179)
Population mean number of perfect (error zero) cases: 8.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 4.8122028625142E10
Median total errors in population: 468
Error averages by case: (2.003496202942E9 2.001471664964E9 2.001976994296E9 2.002452800888E9 2.013591994946E9 2.000450501086E9 2.000544804436E9 2.000646922012E9 2.4142143622E7 4004284.774 2.000847448712E9 2.00081511028E9 2.001127106264E9 2.000325175426E9 2.000393538468E9 2.009184147306E9 2.002589528898E9 3.36908556E7 2.005692536768E9 2.002582673546E9 2.000659095234E9 2.000876460474E9 2.000850600622E9 2.001443242678E9 2.003860817798E9 2.004152784874E9 2.000159188228E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.744
Average program size in population (points): 51.216
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 93500
Number of point (instruction) evaluations so far: 264173223
--- Timings ---
Current time: 1481338866271 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_shove boolean_not integer_inc integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_shove integer_inc exec_yank integer_dec integer_dec exec_yank integer_dec (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) boolean_xor exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult integer_max)))) ())
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 180 192 179 129 179 179 179 192 310 179 192 179 129 129 129 129 129 179 129 129 129 192 129 179 179 179)
Population mean number of elite cases: 9.03
Count of perfect (error zero) individuals by case: (179 180 192 179 129 179 179 179 192 310 179 192 179 129 129 129 129 129 179 129 129 129 192 129 179 179 179)
Population mean number of perfect (error zero) cases: 9.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap)) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 1559257.43
Median total errors in population: 468
Error averages by case: (62738.944 108091.066 171425.158 185589.136 155146.16 37289.47 20891.172 20974.924 2520.152 2243.43 34866.774 58649.062 41088.72 8385.208 9239.418 92508.6 32610.216 5697.716 91781.016 30721.952 12423.96 14418.744 61642.892 19457.472 118615.284 152429.62 7811.164)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.05
Average program size in population (points): 51.58
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.09
Error (vector) diversity:			 0.09
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 265681019
--- Timings ---
Current time: 1481338875113 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_rot integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_rot integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add integer_mult exec_dup (string_take string_swap) string_parse_to_chars) integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_rot} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_rot integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_rot integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 171 178 170 126 170 170 170 179 298 170 178 170 126 126 126 126 126 170 126 126 126 178 126 170 170 170)
Population mean number of elite cases: 8.62
Count of perfect (error zero) individuals by case: (170 171 178 170 126 170 170 170 179 298 170 178 170 126 126 126 126 126 170 126 126 126 178 126 170 170 170)
Population mean number of perfect (error zero) cases: 8.62
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 2611400.162
Median total errors in population: 468
Error averages by case: (142398.828 60744.058 71560.314 84559.408 469180.12 28305.662 34021.91 39072.798 3579.23 2784.052 44524.96 40815.738 54584.482 30438.314 39323.608 382602.11 140573.002 12651.896 210254.33 149566.096 64883.824 78760.03 41919.846 105896.188 130409.036 132016.368 15973.954)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.438
Average program size in population (points): 51.99
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.638
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.638
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 94500
Number of point (instruction) evaluations so far: 267202575
--- Timings ---
Current time: 1481338884095 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_empty) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap)) boolean_xor exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_empty} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_empty) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take) string_empty) boolean_xor exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 173 178 173 134 173 172 172 178 309 172 178 172 134 134 134 134 134 172 134 134 134 178 134 172 172 172)
Population mean number of elite cases: 8.86
Count of perfect (error zero) individuals by case: (172 173 178 173 134 173 172 172 178 309 172 178 172 134 134 134 134 134 172 134 134 134 178 134 172 172 172)
Population mean number of perfect (error zero) cases: 8.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_gt integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_take string_swap string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 1.3594960617378E10
Median total errors in population: 468
Error averages by case: (4.84023722816E8 9.06196661106E8 1.49873813439E9 1.632158160844E9 1.385387017966E9 2.59877644566E8 1.2569240802E8 1.25794556276E8 587250.386 209089.54 2.43412352896E8 4.54473920598E8 2.96898739966E8 4.0762153902E7 6.7349945262E7 1.174329989214E9 3.28648183062E8 1.7536476112E7 7.46419355062E8 3.77282696846E8 1.49722930454E8 1.9080497363E8 4.81378165676E8 2.6325614503E8 1.00011432238E9 1.316958451964E9 2.6947169414E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.562
Average program size in population (points): 50.944
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 268719470
--- Timings ---
Current time: 1481338893164 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove boolean_not integer_inc exec_yank integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_shove} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min integer_shove boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min integer_inc exec_yank integer_min integer_shove boolean_not integer_inc exec_yank integer_dec integer_dec (exec_dup (string_yank exec_yank integer_add boolean_not () boolean_xor string_yank boolean_shove boolean_eq (in1 100 in2 integer_mult in1 99 integer_mult integer_max))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 177 189 179 114 180 177 177 189 295 177 189 177 114 114 114 114 114 177 114 114 114 189 114 177 177 177)
Population mean number of elite cases: 8.64
Count of perfect (error zero) individuals by case: (177 177 189 179 114 180 177 177 189 295 177 189 177 114 114 114 114 114 177 114 114 114 189 114 177 177 177)
Population mean number of perfect (error zero) cases: 8.64
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 1.27311284906E8
Median total errors in population: 468
Error averages by case: (5079106.354 9420303.662 1.5501633674E7 1.6868558012E7 1.3744378472E7 2745663.652 1347911.19 1349917.978 9972.324 4992.138 2577072.334 4763591.306 3133887.028 275963.31 250534.088 7455052.454 2136040.928 11557.556 7786656.57 1861464.344 322467.312 442498.518 5041758.672 849233.808 1.0389159966E7 1.363986953E7 302039.726)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.82
Average program size in population (points): 51.326
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.634
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.634
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 95500
Number of point (instruction) evaluations so far: 270242446
--- Timings ---
Current time: 1481338902098 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_gt integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec (exec_dup (exec_do*times (exec_yank integer_add boolean_not (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (172 172 185 173 119 173 172 172 185 296 172 185 172 119 119 119 119 119 172 119 119 119 185 119 172 172 172)
Population mean number of elite cases: 8.58
Count of perfect (error zero) individuals by case: (172 172 185 173 119 173 172 172 185 296 172 185 172 119 119 119 119 119 172 119 119 119 185 119 172 172 172)
Population mean number of perfect (error zero) cases: 8.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank string_reverse exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_gt exec_yank exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 459915.474
Median total errors in population: 468
Error averages by case: (19785.036 23459.412 29143.278 30378.77 32596.308 13879.094 10925.872 11088.576 2867.908 2504.604 13949.714 17496.126 15209.168 8032.098 9607.52 30107.138 17565.602 7065.054 23956.096 18573.106 13009.346 14251.394 17917.116 16092.094 25499.968 28433.404 6521.672)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.326
Average program size in population (points): 50.806
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 271746869
--- Timings ---
Current time: 1481338911025 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not exec_yank integer_min integer_min integer_min string_yank boolean_not string_contains integer_dec integer_gt integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (exec_dup_items boolean_not integer_inc integer_min integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult string_take string_swap boolean_stackdepth) boolean_xor integer_pop (string_dup boolean_shove boolean_eq exec_dup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (165 165 177 168 126 166 165 165 177 293 165 177 165 126 126 126 126 126 165 126 126 126 177 126 165 165 165)
Population mean number of elite cases: 8.49
Count of perfect (error zero) individuals by case: (165 165 177 168 126 166 165 165 177 293 165 177 165 126 126 126 126 126 165 126 126 126 177 126 165 165 165)
Population mean number of perfect (error zero) cases: 8.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_rest integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min exec_dup_items exec_yank integer_min integer_min integer_min boolean_not integer_inc integer_dec integer_dec integer_gt exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 5.9476100222E7
Median total errors in population: 468
Error averages by case: (3450178.36 1453961.406 1955323.608 2426649.222 1.344971214E7 445763.304 535402.798 635754.54 8127.832 4447.588 834489.77 803905.32 1110534.594 317915.57 384630.848 9073916.568 2548854.726 32313.092 5624409.41 2540991.164 644765.572 858228.206 839014.286 1416222.484 3816835.98 4107981.292 155770.542)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.838
Average program size in population (points): 51.352
Average percent parens in population: 0.148
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.62
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.62
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 96500
Number of point (instruction) evaluations so far: 273253383
--- Timings ---
Current time: 1481338919900 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (exec_stackdepth string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (exec_stackdepth string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_stackdepth} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (exec_stackdepth string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (exec_stackdepth string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 183 198 183 118 183 183 183 197 299 183 198 183 118 118 118 118 118 183 118 118 118 198 118 183 183 183)
Population mean number of elite cases: 8.93
Count of perfect (error zero) individuals by case: (183 183 198 183 118 183 183 183 197 299 183 198 183 118 118 118 118 118 183 118 118 118 198 118 183 183 183)
Population mean number of perfect (error zero) cases: 8.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 2855420.91
Median total errors in population: 468
Error averages by case: (134436.236 145890.588 206190.464 220373.754 328394.17 61509.654 44034.032 46256.696 3039.598 2354.094 65921.838 91444.688 77376.708 25213.3 31364.06 262825.868 105816.29 10271.032 187555.028 109899.274 48433.594 58088.188 95040.526 77815.73 184500.912 214129.976 17244.612)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 44.188
Average program size in population (points): 51.826
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 274788817
--- Timings ---
Current time: 1481338928990 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_inc exec_yank integer_dec integer_gt integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (163 163 170 163 140 163 163 163 146 277 163 170 163 140 140 140 140 139 163 140 140 140 170 140 163 163 163)
Population mean number of elite cases: 8.58
Count of perfect (error zero) individuals by case: (163 163 170 163 140 163 163 163 146 277 163 170 163 140 140 140 140 139 163 140 140 140 170 140 163 163 163)
Population mean number of perfect (error zero) cases: 8.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 6.167409926E7
Median total errors in population: 468
Error averages by case: (3560105.102 1576516.92 2130555.282 2616533.596 1.3727771196E7 491978.134 568072.63 670110.902 8550.0 4614.794 885965.784 877269.642 1171824.51 331087.94 398153.774 9266393.036 2620240.148 28939.214 5781243.38 2609290.292 663572.452 882808.276 915530.35 1456056.12 3973102.446 4291396.778 166416.562)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.776
Average program size in population (points): 50.264
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.636
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.636
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
--- Run Statistics ---
Number of program evaluations used so far: 97500
Number of point (instruction) evaluations so far: 276276379
--- Timings ---
Current time: 1481338938035 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min string_parse_to_chars exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take integer_dup_items) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min string_parse_to_chars exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take integer_dup_items) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_parse_to_chars} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction integer_dup_items} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min string_parse_to_chars exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take integer_dup_items) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min string_parse_to_chars exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take integer_dup_items) boolean_stackdepth) boolean_xor exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (170 169 177 170 146 169 170 170 150 292 170 177 170 146 146 146 146 146 170 146 146 146 177 146 170 170 170)
Population mean number of elite cases: 8.94
Count of perfect (error zero) individuals by case: (170 169 177 170 146 169 170 170 150 292 170 177 170 146 146 146 146 146 170 146 146 146 177 146 170 170 170)
Population mean number of perfect (error zero) cases: 8.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4.6502066470942E10
Median total errors in population: 468
Error averages by case: (2.000109662492E9 2.000123838792E9 2.000190269464E9 2.000208872222E9 2.000300746028E9 2.00004250836E9 2.000030151726E9 2.000032189982E9 7828161.714 2197701.656 2.000047381874E9 2.000068592056E9 2.00005726091E9 1.36860101351E9 2.000019448448E9 2.00020616777E9 2.000075448236E9 2.04863369482E8 2.00016114137E9 2.00007477626E9 2.000028708044E9 2.000034751898E9 2.000071901482E9 2.000048698248E9 2.000161649428E9 2.000195609116E9 9.16286450374E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.176
Average program size in population (points): 50.742
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 277800300
--- Timings ---
Current time: 1481338947317 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc exec_yank integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap)) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 199 211 199 117 199 200 200 166 270 200 211 200 117 117 117 117 116 200 117 117 117 211 117 200 200 200)
Population mean number of elite cases: 9.27
Count of perfect (error zero) individuals by case: (200 199 211 199 117 199 200 200 166 270 200 211 200 117 117 117 117 116 200 117 117 117 211 117 200 200 200)
Population mean number of perfect (error zero) cases: 9.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))))
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1039903.484
Median total errors in population: 468
Error averages by case: (58145.524 27328.376 32478.922 37448.148 163246.862 13693.182 16092.35 18202.294 2709.622 2285.604 20593.938 19230.538 24839.37 14208.796 17519.984 131294.052 54058.35 8469.794 82517.698 56224.862 26391.822 31146.42 19709.0 40676.59 55990.984 57112.272 8288.13)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.568
Average program size in population (points): 51.132
Average percent parens in population: 0.151
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.11
Error (vector) diversity:			 0.11
--- Run Statistics ---
Number of program evaluations used so far: 98500
Number of point (instruction) evaluations so far: 279329059
--- Timings ---
Current time: 1481338956424 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min boolean_invert_first_then_and integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank string_reverse exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min boolean_invert_first_then_and integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank string_reverse exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min boolean_invert_first_then_and integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank string_reverse exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt string_reverse exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 199 204 199 123 199 199 199 176 297 199 204 199 123 123 123 123 122 199 123 123 123 204 123 199 199 199)
Population mean number of elite cases: 9.40
Count of perfect (error zero) individuals by case: (199 199 204 199 123 199 199 199 176 297 199 204 199 123 123 123 123 122 199 123 123 123 204 123 199 199 199)
Population mean number of perfect (error zero) cases: 9.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 2242886.718
Median total errors in population: 468
Error averages by case: (106329.77 117206.582 181710.78 199989.518 295638.134 38938.96 28320.98 30397.74 2391.218 2040.954 44774.26 63919.212 54404.272 15831.352 18606.534 202073.328 73277.514 5705.446 157050.28 72625.51 27587.798 33471.008 67089.866 47088.362 156418.402 189497.15 10501.788)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.154
Average program size in population (points): 50.668
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 280839089
--- Timings ---
Current time: 1481338965458 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (exec_dup_items boolean_not integer_min integer_min boolean_not string_contains integer_dec integer_gt exec_yank integer_dec (exec_dup (exec_yank integer_add integer_mult string_take boolean_stackdepth boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc string_contains integer_dec integer_gt integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) boolean_stackdepth) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (177 177 192 177 124 178 177 177 164 276 177 192 177 124 124 124 124 124 177 124 124 124 192 124 177 177 177)
Population mean number of elite cases: 8.76
Count of perfect (error zero) individuals by case: (177 177 192 177 124 178 177 177 164 276 177 192 177 124 124 124 124 124 177 124 124 124 192 124 177 177 177)
Population mean number of perfect (error zero) cases: 8.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 2650173.564
Median total errors in population: 468
Error averages by case: (129610.196 141401.648 198501.25 214339.046 315606.964 58583.212 42055.054 44170.23 2919.424 2299.878 63269.488 87380.482 74355.958 21657.834 24471.948 228159.234 91476.588 7888.224 181338.882 90138.004 35105.78 42407.09 90851.084 59372.508 178706.544 207794.132 16312.882)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.15
Average program size in population (points): 50.844
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.118
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 99500
Number of point (instruction) evaluations so far: 282352131
--- Timings ---
Current time: 1481338974377 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) integer_mult integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) integer_mult integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) integer_mult integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_min integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_dec exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup) integer_mult exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 173 183 173 137 174 173 173 152 280 173 183 173 137 137 137 137 137 173 137 137 137 183 137 173 173 173)
Population mean number of elite cases: 8.86
Count of perfect (error zero) individuals by case: (173 173 183 173 137 174 173 173 152 280 173 183 173 137 137 137 137 137 173 137 137 137 183 137 173 173 173)
Population mean number of perfect (error zero) cases: 8.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 4.6527025650078E10
Median total errors in population: 468
Error averages by case: (2.00025380779E9 2.000281560898E9 2.000360088482E9 2.000376606742E9 2.000526794306E9 2.000151808772E9 2.0001135507E9 2.00011727182E9 8008708.8 2207928.316 2.00015305186E9 2.000200420322E9 2.000170590556E9 1.369337208266E9 2.000200649792E9 2.000605749914E9 2.000321297642E9 2.05333764744E8 2.000322272732E9 2.000394899954E9 2.000391687794E9 2.000421756026E9 2.000206130024E9 2.000412926234E9 2.000312631158E9 2.000350650702E9 9.35491835732E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.516
Average program size in population (points): 50.062
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 283869698
--- Timings ---
Current time: 1481338983483 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_frominteger integer_dec integer_dec boolean_swap exec_yank integer_fromboolean exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) integer_dec) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove in1 exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_frominteger integer_dec integer_dec boolean_swap exec_yank integer_fromboolean exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) integer_dec) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove in1 exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction integer_dec} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc string_frominteger integer_dec integer_dec boolean_swap exec_yank integer_fromboolean exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) integer_dec) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove in1 exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc string_frominteger integer_dec integer_fromboolean exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) integer_dec) boolean_xor exec_dup (string_yank string_dup boolean_shove in1 exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (190 190 199 190 130 190 190 190 152 273 190 199 190 130 130 130 130 130 190 130 130 130 199 130 190 190 190)
Population mean number of elite cases: 9.20
Count of perfect (error zero) individuals by case: (190 190 199 190 130 190 190 190 152 273 190 199 190 130 130 130 130 130 190 130 130 130 199 130 190 190 190)
Population mean number of perfect (error zero) cases: 9.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 373081.28
Median total errors in population: 468
Error averages by case: (15191.764 18662.912 23394.268 24380.832 28564.0 10840.492 8297.364 8376.85 2140.104 1897.572 10768.236 13781.692 11759.712 6330.464 7810.716 26598.816 14893.272 6046.72 18542.5 15945.952 11107.152 12248.736 14127.108 13829.76 20135.56 22613.528 4795.198)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.122
Average program size in population (points): 49.672
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.098
Error (vector) diversity:			 0.1
--- Run Statistics ---
Number of program evaluations used so far: 100500
Number of point (instruction) evaluations so far: 285381151
--- Timings ---
Current time: 1481338992725 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 201
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 201
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_rest integer_min exec_dup_items boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 188 200 188 136 188 188 188 152 274 188 200 188 136 136 136 136 136 188 136 136 136 200 136 188 188 188)
Population mean number of elite cases: 9.28
Count of perfect (error zero) individuals by case: (188 188 200 188 136 188 188 188 152 274 188 200 188 136 136 136 136 136 188 136 136 136 200 136 188 188 188)
Population mean number of perfect (error zero) cases: 9.28
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 194462.92
Median total errors in population: 468
Error averages by case: (7947.056 10318.494 12750.388 13224.022 12185.578 7027.832 4891.908 4885.484 1723.0 1603.19 6160.952 7818.044 6625.748 3470.188 4073.066 11447.794 6866.584 3249.438 9450.084 7283.576 5358.292 5806.876 7995.912 6441.458 10717.718 12043.346 3096.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.942
Average program size in population (points): 50.482
Average percent parens in population: 0.150
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 286943468
--- Timings ---
Current time: 1481339001834 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 201
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 202
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 202
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_inc exec_yank exec_yank integer_dec integer_pop exec_yank (exec_dup (exec_yank integer_add (in2 in1 100 in2 integer_mult in1 99 integer_mult integer_max string_replacefirst))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 52
Percent parens: 0.135
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_dec integer_pop exec_yank integer_dec (exec_dup (exec_do*times (exec_yank integer_add string_reverse (string_yank boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 52
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 181 193 181 136 181 181 181 159 282 181 193 181 136 136 136 136 136 181 136 136 136 193 136 181 181 181)
Population mean number of elite cases: 9.10
Count of perfect (error zero) individuals by case: (181 181 193 181 136 181 181 181 159 282 181 193 181 136 136 136 136 136 181 136 136 136 193 136 181 181 181)
Population mean number of perfect (error zero) cases: 9.10
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))))
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5.4000388396732E10
Median total errors in population: 468
Error averages by case: (2.000016341752E9 2.000020067668E9 2.000028036308E9 2.000026085514E9 2.000027035906E9 2.0000123702E9 2.000008990846E9 2.00000906729E9 2.000001997702E9 2.00000170673E9 2.000011665294E9 2.000016054116E9 2.000012714814E9 2.000006147256E9 2.000007490914E9 2.000025056328E9 2.000014238466E9 2.000005622788E9 2.000019876746E9 2.000015152378E9 2.000010544546E9 2.000011615048E9 2.00001647683E9 2.00001311943E9 2.000021583092E9 2.000024195088E9 2.000005143682E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 43.146
Average program size in population (points): 50.798
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 101500
Number of point (instruction) evaluations so far: 288505143
--- Timings ---
Current time: 1481339010397 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 202
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 203
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 203
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_rest integer_min boolean_not boolean_and exec_yank integer_min integer_min string_butlast boolean_not exec_yank integer_dec integer_gt exec_yank integer_dec (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup () string_parse_to_chars) exec_dup (string_yank string_dup exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min string_yank boolean_not integer_inc integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (176 176 187 176 127 176 176 176 152 269 176 187 176 127 127 127 127 127 176 127 127 127 187 127 176 176 176)
Population mean number of elite cases: 8.73
Count of perfect (error zero) individuals by case: (176 176 187 176 127 176 176 176 152 269 176 187 176 127 127 127 127 127 176 127 127 127 187 127 176 176 176)
Population mean number of perfect (error zero) cases: 8.73
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction string_contains} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth string_contains integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth string_contains integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 9.4335047266426E10
Median total errors in population: 468
Error averages by case: (4.000013779786E9 3.8607807933E9 4.000021755012E9 4.000022645372E9 4.000022342366E9 2.431149063202E9 3.101466870228E9 3.561270592094E9 2.006319814528E9 2.001998461512E9 3.641408890898E9 2.94454662139E9 4.000010952494E9 3.328361926586E9 4.00000622604E9 4.000020205644E9 4.000011623862E9 2.187821438084E9 4.000016692042E9 4.000012183526E9 4.000008284102E9 4.000009096796E9 2.986211548658E9 4.000010381354E9 4.000018485394E9 4.00002080645E9 2.283485785706E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.594
Average program size in population (points): 49.11
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.614
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.614
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 289977144
--- Timings ---
Current time: 1481339019435 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 203
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 204
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 204
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_dup_items exec_dup_items boolean_not integer_inc exec_yank exec_do*range (integer_min integer_min string_yank) boolean_not integer_inc boolean_or integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min boolean_dup_items (integer_min string_yank) boolean_not integer_inc integer_dec integer_mult integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 59
Percent parens: 0.153
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_dup_items exec_dup_items boolean_not integer_inc exec_yank exec_do*range (integer_min integer_min string_yank) boolean_not integer_inc boolean_or integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min boolean_dup_items exec_dup_items boolean_not integer_inc exec_yank exec_do*range (integer_min integer_min string_yank) boolean_not integer_inc boolean_or integer_dec integer_dec exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not (string_yank string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 59
Percent parens: 0.153
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 202 209 202 122 202 203 203 167 282 203 209 203 122 122 122 122 122 203 122 122 122 209 122 203 203 203)
Population mean number of elite cases: 9.46
Count of perfect (error zero) individuals by case: (203 202 209 202 122 202 203 203 167 282 203 209 203 122 122 122 122 122 203 122 122 122 209 122 203 203 203)
Population mean number of perfect (error zero) cases: 9.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 163714.878
Median total errors in population: 468
Error averages by case: (7170.122 6937.77 8254.986 8651.972 12367.356 4508.61 3997.908 4117.02 1643.504 1495.176 4776.53 5455.722 5178.776 3488.668 4153.356 11671.524 6999.408 3431.024 8649.612 7449.972 5525.932 5986.996 5558.604 6619.96 8136.834 8735.958 2751.578)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.716
Average program size in population (points): 50.314
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.098
Error (vector) diversity:			 0.098
--- Run Statistics ---
Number of program evaluations used so far: 102500
Number of point (instruction) evaluations so far: 291525065
--- Timings ---
Current time: 1481339028504 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 204
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 205
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 205
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min boolean_not exec_yank string_empty integer_min boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 187 195 187 120 187 187 187 162 274 187 195 187 120 120 120 120 120 187 120 120 120 195 120 187 187 187)
Population mean number of elite cases: 8.93
Count of perfect (error zero) individuals by case: (187 187 195 187 120 187 187 187 162 274 187 195 187 120 120 120 120 120 187 120 120 120 195 120 187 187 187)
Population mean number of perfect (error zero) cases: 8.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_shove} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction integer_dup} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_shove boolean_stackdepth integer_dup integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (boolean_shove boolean_stackdepth integer_dup integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 3747620.444
Median total errors in population: 468
Error averages by case: (147824.852 166546.902 214483.35 227754.284 333655.748 86612.226 63487.098 64644.774 5649.438 4011.09 88343.898 116202.984 99352.194 46594.828 76399.8 313231.3 144012.852 146287.0 196772.39 168917.35 144646.808 157639.096 119651.634 161657.318 198825.474 224861.98 29553.776)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.036
Average program size in population (points): 49.468
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 293052014
--- Timings ---
Current time: 1481339037590 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 205
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 206
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 206
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_replacefirst} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank string_replacefirst integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap)) boolean_xor integer_pop exec_dup (boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_replacefirst} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank string_replacefirst integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank string_replacefirst integer_dec integer_mult integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_swap string_parse_to_chars) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (173 173 179 173 121 173 173 173 140 259 173 179 173 121 121 121 121 121 173 121 121 121 179 121 173 173 173)
Population mean number of elite cases: 8.44
Count of perfect (error zero) individuals by case: (173 173 179 173 121 173 173 173 140 259 173 179 173 121 121 121 121 121 173 121 121 121 179 121 173 173 173)
Population mean number of perfect (error zero) cases: 8.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 4399173.832
Median total errors in population: 468
Error averages by case: (248300.36 91864.512 104002.122 122201.828 644848.798 47594.664 69295.932 81248.268 9036.804 6163.404 83178.366 66629.91 101164.884 79589.754 101078.108 553965.354 260013.518 44655.786 339953.884 274955.934 152038.174 175097.218 68035.256 215486.058 212343.568 208008.328 38423.04)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.646
Average program size in population (points): 49.188
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.14
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 103500
Number of point (instruction) evaluations so far: 294565457
--- Timings ---
Current time: 1481339046816 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 206
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 207
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 207
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_invert_first_then_and boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) exec_dup (string_yank string_dup boolean_invert_first_then_and boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_invert_first_then_and boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not exec_yank integer_dec integer_dec integer_gt integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 194 201 194 128 196 194 194 166 292 194 201 194 128 128 128 128 128 194 128 128 128 201 128 194 194 194)
Population mean number of elite cases: 9.34
Count of perfect (error zero) individuals by case: (194 194 201 194 128 196 194 194 166 292 194 201 194 128 128 128 128 128 194 128 128 128 201 128 194 194 194)
Population mean number of perfect (error zero) cases: 9.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 183368.398
Median total errors in population: 468
Error averages by case: (7674.054 9221.826 11279.39 11735.098 12208.176 5708.092 4561.702 4597.644 1609.414 1484.146 5681.366 7027.886 6128.09 3437.48 4086.404 11502.998 6895.684 3297.896 9171.484 7333.048 5419.648 5873.35 7182.032 6504.34 9859.198 10947.47 2940.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.722
Average program size in population (points): 49.054
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 296105777
--- Timings ---
Current time: 1481339056813 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 207
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 208
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 208
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank integer_inc integer_inc integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_replacefirst} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min string_replacefirst exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_replacefirst boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc exec_yank integer_dec integer_dec exec_yank integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 184 192 184 131 184 185 185 150 274 185 192 185 131 131 131 131 131 185 131 131 131 192 131 185 185 185)
Population mean number of elite cases: 9.05
Count of perfect (error zero) individuals by case: (185 184 192 184 131 184 185 185 150 274 185 192 185 131 131 131 131 131 185 131 131 131 192 131 185 185 185)
Population mean number of perfect (error zero) cases: 9.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 3747037.412
Median total errors in population: 468
Error averages by case: (172555.65 226186.476 340812.444 369533.582 436790.26 81533.05 52268.256 54297.71 2538.996 1977.412 84445.722 128778.58 100490.186 22276.754 24310.266 289555.132 106463.688 5788.242 248899.764 102130.114 34311.234 42316.526 134819.456 62563.978 271858.29 331765.982 17769.662)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.452
Average program size in population (points): 50.108
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 104500
Number of point (instruction) evaluations so far: 297663589
--- Timings ---
Current time: 1481339066350 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 208
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 209
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 209
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc boolean_rot integer_min string_yank boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take) string_parse_to_chars) boolean_xor exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 187 202 187 132 188 187 187 154 273 187 202 187 132 132 132 132 132 187 132 132 132 202 132 187 187 187)
Population mean number of elite cases: 9.20
Count of perfect (error zero) individuals by case: (187 187 202 187 132 188 187 187 154 273 187 202 187 132 132 132 132 132 187 132 132 132 202 132 187 187 187)
Population mean number of perfect (error zero) cases: 9.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 1133653.714
Median total errors in population: 468
Error averages by case: (62293.088 33803.072 40706.866 45959.948 169700.894 17355.028 18485.362 20524.418 2724.6 2175.474 23942.896 23923.318 28477.186 15070.736 18385.216 136486.84 56736.154 7473.512 87596.274 58832.63 27351.878 32329.928 24530.54 42439.762 62421.936 64553.112 9373.046)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.078
Average program size in population (points): 49.604
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 299212848
--- Timings ---
Current time: 1481339075435 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 209
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 210
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 210
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_empty boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc integer_max integer_dec integer_dec integer_gt exec_yank integer_yankdup exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_eq integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min boolean_empty boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_max integer_dec integer_dec exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_eq integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_empty boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc integer_max integer_dec integer_dec integer_gt exec_yank integer_yankdup exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_eq integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min boolean_empty integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_max integer_dec integer_gt integer_yankdup exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_eq integer_mult exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 217 230 217 130 217 217 217 185 301 217 230 217 130 130 130 130 130 217 130 130 130 230 130 217 217 217)
Population mean number of elite cases: 10.16
Count of perfect (error zero) individuals by case: (217 217 230 217 130 217 217 217 185 301 217 230 217 130 130 130 130 130 217 130 130 130 230 130 217 217 217)
Population mean number of perfect (error zero) cases: 10.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.57464428012E8
Median total errors in population: 362
Error averages by case: (6966078.036 1.1078496422E7 1.6127816486E7 1.7189609934E7 1.4784277592E7 4366340.192 2549853.388 2553984.436 51728.916 25369.43 4164141.292 6621021.686 4829032.912 781063.238 755281.866 9402515.118 3670198.512 190436.078 9617818.68 3341519.96 967580.68 1209709.054 6911026.164 1901631.168 1.19372229E7 1.465361064E7 817063.232)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.982
Average program size in population (points): 50.628
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 105500
Number of point (instruction) evaluations so far: 300816619
--- Timings ---
Current time: 1481339084687 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 210
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 211
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 211
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_dup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 54
Percent parens: 0.148
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min integer_inc exec_yank integer_min integer_min integer_min boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 54
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 186 197 186 148 186 186 186 163 301 186 197 186 148 148 148 148 148 186 148 148 148 197 148 186 186 186)
Population mean number of elite cases: 9.53
Count of perfect (error zero) individuals by case: (186 186 197 186 148 186 186 186 163 301 186 197 186 148 148 148 148 148 186 148 148 148 197 148 186 186 186)
Population mean number of perfect (error zero) cases: 9.53
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction string_pop} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min string_pop integer_min string_yank boolean_not integer_inc string_reverse exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc string_reverse exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 999270.83
Median total errors in population: 468
Error averages by case: (56709.19 25307.918 30233.606 35202.862 162520.38 12077.352 14664.538 16781.53 1901.746 1567.876 19028.052 17427.734 23247.762 12895.52 16086.898 130419.592 52722.784 6381.174 81175.73 54878.916 24806.956 29579.608 17887.712 39204.816 54232.73 55221.438 7106.41)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.344
Average program size in population (points): 49.856
Average percent parens in population: 0.153
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.108
Error (vector) diversity:			 0.108
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 302388430
--- Timings ---
Current time: 1481339093757 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 211
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 212
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 212
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min boolean_not integer_min exec_dup (exec_yank integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 52
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (integer_min exec_dup_items integer_inc integer_min integer_min boolean_not integer_inc exec_dup (string_yank exec_yank integer_add string_yank boolean_shove boolean_eq (in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 192 206 192 129 192 192 192 158 273 192 206 192 129 129 129 129 129 192 129 129 129 206 129 192 192 192)
Population mean number of elite cases: 9.29
Count of perfect (error zero) individuals by case: (192 192 206 192 129 192 192 192 158 273 192 206 192 129 129 129 129 129 192 129 129 129 206 129 192 192 192)
Population mean number of perfect (error zero) cases: 9.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 3320750.186
Median total errors in population: 468
Error averages by case: (167590.22 162064.1 225872.76 246694.608 454358.278 66363.91 49502.236 52541.628 2927.612 2185.676 74655.802 99798.12 88773.68 25294.22 28570.278 321895.79 118568.174 6729.702 241727.208 116899.822 41501.566 51065.694 103747.176 74118.544 222795.0 255804.6 18703.782)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.85
Average program size in population (points): 49.462
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 106500
Number of point (instruction) evaluations so far: 303929032
--- Timings ---
Current time: 1481339101885 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 212
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 213
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 213
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_rest integer_min exec_dup_items boolean_not exec_yank integer_min integer_min string_butlast string_yank integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_take string_swap string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_take string_swap string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (181 181 192 181 136 181 181 181 146 271 181 192 181 136 136 136 136 135 181 136 136 136 192 136 181 181 181)
Population mean number of elite cases: 9.05
Count of perfect (error zero) individuals by case: (181 181 192 181 136 181 181 181 146 271 181 192 181 136 136 136 136 135 181 136 136 136 192 136 181 181 181)
Population mean number of perfect (error zero) cases: 9.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5.400298069727E10
Median total errors in population: 468
Error averages by case: (2.00012606337E9 2.000211800032E9 2.000323749992E9 2.000348087488E9 2.000291076738E9 2.00007721989E9 2.000043539452E9 2.00004356989E9 2.00000258661E9 2.000002162104E9 2.000072639828E9 2.000119864614E9 2.000085039074E9 2.000013911864E9 2.000013430016E9 2.000174257146E9 2.000062882954E9 2.000003751414E9 2.000179956744E9 2.000056786396E9 2.000016395916E9 2.000020217042E9 2.000125621068E9 2.00003167203E9 2.00022990399E9 2.000289937286E9 2.000014574322E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.412
Average program size in population (points): 48.932
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 305468914
--- Timings ---
Current time: 1481339111157 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 213
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 214
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 214
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add exec_dup (string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_rest integer_min exec_dup_items boolean_and exec_yank integer_min integer_min string_butlast string_yank integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap)) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (188 188 196 188 135 188 188 188 151 279 188 196 188 135 135 135 135 135 188 135 135 135 196 135 188 188 188)
Population mean number of elite cases: 9.25
Count of perfect (error zero) individuals by case: (188 188 196 188 135 188 188 188 151 279 188 196 188 135 135 135 135 135 188 135 135 135 196 135 188 188 188)
Population mean number of perfect (error zero) cases: 9.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.26060776752E8
Median total errors in population: 468
Error averages by case: (4766397.97 8966120.8 1.4828260718E7 1.614465313E7 1.3432697456E7 2576100.212 1245179.96 1245255.82 8128.88 4173.402 2408573.096 4499261.918 2935715.968 314701.152 379832.008 9056805.706 2539795.79 26474.13 7343572.248 2530707.564 636720.484 849396.248 4765364.75 1406729.12 9873085.338 1.300740697E7 269665.914)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.966
Average program size in population (points): 49.512
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 107500
Number of point (instruction) evaluations so far: 307042695
--- Timings ---
Current time: 1481339120458 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 214
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 215
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 215
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min boolean_not integer_inc integer_dec integer_dec integer_gt exec_yank integer_dec (exec_dup (string_yank exec_do*times (exec_yank integer_add exec_dup (string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank boolean_shove exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_rest integer_min exec_dup_items boolean_not integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (191 190 206 190 138 191 191 191 167 291 191 206 191 138 138 138 138 138 191 138 138 138 206 138 191 191 191)
Population mean number of elite cases: 9.49
Count of perfect (error zero) individuals by case: (191 190 206 190 138 191 191 191 167 291 191 206 191 138 138 138 138 138 191 138 138 138 206 138 191 191 191)
Population mean number of perfect (error zero) cases: 9.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth integer_inc integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))))
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 8192720.796
Median total errors in population: 362
Error averages by case: (322290.132 407988.622 541602.158 574063.52 653620.518 201234.886 140766.664 142766.162 9326.498 5972.154 200903.732 276073.314 226286.156 95454.364 154036.228 619449.844 298509.79 288469.774 420418.582 345622.59 290230.19 317076.836 285060.944 327614.042 457667.198 528373.94 61841.958)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.658
Average program size in population (points): 49.144
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 308617332
--- Timings ---
Current time: 1481339129641 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 215
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 216
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 216
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_rot string_swap) string_parse_to_chars) boolean_xor integer_shove exec_dup (boolean_empty string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not (integer_rot string_swap) string_parse_to_chars) boolean_xor integer_shove exec_dup (boolean_empty string_dup boolean_shove boolean_eq exec_dup (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_rot} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_shove} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (integer_rot string_swap) string_parse_to_chars) boolean_xor integer_shove exec_dup (boolean_empty string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (integer_rot string_swap) string_parse_to_chars) integer_shove exec_dup (boolean_empty string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 192 204 192 128 192 193 193 164 281 193 204 193 128 128 128 128 127 193 128 128 128 204 128 193 193 193)
Population mean number of elite cases: 9.30
Count of perfect (error zero) individuals by case: (193 192 204 192 128 192 193 193 164 281 193 204 193 128 128 128 128 127 193 128 128 128 204 128 193 193 193)
Population mean number of perfect (error zero) cases: 9.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 2413922.232
Median total errors in population: 468
Error averages by case: (103835.68 125888.952 179737.478 192031.338 301729.788 53545.468 33600.764 34544.102 2489.83 1996.834 51945.866 77211.446 60429.916 17770.59 23371.972 248062.278 86423.62 7276.504 150121.99 93164.08 39828.44 48701.27 80376.788 65785.436 147099.576 174247.612 12704.614)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.616
Average program size in population (points): 49.236
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 108500
Number of point (instruction) evaluations so far: 310143123
--- Timings ---
Current time: 1481339138787 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 216
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 217
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 217
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_rest} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_replace} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min boolean_not integer_div boolean_not integer_inc string_split integer_yankdup integer_min integer_min string_yank integer_empty integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (integer_lt exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor string_rest exec_dup (string_yank string_dup boolean_shove string_replace exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (boolean_not integer_inc string_split string_yank integer_empty integer_inc exec_yank integer_dec integer_dec integer_dec exec_swap (exec_dup ((exec_yank integer_add boolean_not (string_take)) boolean_xor string_rest exec_dup (string_dup exec_dup in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 1, :instruction integer_div} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_split} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction string_rest} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_replace} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min boolean_not integer_div boolean_not integer_inc string_split integer_yankdup integer_min integer_min string_yank integer_empty integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (integer_lt exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor string_rest exec_dup (string_yank string_dup boolean_shove string_replace exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min boolean_not integer_div boolean_not integer_inc string_split integer_yankdup integer_min integer_min string_yank integer_empty integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (integer_lt exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor string_rest exec_dup (string_yank string_dup boolean_shove string_replace exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (180 180 191 180 128 180 180 180 147 264 180 191 180 128 128 128 128 127 180 128 128 128 191 128 180 180 180)
Population mean number of elite cases: 8.85
Count of perfect (error zero) individuals by case: (180 180 191 180 128 180 180 180 147 264 180 191 180 128 128 128 128 127 180 128 128 128 191 128 180 180 180)
Population mean number of perfect (error zero) cases: 8.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 227494.438
Median total errors in population: 468
Error averages by case: (9447.94 12038.842 14696.876 15210.666 14154.968 7619.854 5940.536 5946.89 2062.328 1902.18 7404.186 9277.148 7932.78 4211.344 4821.9 13168.488 8128.284 3821.156 11125.102 8516.816 6177.496 6692.848 9475.278 7473.732 12484.8 13934.24 3827.76)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.468
Average program size in population (points): 49.11
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 311680731
--- Timings ---
Current time: 1481339147778 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 217
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 218
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 218
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 50
Percent parens: 0.140
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (exec_dup_items exec_dup (exec_yank integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 50
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (186 186 192 186 153 187 186 186 147 295 186 192 186 153 153 153 153 152 186 153 153 153 192 153 186 186 186)
Population mean number of elite cases: 9.56
Count of perfect (error zero) individuals by case: (186 186 192 186 153 187 186 186 147 295 186 192 186 153 153 153 153 152 186 153 153 153 192 153 186 186 186)
Population mean number of perfect (error zero) cases: 9.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 304232.162
Median total errors in population: 468
Error averages by case: (12872.2 15585.648 19523.066 20375.206 21783.004 9705.19 6940.484 7022.004 1838.078 1527.442 9008.638 11484.266 9853.048 4922.52 6093.63 20331.984 11437.068 5248.522 15748.676 12266.164 8700.652 9565.12 11773.124 10714.664 16928.216 18983.836 3999.712)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.984
Average program size in population (points): 48.638
Average percent parens in population: 0.160
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 109500
Number of point (instruction) evaluations so far: 313261696
--- Timings ---
Current time: 1481339156111 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 218
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 219
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 219
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_empty boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc integer_max integer_shove integer_dec integer_gt exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min boolean_empty boolean_not integer_inc exec_yank integer_min integer_min string_yank integer_inc integer_inc integer_max integer_shove integer_dec integer_gt exec_yank integer_pop integer_gt integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 54
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction integer_shove} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_empty boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc integer_inc integer_max integer_shove integer_dec integer_gt exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (boolean_empty boolean_not integer_max integer_dec integer_gt (exec_dup (exec_yank integer_add (integer_gt in1 100 in2 integer_mult in1 99 integer_mult integer_max string_replacefirst))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 54
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (185 185 191 185 144 185 185 185 144 283 185 191 185 144 144 144 144 144 185 144 144 144 191 144 185 186 185)
Population mean number of elite cases: 9.32
Count of perfect (error zero) individuals by case: (185 185 191 185 144 185 185 185 144 283 185 191 185 144 144 144 144 144 185 144 144 144 191 144 185 186 185)
Population mean number of perfect (error zero) cases: 9.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_stackdepth} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min boolean_stackdepth boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.01325534408E8
Median total errors in population: 468
Error averages by case: (3488892.404 7554876.472 1.4110123172E7 1.5687496146E7 1.2118891698E7 1613747.652 666966.676 668959.796 3678.646 2226.25 1492791.57 3214978.916 1906074.588 99782.054 91486.132 5636629.774 1191001.702 9115.864 5952503.076 1006518.786 125591.314 180453.934 3451736.872 388050.874 8540653.992 1.2014967516E7 107338.532)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.188
Average program size in population (points): 49.002
Average percent parens in population: 0.162
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.11
Error (vector) diversity:			 0.11
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 314859516
--- Timings ---
Current time: 1481339164748 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 219
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 220
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 220
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min exec_dup_items boolean_rot integer_dec exec_yank exec_dup (exec_yank integer_add boolean_not exec_dup string_take exec_dup (string_dup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not exec_yank string_empty boolean_rot integer_min boolean_not integer_inc integer_min integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 199 207 199 133 199 199 199 159 288 199 207 199 133 133 133 133 133 199 133 133 133 207 133 199 199 199)
Population mean number of elite cases: 9.57
Count of perfect (error zero) individuals by case: (199 199 207 199 133 199 199 199 159 288 199 207 199 133 133 133 133 133 199 133 133 133 207 133 199 199 199)
Population mean number of perfect (error zero) cases: 9.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 2512073.332
Median total errors in population: 468
Error averages by case: (123448.698 135250.528 190793.592 206234.706 303609.262 55831.526 39212.308 41206.988 2404.934 1851.08 59608.092 82902.098 70287.286 19294.472 21446.444 217024.132 85423.498 5190.974 173581.072 83611.846 30540.446 37353.908 86256.842 53703.426 171459.946 199833.798 14711.43)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.192
Average program size in population (points): 48.814
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 110500
Number of point (instruction) evaluations so far: 316435842
--- Timings ---
Current time: 1481339173722 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 220
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 221
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 221
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_rest} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min string_rest exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_or integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup_times exec_dup (string_yank string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min string_rest exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not boolean_or integer_dec integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup_times exec_dup (string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction string_rest} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_or} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min string_rest exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_or integer_dec integer_dec integer_mult exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup_times exec_dup (string_yank string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min string_rest boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc integer_dec integer_dec integer_mult exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup string_yank string_swap) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 217 228 217 121 218 217 217 180 292 217 228 217 121 121 121 121 121 217 121 121 121 228 121 217 217 217)
Population mean number of elite cases: 9.94
Count of perfect (error zero) individuals by case: (217 217 228 217 121 218 217 217 180 292 217 228 217 121 121 121 121 121 217 121 121 121 228 121 217 217 217)
Population mean number of perfect (error zero) cases: 9.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 3153496.786
Median total errors in population: 362
Error averages by case: (178855.028 70396.986 81341.654 95306.086 480532.732 35588.896 48437.45 56436.978 5603.182 3887.772 59713.378 50012.198 72817.126 51480.642 65058.902 402639.146 180122.12 27119.824 248606.19 189365.836 98412.676 114485.434 51170.392 144121.148 158782.908 157668.064 25534.038)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 42.122
Average program size in population (points): 49.802
Average percent parens in population: 0.155
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 318018169
--- Timings ---
Current time: 1481339182933 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 221
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 222
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 222
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min integer_min boolean_not integer_inc integer_min integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank (exec_dup (string_yank exec_yank integer_add (string_yank boolean_shove boolean_eq in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 52
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (integer_min boolean_not integer_inc integer_dec integer_pop integer_gt integer_dec exec_swap (exec_dup (string_yank (exec_yank integer_add (boolean_eq (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (192 192 205 192 132 193 192 192 157 280 192 205 192 132 132 132 132 132 192 132 132 132 205 132 192 192 192)
Population mean number of elite cases: 9.35
Count of perfect (error zero) individuals by case: (192 192 205 192 132 193 192 192 157 280 192 205 192 132 132 132 132 132 192 132 132 132 205 132 192 192 192)
Population mean number of perfect (error zero) cases: 9.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 1413342.908
Median total errors in population: 415
Error averages by case: (76934.976 28385.98 30498.97 35072.534 176372.458 15679.204 25426.268 29503.436 5256.502 3640.94 28735.454 22365.13 33985.1 32098.73 40629.36 162515.01 87161.934 21811.742 100119.708 93185.866 59512.706 66899.57 22694.84 78197.802 61655.34 58824.272 16179.076)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.14
Average program size in population (points): 48.756
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 111500
Number of point (instruction) evaluations so far: 319585469
--- Timings ---
Current time: 1481339191469 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 222
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 223
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 223
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 43
Percent parens: 0.186
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 43
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (184 184 199 184 133 188 184 184 167 290 184 199 184 133 133 133 133 133 184 133 133 133 199 133 184 184 184)
Population mean number of elite cases: 9.19
Count of perfect (error zero) individuals by case: (184 184 199 184 133 188 184 184 167 290 184 199 184 133 133 133 133 133 184 133 133 133 199 133 184 184 184)
Population mean number of perfect (error zero) cases: 9.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 8244874.212
Median total errors in population: 468
Error averages by case: (388992.96 422126.912 554553.128 589256.816 803107.038 209947.456 159366.854 165505.214 12198.822 7719.704 221104.02 287498.936 251178.546 100396.028 120568.0 669515.5 320802.742 46501.206 508700.542 331401.054 174030.654 201239.628 296578.642 252721.678 505139.902 571170.546 73551.684)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.44
Average program size in population (points): 49.132
Average percent parens in population: 0.158
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 321168517
--- Timings ---
Current time: 1481339200603 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 223
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 224
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 224
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_pop exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_rest integer_min exec_dup_items boolean_not boolean_and integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec (exec_dup (string_pop exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap)) string_parse_to_chars integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_pop} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_pop exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_rest integer_min exec_dup_items boolean_not exec_yank integer_min string_butlast boolean_not integer_inc exec_yank integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (193 193 202 193 136 193 193 193 154 282 193 202 193 136 136 136 136 136 193 136 136 136 202 136 193 193 193)
Population mean number of elite cases: 9.44
Count of perfect (error zero) individuals by case: (193 193 202 193 136 193 193 193 154 282 193 202 193 136 136 136 136 136 193 136 136 136 202 136 193 193 193)
Population mean number of perfect (error zero) cases: 9.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_empty boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_empty boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 5.400346885136E10
Median total errors in population: 468
Error averages by case: (2.00017881842E9 2.000160745084E9 2.000221882026E9 2.000242306614E9 2.0004638478E9 2.000066528236E9 2.000052730906E9 2.00005675908E9 2.000002787264E9 2.000001949044E9 2.000077734094E9 2.000099971438E9 2.000092645238E9 2.000030215998E9 2.00003494979E9 2.000343562886E9 2.000135334452E9 2.000008646806E9 2.000253383388E9 2.00013508428E9 2.000051774008E9 2.00006319151E9 2.000103827446E9 2.0000892064E9 2.000225371618E9 2.000255147678E9 2.000020449856E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.626
Average program size in population (points): 48.186
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 112500
Number of point (instruction) evaluations so far: 322743909
--- Timings ---
Current time: 1481339209749 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 224
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 225
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 225
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_gte integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_gte integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take) string_parse_to_chars) integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_gte} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_gte integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_gte integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot string_yank boolean_not boolean_yankdup integer_min integer_dec integer_gt boolean_flush exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (187 187 193 187 145 189 187 187 143 288 187 193 187 145 145 145 145 145 187 145 145 145 193 145 187 187 187)
Population mean number of elite cases: 9.41
Count of perfect (error zero) individuals by case: (187 187 193 187 145 189 187 187 143 288 187 193 187 145 145 145 145 145 187 145 145 145 193 145 187 187 187)
Population mean number of perfect (error zero) cases: 9.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_dec integer_min integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_dec integer_min integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 123758.512
Median total errors in population: 468
Error averages by case: (5216.448 3886.846 4414.618 6336.386 8947.284 3556.694 3141.88 3212.728 1605.12 1397.54 3667.85 3273.802 3921.752 2943.472 3628.818 8923.144 5510.976 4117.728 6196.184 6020.58 5062.7 5405.576 3316.782 5682.492 5823.776 6240.784 2306.552)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 41.036
Average program size in population (points): 48.624
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 324341596
--- Timings ---
Current time: 1481339219005 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 225
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 226
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 226
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_dec integer_dec exec_dup (string_yank exec_yank integer_add string_swap (string_dup in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_min integer_min string_yank boolean_not exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 194 207 194 116 194 194 194 170 275 194 207 194 116 116 116 116 116 194 116 116 116 207 116 194 194 194)
Population mean number of elite cases: 9.11
Count of perfect (error zero) individuals by case: (194 194 207 194 116 194 194 194 170 275 194 207 194 116 116 116 116 116 194 116 116 116 207 116 194 194 194)
Population mean number of perfect (error zero) cases: 9.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (integer_min exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 1479096.402
Median total errors in population: 468
Error averages by case: (79688.074 32435.29 35522.406 40225.028 179752.806 18710.944 27194.164 31267.404 5368.494 3980.726 31037.482 25408.278 36450.824 33211.33 41845.14 165198.236 89153.87 23148.842 103257.344 95115.006 60972.514 68445.912 25811.392 79870.234 65568.986 63281.454 17174.222)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.44
Average program size in population (points): 47.854
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.606
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.606
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 113500
Number of point (instruction) evaluations so far: 325883117
--- Timings ---
Current time: 1481339227633 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 226
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 227
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 227
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 43
Percent parens: 0.186
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 43
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 196 206 197 131 195 197 197 169 288 197 206 197 131 131 131 131 131 197 131 131 131 206 131 197 197 197)
Population mean number of elite cases: 9.49
Count of perfect (error zero) individuals by case: (197 196 206 197 131 195 197 197 169 288 197 206 197 131 131 131 131 131 197 131 131 131 206 131 197 197 197)
Population mean number of perfect (error zero) cases: 9.49
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_empty boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_empty boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 5.4001380570382E10
Median total errors in population: 468
Error averages by case: (2.000074931644E9 2.000028340144E9 2.000030982392E9 2.000035555356E9 2.000172435404E9 2.000017157014E9 2.00002432363E9 2.000028279174E9 2.000004432502E9 2.000003281956E9 2.00002777583E9 2.00002192724E9 2.00003296481E9 2.000030658386E9 2.000039128098E9 2.00015896497E9 2.000084743824E9 2.000020784474E9 2.00009777501E9 2.00009074982E9 2.0000577929E9 2.000065050074E9 2.000022286092E9 2.000076102108E9 2.000060742176E9 2.000058317032E9 2.000015088322E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.87
Average program size in population (points): 48.478
Average percent parens in population: 0.159
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.11
Error (vector) diversity:			 0.11
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 327444419
--- Timings ---
Current time: 1481339236711 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 227
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 228
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 228
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_parse_to_chars string_yank exec_swap (exec_dup (string_yank (exec_yank integer_add boolean_not exec_dup ()) (boolean_frominteger boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 43
Percent parens: 0.186
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_parse_to_chars string_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_yank exec_swap (exec_dup (exec_yank integer_add string_swap string_parse_to_chars (string_yank in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 43
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 198 208 199 131 198 198 198 173 294 198 208 198 131 131 131 131 131 198 131 131 131 208 131 198 198 198)
Population mean number of elite cases: 9.56
Count of perfect (error zero) individuals by case: (198 198 208 199 131 198 198 198 173 294 198 208 198 131 131 131 131 131 198 131 131 131 208 131 198 198 198)
Population mean number of perfect (error zero) cases: 9.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_shove} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_empty boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_empty boolean_not integer_inc integer_min integer_min integer_min integer_shove string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 6.1982662896E7
Median total errors in population: 468
Error averages by case: (3535678.328 1577087.404 2114351.856 2592446.524 1.3594760128E7 510520.278 579729.312 679764.128 10041.588 5311.204 896934.916 890696.496 1179409.48 349543.39 442530.976 9246391.822 2639346.904 166176.858 5730460.072 2654530.24 761969.12 984158.894 928397.382 1537706.728 3944087.428 4255038.8 175592.64)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.894
Average program size in population (points): 48.358
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 114500
Number of point (instruction) evaluations so far: 329029432
--- Timings ---
Current time: 1481339245007 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 228
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 229
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 229
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (exec_yank exec_yank integer_gt exec_dup (exec_yank integer_add string_yank (in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 54
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (exec_dup_items boolean_not exec_yank integer_inc integer_dec integer_pop (exec_dup (exec_yank integer_add (string_yank in1 100 in2 integer_mult in1 99 integer_mult integer_max string_replacefirst))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 54
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 194 206 196 130 194 194 194 167 285 194 206 194 130 130 130 130 130 194 130 130 130 206 130 194 194 194)
Population mean number of elite cases: 9.40
Count of perfect (error zero) individuals by case: (194 194 206 196 130 194 194 194 167 285 194 206 194 130 130 130 130 130 194 130 130 130 206 130 194 194 194)
Population mean number of perfect (error zero) cases: 9.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_dec integer_min integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_dec integer_min integer_min integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 9.87511872365E9
Median total errors in population: 468
Error averages by case: (4.8510765851E8 1.73084877526E8 2.05511256226E8 2.5018442055E8 1.50829661572E9 7.128582762E7 1.03954689842E8 1.2375472045E8 4016991.27 1981426.894 1.37853383412E8 1.13128452514E8 1.75061969658E8 1.20816959738E8 2.05860271528E8 1.494270806178E9 5.74808323876E8 1.53682167674E8 7.10741937194E8 6.84294524612E8 4.3085247902E8 5.04692999858E8 1.16431237602E8 5.85800410348E8 4.47077858234E8 4.49074695646E8 4.349176195E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.664
Average program size in population (points): 48.078
Average percent parens in population: 0.156
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 330589503
--- Timings ---
Current time: 1481339253025 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 229
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 230
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 230
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_parse_to_chars string_yank integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (string_parse_to_chars exec_dup (exec_yank integer_add exec_dup (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 54
Percent parens: 0.148
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_parse_to_chars string_yank integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (integer_min integer_min boolean_not integer_inc exec_do*range (integer_min integer_min integer_min) boolean_not integer_inc exec_yank integer_dec integer_pop exec_swap (exec_dup (string_yank (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 54
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 197 207 200 128 197 197 197 167 282 197 207 197 128 128 128 128 124 197 128 128 128 207 128 197 197 198)
Population mean number of elite cases: 9.43
Count of perfect (error zero) individuals by case: (197 197 207 200 128 197 197 197 167 282 197 207 197 128 128 128 128 124 197 128 128 128 207 128 197 197 198)
Population mean number of perfect (error zero) cases: 9.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_shove} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_dec integer_min exec_dup_items integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (integer_shove string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_dec integer_min exec_dup_items integer_min integer_min string_yank boolean_not integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (integer_shove string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 110241.902
Median total errors in population: 468
Error averages by case: (4656.238 5087.204 5988.746 6200.266 7119.092 3496.502 3019.474 3052.672 1506.064 1479.864 3548.798 4113.866 3763.528 2497.148 2793.184 6505.012 4241.68 2414.09 5428.158 4397.852 3417.572 3630.308 4182.832 3944.04 5530.806 5988.15 2238.756)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.46
Average program size in population (points): 47.954
Average percent parens in population: 0.157
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 115500
Number of point (instruction) evaluations so far: 332158089
--- Timings ---
Current time: 1481339261652 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 230
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 231
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 231
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_eq integer_min exec_dup_items integer_inc string_empty boolean_rot integer_min string_yank boolean_not integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_eq exec_dup_items boolean_not integer_inc exec_yank boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_gt boolean_flush (exec_dup (string_emptystring exec_do*times (exec_yank integer_add exec_dup string_swap string_parse_to_chars) integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (179 179 190 183 147 181 179 179 149 286 179 190 179 147 147 147 147 147 179 147 147 147 190 147 179 179 179)
Population mean number of elite cases: 9.26
Count of perfect (error zero) individuals by case: (179 179 190 183 147 181 179 179 149 286 179 190 179 147 147 147 147 147 179 147 147 147 190 147 179 179 179)
Population mean number of perfect (error zero) cases: 9.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (integer_add (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 197936.036
Median total errors in population: 502
Error averages by case: (8216.062 10465.686 12753.054 13175.032 12242.046 6625.486 5205.132 5191.852 1837.294 1541.054 6474.172 8093.362 6923.224 3665.102 4217.11 11413.75 7078.282 3401.598 9651.604 7423.422 5426.582 5873.03 8264.654 6537.194 10832.41 12069.61 3338.232)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.96
Average program size in population (points): 47.594
Average percent parens in population: 0.162
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 333764079
--- Timings ---
Current time: 1481339270816 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 231
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 232
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 232
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction boolean_eq} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_empty string_empty boolean_rot integer_min exec_do*count () boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take boolean_eq) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min boolean_not integer_inc integer_empty string_empty boolean_rot exec_do*count () boolean_not integer_inc integer_min integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take boolean_eq) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 59
Percent parens: 0.153
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_empty} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_do*count} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction boolean_eq} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc integer_empty string_empty boolean_rot integer_min exec_do*count () boolean_not integer_inc integer_min integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take boolean_eq) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min integer_min exec_dup_items integer_inc integer_empty string_empty boolean_rot integer_min () boolean_not integer_inc integer_min integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take boolean_eq) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 59
Percent parens: 0.153
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 199 205 201 124 199 199 199 150 268 199 205 199 124 124 124 124 123 199 124 124 124 205 124 199 199 199)
Population mean number of elite cases: 9.32
Count of perfect (error zero) individuals by case: (199 199 205 201 124 199 199 199 150 268 199 205 199 124 124 124 124 123 199 124 124 124 205 124 199 199 199)
Population mean number of perfect (error zero) cases: 9.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_rest integer_min exec_dup_items boolean_not boolean_and integer_inc exec_yank integer_min integer_min integer_min boolean_dup_times exec_dup_items exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank boolean_rot) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (string_rest integer_min exec_dup_items boolean_not boolean_and integer_inc exec_yank integer_min integer_min integer_min boolean_dup_times exec_dup_items exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank boolean_rot) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Errors: [0 0 0 0 1 0 0 0 12 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 256
Mean: 9.481482
Genome size: 43
Size: 51
Percent parens: 0.157
--- Population Statistics ---
Average total errors in population: 1.81840476396E8
Median total errors in population: 697
Error averages by case: (6801116.626 1.0837406878E7 1.5798954762E7 1.6842859654E7 1.5412934126E7 4252190.32 2475922.802 2479997.386 48206.9 23725.542 4055011.342 6462488.922 4706195.782 1252465.652 2120075.334 1.5257268684E7 5893760.79 1573910.948 9403210.846 7005750.134 4411745.494 5165060.092 6746898.26 5995731.162 1.1680965586E7 1.4350015366E7 786607.006)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.166
Average program size in population (points): 46.686
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 116500
Number of point (instruction) evaluations so far: 335294152
--- Timings ---
Current time: 1481339279984 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 232
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 233
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 233
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_eq exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_dup boolean_shove boolean_eq exec_dup (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 202 215 208 131 202 202 202 171 293 202 215 202 131 131 131 131 131 202 131 131 131 215 131 202 202 202)
Population mean number of elite cases: 9.70
Count of perfect (error zero) individuals by case: (202 202 215 208 131 202 202 202 171 293 202 215 202 131 131 131 131 131 202 131 131 131 215 131 202 202 202)
Population mean number of perfect (error zero) cases: 9.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_rest integer_min exec_dup_items boolean_not boolean_and boolean_dup_times integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_yankdup integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (string_rest integer_min exec_dup_items boolean_not boolean_and boolean_dup_times integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take) string_parse_to_chars) boolean_yankdup integer_pop exec_dup (string_yank string_dup boolean_shove exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 8.2086660062E7
Median total errors in population: 502
Error averages by case: (4907247.936 1756959.466 2088518.948 2540381.984 1.4915761662E7 725301.344 1054184.342 1254223.806 42117.572 21262.408 1397661.424 1150115.232 1773938.398 939601.3 1170936.594 1.17501481E7 4522167.49 206115.048 7187846.25 4672242.078 1854300.446 2277658.172 1183660.518 3180793.398 4525189.776 4546408.204 441918.166)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.258
Average program size in population (points): 46.668
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 336884529
--- Timings ---
Current time: 1481339289198 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 233
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 234
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 234
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_dup) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min integer_dec integer_gt exec_swap (exec_dup (exec_yank integer_add (boolean_shove integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 52
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_dup} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_dup) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (exec_dup_items integer_inc exec_do*range integer_min integer_min string_dup boolean_not exec_yank integer_gt exec_swap (exec_dup (string_yank exec_yank integer_add string_reverse (string_dup boolean_shove exec_dup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 207 214 207 134 208 207 207 175 310 207 214 207 134 134 134 134 134 207 134 134 134 214 134 207 207 207)
Population mean number of elite cases: 9.90
Count of perfect (error zero) individuals by case: (207 207 214 207 134 208 207 207 175 310 207 214 207 134 134 134 134 134 207 134 134 134 214 134 207 207 207)
Population mean number of perfect (error zero) cases: 9.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_yankdup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_dup string_take string_swap string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 5.4000145566048E10
Median total errors in population: 468
Error averages by case: (2.00000635774E9 2.00000652337E9 2.0000076286E9 2.00000791768E9 2.000010127694E9 2.000004462234E9 2.000003907746E9 2.00000397953E9 2.000001764496E9 2.000001480312E9 2.000004608486E9 2.000005276168E9 2.000004931046E9 2.00000318701E9 2.000003592986E9 2.00000939561E9 2.000005919306E9 2.000002724184E9 2.000007483886E9 2.000006167094E9 2.000004511542E9 2.000004869154E9 2.000005364894E9 2.000005420306E9 2.000007329236E9 2.000007858408E9 2.00000277733E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.178
Average program size in population (points): 46.636
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.532
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.532
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 117500
Number of point (instruction) evaluations so far: 338434154
--- Timings ---
Current time: 1481339297555 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 234
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 235
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 235
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction string_replace} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt string_replace integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min integer_dec integer_dec exec_dup (exec_yank integer_add boolean_eq (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 54
Percent parens: 0.148
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction string_replace} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt string_replace integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (integer_min exec_dup_items exec_do*range (exec_dup (exec_yank integer_add string_yank (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 54
Percent parens: 0.148
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 203 214 203 144 204 203 203 168 300 203 214 203 144 144 144 144 144 203 144 144 144 214 144 203 203 203)
Population mean number of elite cases: 9.97
Count of perfect (error zero) individuals by case: (203 203 214 203 144 204 203 203 168 300 203 214 203 144 144 144 144 144 203 144 144 144 214 144 203 203 203)
Population mean number of perfect (error zero) cases: 9.97
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min exec_dup (exec_yank integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 1.51828961114E8
Median total errors in population: 468
Error averages by case: (6727954.85 1.0813630608E7 1.577395439E7 1.6813455424E7 1.4296505368E7 4238389.322 2453133.498 2453129.21 44626.452 20910.42 4029389.776 6443851.238 4675496.794 706593.014 644847.778 8955297.646 3446381.092 28581.468 9307410.33 3090816.376 773712.736 996409.846 6727995.51 1673589.544 1.1624083554E7 1.4296438634E7 772376.236)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.836
Average program size in population (points): 46.268
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 339997143
--- Timings ---
Current time: 1481339304902 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 235
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 236
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 236
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min string_yank boolean_not boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_dup_items integer_inc exec_yank integer_min integer_min string_yank boolean_not integer_inc boolean_yankdup integer_dec integer_gt exec_yank exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_swap) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 215 225 215 111 215 215 215 172 277 215 225 215 111 111 111 111 110 215 111 111 111 225 111 215 215 215)
Population mean number of elite cases: 9.63
Count of perfect (error zero) individuals by case: (215 215 225 215 111 215 215 215 172 277 215 225 215 111 111 111 111 110 215 111 111 111 225 111 215 215 215)
Population mean number of perfect (error zero) cases: 9.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot string_yank boolean_not boolean_yankdup integer_min integer_dec integer_gt integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 2569805.942
Median total errors in population: 526
Error averages by case: (126554.896 136546.322 191640.718 207098.72 308728.378 57426.174 41143.552 43253.856 3033.032 2198.106 61563.476 84471.262 72331.646 21151.248 23426.582 221761.424 88756.238 5426.828 177101.888 86999.842 33066.842 40080.848 87809.61 56704.742 173643.604 201651.704 16234.404)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.694
Average program size in population (points): 46.154
Average percent parens in population: 0.164
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 118500
Number of point (instruction) evaluations so far: 341556437
--- Timings ---
Current time: 1481339313862 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 236
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 237
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 237
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_yankdup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_min boolean_not exec_yank integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_yankdup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_dup string_take string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 196 209 196 147 197 197 197 173 310 197 209 197 147 147 147 147 146 197 147 147 147 209 147 197 197 197)
Population mean number of elite cases: 9.88
Count of perfect (error zero) individuals by case: (197 196 209 196 147 197 197 197 173 310 197 209 197 147 147 147 147 146 197 147 147 147 209 147 197 197 197)
Population mean number of perfect (error zero) cases: 9.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_rot} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min integer_min string_yank) boolean_not integer_inc integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_take string_swap) string_parse_to_chars) integer_rot integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (exec_dup (exec_yank integer_add exec_dup (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 44
Size: 53
Percent parens: 0.170
--- Population Statistics ---
Average total errors in population: 226849.15
Median total errors in population: 468
Error averages by case: (9862.012 10435.842 12905.536 13522.69 18238.742 6104.86 5006.234 5140.722 1450.828 1102.556 6356.34 7780.0 6983.798 3977.5 4979.132 16894.994 9366.79 4491.14 12231.688 10064.97 7193.858 7897.358 7965.366 8805.87 11947.244 13151.892 2991.188)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.092
Average program size in population (points): 46.618
Average percent parens in population: 0.164
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 343127701
--- Timings ---
Current time: 1481339322577 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 237
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 238
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 238
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (string_butlast integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (string_butlast integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 196 202 196 150 197 197 197 158 305 197 202 197 150 150 150 150 149 197 150 150 150 202 150 197 197 197)
Population mean number of elite cases: 9.86
Count of perfect (error zero) individuals by case: (197 196 202 196 150 197 197 197 158 305 197 202 197 150 150 150 150 149 197 150 150 150 202 150 197 197 197)
Population mean number of perfect (error zero) cases: 9.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Partial simplification: (exec_dup_items exec_swap integer_add (integer_pop in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 32
Size: 38
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 5.4000966530894E10
Median total errors in population: 468
Error averages by case: (2.000055112228E9 2.000023909912E9 2.000028471152E9 2.000033297224E9 2.000159384238E9 2.000011307254E9 2.000013982404E9 2.000016055578E9 2.000001878584E9 2.000001441366E9 2.000018141252E9 2.000016419552E9 2.000022256746E9 2.000012339464E9 2.000015427328E9 2.00012758589E9 2.000051241408E9 2.00000622726E9 2.000079144524E9 2.00005331989E9 2.000023894342E9 2.000028537646E9 2.000016852708E9 2.000037929774E9 2.00005241378E9 2.000053244664E9 2.000006714726E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.718
Average program size in population (points): 46.342
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 119500
Number of point (instruction) evaluations so far: 344673940
--- Timings ---
Current time: 1481339328372 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 238
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 239
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 239
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (198 198 210 198 141 198 198 198 158 288 198 210 198 140 140 140 140 140 198 140 140 140 210 140 198 198 198)
Population mean number of elite cases: 9.71
Count of perfect (error zero) individuals by case: (198 198 210 198 141 198 198 198 158 288 198 210 198 140 140 140 140 140 198 140 140 140 210 140 198 198 198)
Population mean number of perfect (error zero) cases: 9.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min integer_min exec_dup_items integer_min integer_min string_yank boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (exec_yank integer_min integer_min (exec_dup (string_yank (exec_yank integer_add exec_dup string_dup exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 45
Size: 52
Percent parens: 0.135
--- Population Statistics ---
Average total errors in population: 3823526.052
Median total errors in population: 468
Error averages by case: (157296.434 162620.78 206834.26 219483.204 333239.526 86261.13 65814.172 67970.964 5418.566 3534.95 90213.434 114662.692 101886.32 49880.906 80763.152 326742.944 156543.682 145908.424 206129.64 182683.606 151910.686 166448.032 117960.466 173032.974 198637.158 220887.118 30760.832)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.558
Average program size in population (points): 46.13
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 346222951
--- Timings ---
Current time: 1481339334970 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 239
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 240
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 240
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 0, :instruction string_contains} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min string_yank) integer_inc integer_inc integer_max boolean_rot integer_dec integer_gt exec_dup_items integer_dec string_contains integer_gt string_contains integer_div exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min integer_inc integer_dec integer_gt integer_gt string_contains exec_dup (string_yank exec_yank integer_add boolean_not (string_rot boolean_eq integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 0, :instruction string_contains} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min string_yank) integer_inc integer_inc integer_max boolean_rot integer_dec integer_gt exec_dup_items integer_dec string_contains integer_gt string_contains integer_div exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (exec_dup_items string_contains exec_dup (exec_yank integer_add (boolean_shove boolean_eq in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 196 211 196 148 196 197 197 160 285 196 211 197 141 141 141 141 140 197 141 141 141 211 141 197 197 196)
Population mean number of elite cases: 9.71
Count of perfect (error zero) individuals by case: (197 196 211 196 148 196 197 197 160 285 196 211 197 141 141 141 141 140 197 141 141 141 211 141 197 197 196)
Population mean number of perfect (error zero) cases: 9.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_dup_times} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Partial simplification: (exec_swap (integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 32
Size: 38
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 2.2208717318806E10
Median total errors in population: 468
Error averages by case: (6.86146336604E8 1.102877561386E9 1.608909400244E9 1.714960712246E9 1.557699020398E9 4.32061376298E8 2.5005078315E8 2.50054779494E8 4399177.356 2003540.566 4.10828720082E8 6.57107893172E8 4.7673865669E8 1.5905272714E8 3.70432510982E8 1.940851916828E9 7.4661799717E8 1.185429203822E9 9.49300095882E8 1.024124242654E9 1.024066558706E9 1.143650228138E9 6.86093199192E8 1.10283055251E9 1.185590609028E9 1.458207726432E9 7.8631792636E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.784
Average program size in population (points): 46.486
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 120500
Number of point (instruction) evaluations so far: 347759109
--- Timings ---
Current time: 1481339341745 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 240
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 241
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 241
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min string_yank) integer_inc integer_inc integer_max boolean_rot integer_dec integer_gt exec_dup_items integer_dec string_contains integer_gt string_contains integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items integer_inc exec_do*range integer_min string_yank integer_max boolean_rot integer_dec integer_gt exec_dup_items integer_dec string_contains integer_gt string_contains integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add exec_dup (string_yank string_rot boolean_shove boolean_eq (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min string_yank) integer_inc integer_inc integer_max boolean_rot integer_dec integer_gt exec_dup_items integer_dec string_contains integer_gt string_contains integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (exec_dup (exec_yank integer_add boolean_not (in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 209 215 209 141 210 210 210 161 291 210 215 210 134 134 134 134 133 210 134 134 134 215 134 210 210 210)
Population mean number of elite cases: 9.92
Count of perfect (error zero) individuals by case: (210 209 215 209 141 210 210 210 161 291 210 215 210 134 134 134 134 133 210 134 134 134 215 134 210 210 210)
Population mean number of perfect (error zero) cases: 9.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction string_pop} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction string_replace} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) string_pop integer_inc integer_swap integer_dec integer_pop integer_gt string_replace integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc boolean_not integer_inc (integer_min integer_min integer_min string_yank) string_pop integer_inc integer_swap integer_dec integer_pop integer_gt string_replace integer_dec exec_swap (exec_dup (string_yank exec_do*times (integer_add (string_yank string_dup boolean_shove boolean_eq exec_dup (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 46
Size: 54
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 69634.608
Median total errors in population: 468
Error averages by case: (2717.372 3214.568 3713.868 3838.214 3643.784 2322.694 1998.96 2010.062 1285.518 1120.404 2294.862 2668.044 2409.282 1730.722 1969.666 3596.17 2575.252 2112.032 3045.37 2724.152 2407.632 2511.258 2707.066 2606.312 3294.136 3566.12 1551.088)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.858
Average program size in population (points): 45.328
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 349270820
--- Timings ---
Current time: 1481339350125 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 241
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 242
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 242
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_yankdup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (boolean_shove boolean_eq exec_dup (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_emptystring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank string_empty boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec integer_gt boolean_flush integer_dec exec_swap (exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_yankdup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_eq integer_min exec_dup_items boolean_not integer_inc exec_yank boolean_rot integer_min string_yank boolean_not boolean_yankdup integer_min integer_dec integer_dec boolean_flush integer_dec exec_dup (string_emptystring exec_do*times (exec_yank integer_add boolean_not exec_dup) boolean_xor integer_pop exec_dup (string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))) ())
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 189 207 189 140 189 189 189 170 290 189 207 189 135 135 135 135 135 189 135 135 135 207 135 189 189 189)
Population mean number of elite cases: 9.41
Count of perfect (error zero) individuals by case: (189 189 207 189 140 189 189 189 170 290 189 207 189 135 135 135 135 135 189 135 135 135 207 135 189 189 189)
Population mean number of perfect (error zero) cases: 9.41
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction string_stackdepth} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_rot} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (string_stackdepth integer_min integer_min integer_rot string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (integer_min exec_dup_items integer_inc boolean_not integer_inc exec_yank exec_yank exec_swap (exec_dup (string_yank exec_yank integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5.400093093589E10
Median total errors in population: 468
Error averages by case: (2.00005400966E9 2.00002244169E9 2.000026613928E9 2.000031382544E9 2.000157379648E9 2.000010506874E9 2.000013417672E9 2.000015491408E9 2.000001740846E9 2.00000136617E9 2.000017377406E9 2.000015368056E9 2.000021404414E9 2.000011774368E9 2.000014363224E9 2.000124702724E9 2.000049683692E9 2.000004360114E9 2.000077778726E9 2.000051293768E9 2.000021827966E9 2.000026308034E9 2.000015772326E9 2.000035751234E9 2.000050871348E9 2.000051488072E9 2.000006459978E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.956
Average program size in population (points): 45.432
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 121500
Number of point (instruction) evaluations so far: 350785335
--- Timings ---
Current time: 1481339359559 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 242
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 243
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 243
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min boolean_empty boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc boolean_pop integer_max string_fromboolean integer_dec integer_gt exec_yank integer_dec string_empty boolean_dup_items exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (boolean_empty integer_inc integer_inc boolean_pop boolean_dup_items exec_dup (string_yank exec_yank integer_add boolean_not exec_dup (in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 54
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction boolean_empty} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min boolean_empty boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank integer_inc boolean_pop integer_max string_fromboolean integer_dec integer_gt exec_yank integer_dec string_empty boolean_dup_items exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (exec_dup (exec_yank integer_add (boolean_shove in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 54
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (183 183 189 183 143 185 183 183 146 277 183 189 183 136 136 136 136 136 183 136 136 136 189 136 183 183 183)
Population mean number of elite cases: 9.11
Count of perfect (error zero) individuals by case: (183 183 189 183 143 185 183 183 146 277 183 189 183 136 136 136 136 136 183 136 136 136 189 136 183 183 183)
Population mean number of perfect (error zero) cases: 9.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction integer_rot} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_rest integer_min exec_dup_items boolean_not boolean_and exec_yank integer_min integer_min string_butlast string_yank boolean_not integer_inc exec_yank integer_dec integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take integer_rot) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_min boolean_not boolean_and exec_yank integer_min string_butlast boolean_not integer_inc exec_yank integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_eq exec_dup (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 99583.304
Median total errors in population: 526
Error averages by case: (4076.56 4920.024 5704.012 5785.728 5326.228 2915.194 3017.68 3009.04 1603.696 1371.428 3503.618 4140.316 3665.828 2342.926 2552.114 5019.278 3611.816 2316.122 4551.412 3715.588 3011.708 3171.086 4200.778 3402.34 4995.916 5406.528 2246.34)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.69
Average program size in population (points): 45.2
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 352271789
--- Timings ---
Current time: 1481339367101 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 243
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 244
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 244
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap (integer_add string_yank) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 37
Percent parens: 0.135
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap (integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 37
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 215 219 215 140 215 216 216 176 309 216 219 216 137 137 137 137 137 216 137 137 137 219 137 216 216 216)
Population mean number of elite cases: 10.21
Count of perfect (error zero) individuals by case: (216 215 219 215 140 215 216 216 176 309 216 219 216 137 137 137 137 137 216 137 137 137 219 137 216 216 216)
Population mean number of perfect (error zero) cases: 10.21
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction boolean_invert_second_then_and} {:close 0, :instruction integer_yankdup} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_mult} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction integer_rot} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_rest integer_min exec_dup_items boolean_not string_dup exec_dup (string_yank string_swap) boolean_invert_second_then_and integer_yankdup integer_dec integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take integer_rot) string_parse_to_chars) string_parse_to_chars integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (string_rest integer_min exec_dup_items boolean_not string_dup () boolean_invert_second_then_and integer_yankdup integer_dec integer_gt exec_yank integer_dec (exec_dup (exec_do*times (exec_yank integer_add boolean_not integer_mult exec_dup (string_take integer_rot) string_parse_to_chars) integer_pop exec_dup (boolean_shove boolean_eq exec_dup (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 46
Size: 55
Percent parens: 0.164
--- Population Statistics ---
Average total errors in population: 5.221917002761E10
Median total errors in population: 468
Error averages by case: (2.00354912342E9 2.001562099214E9 2.002112501272E9 2.00259774885E9 2.013710307392E9 2.000483574524E9 2.000561810156E9 2.00066384606E9 1.957761044134E9 2.0000347141E8 2.000877776282E9 2.000866620884E9 2.001162925748E9 2.000327089142E9 2.000393476146E9 2.009250400586E9 2.00261111144E9 2.000026538642E9 2.00576796372E9 2.002599697832E9 2.000657285944E9 2.000875830934E9 2.000904614346E9 2.001447958052E9 2.003958017724E9 2.00427432826E9 2.000162865496E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.076
Average program size in population (points): 45.61
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 122500
Number of point (instruction) evaluations so far: 353805399
--- Timings ---
Current time: 1481339373845 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 244
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 245
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 245
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min integer_min exec_dup_items boolean_not integer_inc (integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 52
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (integer_min integer_inc boolean_not exec_yank integer_gt exec_dup (exec_yank integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 206 218 206 151 207 206 206 172 300 206 218 206 139 139 139 139 138 206 139 139 139 218 139 206 206 206)
Population mean number of elite cases: 10.00
Count of perfect (error zero) individuals by case: (206 206 218 206 151 207 206 206 172 300 206 218 206 139 139 139 139 138 206 139 139 139 218 139 206 206 206)
Population mean number of perfect (error zero) cases: 10.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction string_split} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_take} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (exec_dup_items) boolean_not integer_inc exec_dup (integer_min integer_min string_yank) boolean_not integer_inc string_split exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_take string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))) ())
Partial simplification: (integer_min exec_dup_items boolean_not integer_inc exec_do*range exec_dup_items boolean_not integer_inc exec_dup boolean_not integer_inc string_split exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_swap) string_parse_to_chars) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))) ())
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 47
Size: 57
Percent parens: 0.175
--- Population Statistics ---
Average total errors in population: 1287868.382
Median total errors in population: 468
Error averages by case: (70843.276 24286.772 23954.096 28189.38 165625.31 13427.242 22194.634 26138.596 4313.578 3069.534 24858.86 18013.088 29754.59 29391.27 37532.954 152688.254 81366.554 22476.1 92725.82 87140.102 55473.102 62447.214 18260.676 73066.642 54926.96 51663.796 14039.982)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.074
Average program size in population (points): 45.622
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 355313623
--- Timings ---
Current time: 1481339382378 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 245
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 246
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 246
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (boolean_dup_times exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 220 225 220 137 224 220 220 172 300 220 225 220 128 128 128 128 128 220 128 128 128 225 128 220 220 220)
Population mean number of elite cases: 10.16
Count of perfect (error zero) individuals by case: (220 220 225 220 137 224 220 220 172 300 220 225 220 128 128 128 128 128 220 128 128 128 225 128 220 220 220)
Population mean number of perfect (error zero) cases: 10.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_shove} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_min integer_min exec_dup_items boolean_shove integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Partial simplification: (boolean_shove exec_yank (exec_dup (exec_yank integer_add exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 44
Size: 52
Percent parens: 0.154
--- Population Statistics ---
Average total errors in population: 5.2158244815002E10
Median total errors in population: 468
Error averages by case: (2.000098260918E9 2.000133679856E9 2.00017151232E9 2.0001789382E9 2.000167213558E9 2.000072179036E9 2.000050609616E9 2.000050643548E9 1.956126835838E9 1.99803082446E8 2.000069939132E9 2.000095051536E9 2.00007712335E9 2.000029688064E9 2.000037891688E9 2.000154138472E9 2.00008214065E9 2.000020116694E9 2.00012174016E9 2.000087961238E9 2.000055978878E9 2.00006301836E9 2.000097786594E9 2.000073744942E9 2.000140499134E9 2.00016098361E9 2.000024057164E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.53
Average program size in population (points): 44.97
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.094
Error (vector) diversity:			 0.094
--- Run Statistics ---
Number of program evaluations used so far: 123500
Number of point (instruction) evaluations so far: 356789921
--- Timings ---
Current time: 1481339388861 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 246
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 247
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 247
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (string_butlast integer_pop exec_dup (integer_gte string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap (integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gte} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (string_butlast integer_pop exec_dup (integer_gte string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (integer_dec exec_swap (boolean_not integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 202 210 202 149 207 203 203 171 306 203 210 203 136 136 137 136 136 203 136 136 136 210 136 203 203 203)
Population mean number of elite cases: 9.84
Count of perfect (error zero) individuals by case: (203 202 210 202 149 207 203 203 171 306 203 210 203 136 136 137 136 136 203 136 136 136 210 136 203 203 203)
Population mean number of perfect (error zero) cases: 9.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_lt exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Total: 294
Mean: 10.888889
Genome size: 32
Size: 38
Percent parens: 0.158
--- Population Statistics ---
Average total errors in population: 4.6501301121928E10
Median total errors in population: 468
Error averages by case: (2.000005110446E9 2.0000049752E9 2.000005706458E9 2.000005904436E9 2.000008199664E9 2.00000348927E9 2.000003130586E9 2.000003201026E9 7839305.52 2201083.648 2.000003646026E9 2.000004097786E9 2.000003898026E9 1.369224089748E9 2.000002948064E9 2.000007627432E9 2.000004850308E9 2.05108539314E8 2.000006002178E9 2.000005055184E9 2.000003711768E9 2.000004002972E9 2.000004160306E9 2.000004446992E9 2.000005668338E9 2.00000599445E9 9.16822276782E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.17
Average program size in population (points): 44.47
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.54
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.54
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 358259074
--- Timings ---
Current time: 1481339394562 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 247
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 248
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 248
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 37
Percent parens: 0.135
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 37
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 216 224 216 137 218 216 216 179 306 216 224 216 132 132 132 132 132 216 132 132 132 224 132 216 216 216)
Population mean number of elite cases: 10.15
Count of perfect (error zero) individuals by case: (216 216 224 216 137 218 216 216 179 306 216 224 216 132 132 132 132 132 216 132 132 132 224 132 216 216 216)
Population mean number of perfect (error zero) cases: 10.15
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2.2205841686396E10
Median total errors in population: 468
Error averages by case: (6.86004952534E8 1.102739886882E9 1.608718257024E9 1.714754422832E9 1.557384384424E9 4.32002980234E8 2.50002923046E8 2.50003038456E8 4395423.488 2001203.722 4.10761263788E8 6.57021379536E8 4.766594951E8 1.59016731832E8 3.70389083678E8 1.940605806048E9 7.46501003724E8 1.185410282276E9 9.49109839576E8 1.02400521148E9 1.02400386968E9 1.143578164976E9 6.86003416144E8 1.102740611664E9 1.18541287991E9 1.458004957276E9 7.8610217066E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.292
Average program size in population (points): 43.504
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 124500
Number of point (instruction) evaluations so far: 359662749
--- Timings ---
Current time: 1481339401119 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 248
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 249
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 249
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction string_replace} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt string_replace integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_inc exec_do*range integer_min boolean_not exec_yank integer_pop string_replace exec_swap (exec_dup (exec_yank integer_add string_reverse boolean_eq exec_dup (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 52
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction string_replace} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt string_replace integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (exec_dup (exec_yank integer_add (exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 209 216 209 144 210 209 209 175 279 209 216 209 132 132 132 132 132 209 132 132 132 216 132 209 209 209)
Population mean number of elite cases: 9.89
Count of perfect (error zero) individuals by case: (209 209 216 209 144 210 209 209 175 279 209 216 209 132 132 132 132 132 209 132 132 132 216 132 209 209 209)
Population mean number of perfect (error zero) cases: 9.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 1477263.032
Median total errors in population: 468
Error averages by case: (79953.744 30867.548 33648.044 38458.584 182197.002 18272.92 26644.09 30833.042 5280.466 3791.874 30277.788 24098.828 35747.982 33272.332 42109.516 167339.308 89977.702 24022.792 103922.642 96104.682 61761.362 69320.492 24476.932 80779.274 64916.744 62355.476 16831.866)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.598
Average program size in population (points): 44.012
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 361099229
--- Timings ---
Current time: 1481339408949 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 249
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 250
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 250
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (boolean_yankdup boolean_eq in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 226 236 226 114 228 226 226 180 248 226 236 226 106 106 106 106 106 226 106 106 106 236 106 226 226 226)
Population mean number of elite cases: 9.84
Count of perfect (error zero) individuals by case: (226 226 236 226 114 228 226 226 180 248 226 236 226 106 106 106 106 106 226 106 106 106 236 106 226 226 226)
Population mean number of perfect (error zero) cases: 9.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2668273.592
Median total errors in population: 526
Error averages by case: (146857.58 50340.038 55337.34 62471.856 341277.326 30007.458 46473.888 54510.888 7780.812 5216.18 52523.472 40288.428 62698.956 60060.728 76481.93 313845.248 167170.046 39168.864 192006.388 178746.37 112968.49 127333.264 40901.758 149408.558 115758.322 109710.718 28928.686)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.658
Average program size in population (points): 44.168
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 125500
Number of point (instruction) evaluations so far: 362548416
--- Timings ---
Current time: 1481339415640 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 250
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 251
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 251
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap integer_add (exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 37
Percent parens: 0.135
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 37
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 202 213 202 120 204 203 203 155 246 203 213 203 114 114 114 114 114 203 114 114 114 213 114 203 203 203)
Population mean number of elite cases: 9.24
Count of perfect (error zero) individuals by case: (203 202 213 202 120 204 203 203 155 246 203 213 203 114 114 114 114 114 203 114 114 114 213 114 203 203 203)
Population mean number of perfect (error zero) cases: 9.24
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2709783.746
Median total errors in population: 526
Error averages by case: (148587.496 51317.51 54482.574 63352.032 343589.352 30324.088 47686.718 55795.526 8650.43 5996.868 53736.422 40410.03 63964.73 61717.94 78639.272 316598.46 169504.88 42808.862 193852.226 181355.448 115900.728 130319.196 40991.74 152244.368 117071.18 110888.332 29997.338)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.618
Average program size in population (points): 44.008
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 363997301
--- Timings ---
Current time: 1481339422345 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 251
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 252
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 252
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not integer_min exec_dup_items) (boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (boolean_not integer_pop (exec_dup (exec_yank integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 57
Percent parens: 0.140
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not integer_min exec_dup_items) (boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (string_yank exec_swap (exec_dup (integer_pop exec_yank integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 57
Percent parens: 0.140
--- Lexicase Population Statistics ---
Count of elite individuals by case: (197 197 210 198 138 201 197 197 169 257 197 210 197 125 125 125 125 125 197 125 125 125 210 125 197 197 197)
Population mean number of elite cases: 9.38
Count of perfect (error zero) individuals by case: (197 197 210 198 138 201 197 197 169 257 197 210 197 125 125 125 125 125 197 125 125 125 210 125 197 197 197)
Population mean number of perfect (error zero) cases: 9.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2.2205870777616E10
Median total errors in population: 468
Error averages by case: (6.86006128488E8 1.102742290214E9 1.608721388E9 1.71475769842E9 1.557385909598E9 4.3200421601E8 2.50003633804E8 2.50003708668E8 4395342.84 2001093.97 4.10762347328E8 6.5702301248E8 4.76660676068E8 1.59016852394E8 3.7038919474E8 1.94060690074E9 7.46501540446E8 1.185410317804E9 9.49111266196E8 1.024005705686E9 1.024004008914E9 1.143578348052E9 6.86005102352E8 1.102740907354E9 1.185415104088E9 1.458007636976E9 7.8610445986E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.802
Average program size in population (points): 44.284
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.14
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 126500
Number of point (instruction) evaluations so far: 365446936
--- Timings ---
Current time: 1481339429586 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 252
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 253
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 253
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (boolean_eq in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (string_butlast exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 208 224 215 141 214 208 208 172 279 208 224 208 138 138 138 138 138 208 138 138 138 224 138 208 208 208)
Population mean number of elite cases: 10.03
Count of perfect (error zero) individuals by case: (208 208 224 215 141 214 208 208 172 279 208 224 208 138 138 138 138 138 208 138 138 138 224 138 208 208 208)
Population mean number of perfect (error zero) cases: 10.03
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_parse_to_chars boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (string_parse_to_chars boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 5.8465731706E7
Median total errors in population: 468
Error averages by case: (3397576.766 1420753.674 1912807.194 2378340.85 1.3282444902E7 428939.472 520986.838 620024.15 6120.186 2712.846 814640.544 781922.01 1086757.998 307214.452 371279.982 8951896.668 2505583.374 23701.544 5545875.346 2496367.158 624426.438 834375.66 816363.89 1385077.95 3757217.458 4043440.782 148883.574)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.718
Average program size in population (points): 43.966
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.512
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.512
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 366915072
--- Timings ---
Current time: 1481339436446 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 253
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 254
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 254
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap (integer_add string_dup) (boolean_xor in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 37
Percent parens: 0.135
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap (integer_add string_parse_to_chars) (boolean_eq in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 37
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 202 214 205 128 206 202 202 172 264 202 214 202 120 120 120 120 120 202 120 120 120 214 120 202 202 202)
Population mean number of elite cases: 9.43
Count of perfect (error zero) individuals by case: (202 202 214 205 128 206 202 202 172 264 202 214 202 120 120 120 120 120 202 120 120 120 214 120 202 202 202)
Population mean number of perfect (error zero) cases: 9.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 1.6200136847901E11
Median total errors in population: 468
Error averages by case: (6.000075354524E9 6.000024023026E9 6.00002510389E9 6.000029587836E9 6.000175762078E9 6.000014233228E9 6.000023666328E9 6.000027901864E9 6.000004650658E9 6.000003321372E9 6.000026432696E9 6.00001893748E9 6.000031633232E9 6.00003169253E9 6.00004051057E9 6.000162297298E9 6.000086851534E9 6.00002238186E9 6.000098518304E9 6.000093067534E9 6.000059793614E9 6.000067177874E9 6.000019194506E9 6.000078317222E9 6.000058251404E9 6.000054735636E9 6.000015080912E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.696
Average program size in population (points): 44.166
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.116
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 127500
Number of point (instruction) evaluations so far: 368334815
--- Timings ---
Current time: 1481339443122 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 254
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 255
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 255
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_dec boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_flush exec_dup_items) (boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (exec_swap (exec_dup (exec_yank integer_add (exec_dup in1 100 in2 integer_mult in1 99 integer_mult integer_max))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 58
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_flush} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_dec boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_flush exec_dup_items) (boolean_not integer_inc exec_yank integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (exec_dup (exec_yank integer_add exec_dup (in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 58
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (202 200 207 204 135 201 202 202 154 252 202 207 202 130 130 130 130 129 202 130 130 130 207 130 202 202 202)
Population mean number of elite cases: 9.51
Count of perfect (error zero) individuals by case: (202 200 207 204 135 201 202 202 154 252 202 207 202 130 130 130 130 129 202 130 130 130 207 130 202 202 202)
Population mean number of perfect (error zero) cases: 9.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3053253.26
Median total errors in population: 502
Error averages by case: (141832.974 45494.762 47994.654 56585.202 338268.644 26096.134 43680.346 51636.394 7466.312 5023.35 49137.07 35522.142 59026.09 66961.428 103283.338 351824.38 186702.556 161592.266 185997.498 216922.892 184629.132 201525.324 36037.23 209053.592 110097.03 103680.23 27182.29)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.708
Average program size in population (points): 44.128
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 369759727
--- Timings ---
Current time: 1481339450571 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 255
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 256
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 256
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction string_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_rot) (boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (string_fromboolean in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 32
Percent parens: 0.156
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction string_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_rot) (boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (string_fromboolean in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 32
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 203 217 203 139 204 203 203 176 274 203 217 203 137 137 137 137 136 203 137 137 137 217 137 203 203 203)
Population mean number of elite cases: 9.82
Count of perfect (error zero) individuals by case: (203 203 217 203 139 204 203 203 176 274 203 217 203 137 137 137 137 136 203 137 137 137 217 137 203 203 203)
Population mean number of perfect (error zero) cases: 9.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 1.82981386306E8
Median total errors in population: 468
Error averages by case: (6845996.638 1.0924424138E7 1.5944426872E7 1.7001432004E7 1.553870178E7 4275375.706 2486710.462 2490744.798 47586.744 23212.372 4077127.492 6505264.36 4733439.352 1253476.678 2120593.14 1.5322537354E7 5910527.596 1572997.656 9473415.128 7019694.996 4412336.274 5166517.536 6792302.752 6000605.81 1.1776724216E7 1.4477046072E7 788168.38)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.088
Average program size in population (points): 43.29
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.142
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 128500
Number of point (instruction) evaluations so far: 371184579
--- Timings ---
Current time: 1481339457200 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 256
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 257
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 257
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_reverse} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_flush boolean_not boolean_yank exec_yank integer_min integer_min integer_min string_yank in1 boolean_pop integer_max string_fromboolean integer_dec integer_gt exec_yank integer_dec string_empty boolean_dup_items boolean_rot integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank boolean_or boolean_shove boolean_eq exec_dup (integer_gt string_reverse in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_flush exec_yank string_yank boolean_pop integer_dec boolean_rot exec_swap (exec_dup (exec_yank integer_add exec_dup (string_reverse in1 100 in2 integer_mult in1 99 integer_mult integer_max))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 54
Percent parens: 0.130
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction in1} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_or} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_reverse} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_flush boolean_not boolean_yank exec_yank integer_min integer_min integer_min string_yank in1 boolean_pop integer_max string_fromboolean integer_dec integer_gt exec_yank integer_dec string_empty boolean_dup_items boolean_rot integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank boolean_or boolean_shove boolean_eq exec_dup (integer_gt string_reverse in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (string_empty integer_dec exec_swap (exec_dup (exec_yank integer_add (string_yank boolean_eq string_reverse in1 100 in2 integer_mult in1 99 integer_mult integer_max))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 54
Percent parens: 0.130
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 214 225 214 125 215 214 214 181 258 214 225 214 120 120 120 120 120 214 120 120 120 225 120 214 214 214)
Population mean number of elite cases: 9.78
Count of perfect (error zero) individuals by case: (214 214 225 214 125 215 214 214 181 258 214 225 214 120 120 120 120 120 214 120 120 120 225 120 214 214 214)
Population mean number of perfect (error zero) cases: 9.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.4003335342248E10
Median total errors in population: 468
Error averages by case: (2.000173420102E9 2.000152765718E9 2.000209900802E9 2.000231607626E9 2.000455296828E9 2.000061546158E9 2.000049811044E9 2.000053880332E9 2.000002599828E9 2.000001675756E9 2.000073658004E9 2.00009338205E9 2.000088173264E9 2.000028747396E9 2.00003311646E9 2.00033618078E9 2.00013136445E9 2.000006627972E9 2.000246751544E9 2.000130922158E9 2.000048983958E9 2.00006009798E9 2.000097045644E9 2.000085705118E9 2.000217254434E9 2.000245750378E9 2.000019076464E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.348
Average program size in population (points): 43.716
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.144
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 372605153
--- Timings ---
Current time: 1481339465063 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 257
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 258
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 258
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_split} {:close 0, :instruction string_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 0, :instruction string_contains} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_dup_times integer_inc exec_empty integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_split) string_pop integer_dec integer_gt exec_dup_items integer_dec string_contains integer_gt string_contains integer_div exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min exec_dup_items boolean_dup_times exec_empty integer_inc exec_do*range (integer_min integer_min integer_min string_split) string_pop integer_dec integer_gt exec_dup_items string_contains string_contains integer_div exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 55
Percent parens: 0.145
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_empty} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_split} {:close 0, :instruction string_pop} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup_items} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 0, :instruction string_contains} {:close 0, :instruction integer_div} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_dup_times integer_inc exec_empty integer_inc exec_do*range (integer_min integer_min integer_min integer_min string_split) string_pop integer_dec integer_gt exec_dup_items integer_dec string_contains integer_gt string_contains integer_div exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (integer_inc exec_dup (exec_yank integer_add exec_dup (integer_gt in1 100 in2 integer_mult in1 99 integer_mult integer_max string_replacefirst)))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 55
Percent parens: 0.145
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 211 221 211 129 211 211 211 178 258 211 221 211 120 120 120 120 120 211 120 120 120 221 120 211 211 211)
Population mean number of elite cases: 9.68
Count of perfect (error zero) individuals by case: (211 211 221 211 129 211 211 211 178 258 211 221 211 120 120 120 120 120 211 120 120 120 221 120 211 211 211)
Population mean number of perfect (error zero) cases: 9.68
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 1.02043427050482E11
Median total errors in population: 468
Error averages by case: (4.00000350642E9 4.000003061186E9 4.000003575662E9 4.000003646536E9 4.000005022388E9 4.000002238732E9 4.000002376322E9 4.00000237345E9 2.011585553102E9 2.002001057858E9 4.000002853878E9 4.000002559454E9 4.000003025358E9 4.000001862428E9 4.000002154386E9 4.000004830644E9 4.000003156308E9 2.02976430143E9 4.00000405183E9 4.00000334702E9 4.00000272294E9 4.00000288842E9 4.000002597104E9 4.000003088256E9 4.000004514844E9 4.000004992816E9 4.00000169171E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.15
Average program size in population (points): 43.434
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 129500
Number of point (instruction) evaluations so far: 373976757
--- Timings ---
Current time: 1481339473168 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 258
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 259
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 259
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop integer_eq integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 36
Percent parens: 0.111
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_swap} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_lt} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop integer_eq integer_swap string_length boolean_frominteger boolean_eq integer_lt integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 36
Percent parens: 0.111
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 214 222 214 151 214 214 214 183 293 214 222 214 146 146 146 146 146 214 146 146 146 222 146 214 214 214)
Population mean number of elite cases: 10.35
Count of perfect (error zero) individuals by case: (214 214 222 214 151 214 214 214 183 293 214 222 214 146 146 146 146 146 214 146 146 146 222 146 214 214 214)
Population mean number of perfect (error zero) cases: 10.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 108709.822
Median total errors in population: 468
Error averages by case: (4553.528 4583.688 5255.178 5426.812 6627.644 3250.088 2942.894 3017.558 1359.956 1272.002 3385.622 3775.242 3602.618 2736.278 3202.85 6446.078 4540.64 3415.95 5194.05 4790.924 4085.524 4300.174 3832.306 4513.452 5061.264 5372.196 2165.306)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.14
Average program size in population (points): 43.388
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.14
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 375355461
--- Timings ---
Current time: 1481339479716 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 259
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 260
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 260
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_lt exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 39
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_lt exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (boolean_not integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 207 216 207 155 207 207 207 174 284 207 216 207 147 147 147 147 147 207 147 147 147 216 147 207 207 207)
Population mean number of elite cases: 10.14
Count of perfect (error zero) individuals by case: (207 207 216 207 155 207 207 207 174 284 207 216 207 147 147 147 147 147 207 147 147 147 216 147 207 207 207)
Population mean number of perfect (error zero) cases: 10.14
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 4141784.382
Median total errors in population: 468
Error averages by case: (151738.616 229935.192 328335.626 349403.494 310328.426 101418.556 65741.254 65854.446 5134.552 3226.308 97631.564 144663.942 110511.098 42332.954 70878.014 276259.634 129381.374 147919.676 202541.686 151669.194 136321.154 147593.954 150193.292 148313.414 246790.204 299603.092 28063.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.688
Average program size in population (points): 42.948
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 130500
Number of point (instruction) evaluations so far: 376724424
--- Timings ---
Current time: 1481339486297 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 260
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 261
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 261
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_dup_items exec_swap (boolean_not string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (boolean_not exec_swap (integer_add) (integer_pop in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 44
Percent parens: 0.182
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_dup_items exec_swap (boolean_not string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 44
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 209 219 209 136 209 210 210 172 261 210 219 210 128 128 128 128 127 210 128 128 128 219 128 210 210 210)
Population mean number of elite cases: 9.79
Count of perfect (error zero) individuals by case: (210 209 219 209 136 209 210 210 172 261 210 219 210 128 128 128 128 127 210 128 128 128 219 128 210 210 210)
Population mean number of perfect (error zero) cases: 9.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 6.8729655625804E10
Median total errors in population: 468
Error averages by case: (2.686213369846E9 3.10289363921E9 3.608925121848E9 3.714980532308E9 3.557861057238E9 2.432070296884E9 2.250069715032E9 2.250077788104E9 1.2399009768E7 4205262.948 2.410849511322E9 2.657120558712E9 2.476764204312E9 1.528301620704E9 2.370467934614E9 3.941001198728E9 2.746696646414E9 1.390353190156E9 2.949388725352E9 3.024208615734E9 3.024119642934E9 3.14371019736E9 2.686106005776E9 3.102901017406E9 3.185639515288E9 3.458252461388E9 1.014078786418E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.49
Average program size in population (points): 42.654
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 378058344
--- Timings ---
Current time: 1481339492883 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 261
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 262
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 262
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (integer_min boolean_dup_times exec_dup_items exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank boolean_rot) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))))) ())
Lexicase best partial simplification: (exec_swap (exec_dup (exec_yank integer_add boolean_xor (in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 43
Percent parens: 0.186
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (integer_min boolean_dup_times exec_dup_items exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not string_dup exec_dup (string_yank boolean_rot) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))))) ())
Zero cases best partial simplification: (boolean_dup_times (exec_dup (exec_yank integer_add string_dup (in1 100 in2 integer_mult in1 99 integer_mult integer_max))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 43
Percent parens: 0.186
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 217 224 217 139 217 217 217 180 272 217 224 217 133 133 133 133 133 217 133 133 133 224 133 217 217 217)
Population mean number of elite cases: 10.13
Count of perfect (error zero) individuals by case: (217 217 224 217 139 217 217 217 180 272 217 224 217 133 133 133 133 133 217 133 133 133 224 133 217 217 217)
Population mean number of perfect (error zero) cases: 10.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 69595.748
Median total errors in population: 468
Error averages by case: (2961.246 1894.072 1988.85 2103.028 4899.384 1545.042 1742.034 1855.498 1165.864 995.616 1833.404 1710.978 1965.614 2166.566 2648.368 4978.918 3502.588 3259.902 3423.498 3790.608 3483.688 3637.798 1722.602 3712.156 2593.278 2540.278 1474.87)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.04
Average program size in population (points): 43.436
Average percent parens in population: 0.171
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 131500
Number of point (instruction) evaluations so far: 379430399
--- Timings ---
Current time: 1481339500269 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 262
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 263
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 263
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add exec_dup) (string_length in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 214 218 214 139 214 214 214 155 255 214 218 214 128 128 128 128 127 214 128 128 128 218 128 214 214 214)
Population mean number of elite cases: 9.84
Count of perfect (error zero) individuals by case: (214 214 218 214 139 214 214 214 155 255 214 218 214 128 128 128 128 127 214 128 128 128 218 128 214 214 214)
Population mean number of perfect (error zero) cases: 9.84
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3.57529892244E8
Median total errors in population: 697
Error averages by case: (1.6400985396E7 2.4011720866E7 3.2745129668E7 3.4525745198E7 3.0336438766E7 1.1304712342E7 7373717.696 7377751.056 378808.204 218755.432 1.0874960968E7 1.5790553732E7 1.2237360088E7 2869366.906 2688152.738 2.0726951618E7 9672957.758 283745.46 2.1322787976E7 8891804.938 3093358.418 3740475.218 1.6347318216E7 5539633.23 2.5505483232E7 3.0220186716E7 3051030.408)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.158
Average program size in population (points): 42.518
Average percent parens in population: 0.172
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 380774037
--- Timings ---
Current time: 1481339507025 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 263
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 264
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 264
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_mult boolean_dup_items exec_dup (string_yank integer_min string_butlast string_yank) boolean_dup exec_dup (integer_fromstring exec_do*times (exec_yank integer_add boolean_not string_dup_times exec_dup (string_yank string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))
Lexicase best partial simplification: (integer_min integer_mult boolean_dup_items exec_dup (integer_min string_butlast string_yank) exec_dup (integer_fromstring exec_do*times (exec_yank integer_add boolean_not string_dup_times exec_dup (string_yank string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 48
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup_times} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_mult boolean_dup_items exec_dup (string_yank integer_min string_butlast string_yank) boolean_dup exec_dup (integer_fromstring exec_do*times (exec_yank integer_add boolean_not string_dup_times exec_dup (string_yank string_swap) string_parse_to_chars) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))
Zero cases best partial simplification: (integer_min integer_min boolean_dup_items exec_dup string_yank integer_min string_butlast string_yank boolean_dup exec_dup (integer_fromstring exec_do*times (exec_yank integer_add string_dup_times exec_dup (string_yank string_swap)) integer_add integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 48
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 226 237 226 125 226 227 227 193 267 227 237 227 118 118 118 118 118 227 118 118 118 237 118 227 227 227)
Population mean number of elite cases: 10.16
Count of perfect (error zero) individuals by case: (227 226 237 226 125 226 227 227 193 267 227 237 227 118 118 118 118 118 227 118 118 118 237 118 227 227 227)
Population mean number of perfect (error zero) cases: 10.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 6607099.084
Median total errors in population: 468
Error averages by case: (248019.934 290131.628 349442.04 362792.184 332333.562 225296.936 211855.242 211887.642 199029.444 198798.366 223706.766 244863.912 229097.922 201710.564 201642.92 271357.94 219773.81 199626.852 274316.958 217241.442 202602.002 203772.5 247562.206 207613.822 299573.766 331253.542 201795.182)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.174
Average program size in population (points): 42.346
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
--- Run Statistics ---
Number of program evaluations used so far: 132500
Number of point (instruction) evaluations so far: 382102062
--- Timings ---
Current time: 1481339515754 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 264
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 265
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 265
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (integer_dec exec_swap (boolean_not integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (string_yank exec_swap (integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 208 217 208 136 209 209 209 174 276 209 217 209 128 128 128 128 127 209 128 128 128 217 128 209 209 209)
Population mean number of elite cases: 9.79
Count of perfect (error zero) individuals by case: (209 208 217 208 136 209 209 209 174 276 209 217 209 128 128 128 128 127 209 128 128 128 217 128 209 209 209)
Population mean number of perfect (error zero) cases: 9.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 38
Size: 48
Percent parens: 0.208
--- Population Statistics ---
Average total errors in population: 2582023.3
Median total errors in population: 468
Error averages by case: (142949.418 46520.112 49550.734 58295.522 335812.09 26318.558 43836.978 51833.342 7151.12 4687.662 49489.384 36036.814 59496.884 58128.208 74553.86 308929.162 163736.638 38675.494 187610.936 175361.36 110829.896 124990.906 36584.484 146627.376 111555.83 105386.222 27074.31)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.65
Average program size in population (points): 42.902
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 383429261
--- Timings ---
Current time: 1481339522351 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 265
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 266
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 266
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_and integer_lt exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 43
Percent parens: 0.163
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_and integer_lt exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best partial simplification: (exec_swap integer_add (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 43
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (228 227 233 227 125 227 228 228 195 271 228 233 228 120 120 120 120 119 228 120 120 120 233 120 228 228 228)
Population mean number of elite cases: 10.20
Count of perfect (error zero) individuals by case: (228 227 233 227 125 227 228 228 195 271 228 233 228 120 120 120 120 119 228 120 120 120 233 120 228 228 228)
Population mean number of perfect (error zero) cases: 10.20
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 12 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.4009425170792E10
Median total errors in population: 468
Error averages by case: (2.000394290244E9 2.000336580292E9 2.00039834421E9 2.00042050373E9 2.00069121769E9 2.000251921066E9 2.00025644106E9 2.000264632468E9 2.000206128348E9 2.00020331254E9 2.000273936348E9 2.00028110949E9 2.000289476588E9 2.000267758508E9 2.00028692436E9 2.000632564148E9 2.000411908838E9 2.000240733856E9 2.000464866388E9 2.000425369618E9 2.000331160978E9 2.000349943336E9 2.000284335142E9 2.000381107374E9 2.00041226824E9 2.000437321304E9 2.000231014628E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.418
Average program size in population (points): 42.602
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.138
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 133500
Number of point (instruction) evaluations so far: 384741147
--- Timings ---
Current time: 1481339530158 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 266
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 267
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 267
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_dec string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (boolean_shove exec_dup in2 exec_yank integer_add (in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 51
Percent parens: 0.137
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_yank} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_dec string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_min integer_min integer_min string_yank) boolean_not integer_inc exec_yank integer_dec integer_pop integer_gt exec_yank integer_dec exec_swap (exec_dup (string_yank integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup boolean_shove string_yank exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (boolean_eq exec_dup integer_dec exec_dup (exec_yank integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 51
Percent parens: 0.137
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 213 220 213 127 213 213 213 198 259 213 220 213 121 121 121 121 121 213 121 121 121 220 121 213 213 213)
Population mean number of elite cases: 9.78
Count of perfect (error zero) individuals by case: (213 213 220 213 127 213 213 213 198 259 213 220 213 121 121 121 121 121 213 121 121 121 220 121 213 213 213)
Population mean number of perfect (error zero) cases: 9.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 1.8215931542E8
Median total errors in population: 468
Error averages by case: (6796615.306 1.0921881608E7 1.593210371E7 1.698218368E7 1.5392394078E7 4279795.504 2477717.72 2477823.616 44694.244 21216.312 4069756.632 6508156.82 4722454.428 1232036.318 2093809.494 1.5218641566E7 5855873.406 1556798.36 9402559.812 6963592.638 4374182.078 5124573.47 6795153.294 5953269.23 1.174141107E7 1.4440530718E7 780090.308)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.342
Average program size in population (points): 43.72
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 386049809
--- Timings ---
Current time: 1481339537842 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 267
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 268
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 268
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min string_yank) integer_inc integer_inc integer_max boolean_rot integer_dec integer_gt string_butlast integer_dec string_contains integer_gt string_contains integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_min exec_dup_items exec_do*range integer_max integer_dec integer_gt string_butlast (exec_dup (string_yank exec_yank integer_add boolean_not exec_dup string_yank boolean_shove boolean_eq (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 53
Percent parens: 0.151
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_do*range} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_inc} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_dec} {:close 0, :instruction string_contains} {:close 0, :instruction integer_gt} {:close 0, :instruction string_contains} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_do*range (integer_min string_yank) integer_inc integer_inc integer_max boolean_rot integer_dec integer_gt string_butlast integer_dec string_contains integer_gt string_contains integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (integer_gt integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (exec_dup_items integer_min integer_inc integer_gt string_contains string_contains exec_dup (string_yank exec_yank integer_add boolean_not (boolean_shove in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 53
Percent parens: 0.151
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 210 222 210 149 210 210 210 204 279 210 222 210 136 136 136 136 136 210 136 136 136 222 136 210 210 210)
Population mean number of elite cases: 10.08
Count of perfect (error zero) individuals by case: (210 210 222 210 149 210 210 210 204 279 210 222 210 136 136 136 136 136 210 136 136 136 222 136 210 210 210)
Population mean number of perfect (error zero) cases: 10.08
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 1378014.032
Median total errors in population: 362
Error averages by case: (75438.918 27327.214 29365.348 33888.464 173651.272 16210.95 24611.048 28644.056 4624.368 3266.97 27828.494 21454.756 33001.256 31116.138 39349.248 159378.162 85273.944 20513.256 98327.544 91033.096 57699.176 64949.57 21773.738 76131.24 60233.568 57404.732 15517.506)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.798
Average program size in population (points): 44.302
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.498
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.498
Total error diversity:				 0.106
Error (vector) diversity:			 0.108
--- Run Statistics ---
Number of program evaluations used so far: 134500
Number of point (instruction) evaluations so far: 387360800
--- Timings ---
Current time: 1481339547142 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 268
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 269
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 269
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop boolean_not string_dup integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best partial simplification: (exec_swap integer_add (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 48
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop boolean_not string_dup integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best partial simplification: (exec_swap (integer_add string_yank) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 48
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 213 224 213 131 213 213 213 211 258 213 224 213 127 127 127 127 127 213 127 127 127 224 127 213 213 213)
Population mean number of elite cases: 9.94
Count of perfect (error zero) individuals by case: (213 213 224 213 131 213 213 213 211 258 213 224 213 127 127 127 127 127 213 127 127 127 224 127 213 213 213)
Population mean number of perfect (error zero) cases: 9.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 1.185960872E7
Median total errors in population: 468
Error averages by case: (530426.632 570171.344 743581.23 789933.132 1110005.27 286231.508 217611.196 225551.92 15350.054 9455.028 301878.82 391241.874 342594.304 148949.926 205319.37 979795.002 471760.5 202353.846 695024.812 512751.302 337143.782 378674.438 403369.772 432422.958 685739.992 772590.728 99679.98)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.228
Average program size in population (points): 43.708
Average percent parens in population: 0.171
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 388633808
--- Timings ---
Current time: 1481339555083 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 269
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 270
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 270
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop boolean_not string_dup integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst))))
Lexicase best partial simplification: (integer_min exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 304
Lexicase best mean error: 11.259259
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop boolean_not string_dup integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult string_split integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 2 0 0 0 0 0 0 0 0 10 25 22 16 73 0 26 46 46 0 38 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 304
Zero cases best mean error: 11.259259
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 217 222 217 142 217 217 217 204 300 217 222 217 137 137 137 137 137 217 137 137 137 222 137 217 217 217)
Population mean number of elite cases: 10.30
Count of perfect (error zero) individuals by case: (217 217 222 217 142 217 217 217 204 300 217 222 217 137 137 137 137 137 217 137 137 137 222 137 217 217 217)
Population mean number of perfect (error zero) cases: 10.30
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction string_rest} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times string_rest integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times string_rest integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 2.2205818841572E10
Median total errors in population: 468
Error averages by case: (6.86002629214E8 1.102737879956E9 1.60871601278E9 1.714752118038E9 1.5573806574E9 4.32001479846E8 2.50001517676E8 2.50001589114E8 4394884.708 2000776.886 4.10759658936E8 6.5701965086E8 4.76657779956E8 1.59015559052E8 3.70387844686E8 1.940602472692E9 7.46498827708E8 1.185435803958E9 9.49107128194E8 1.024003015416E9 1.024002401456E9 1.143576564164E9 6.8600166594E8 1.102738761112E9 1.185410478454E9 1.458002477894E9 7.8609205476E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.68
Average program size in population (points): 42.978
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.114
Error (vector) diversity:			 0.116
--- Run Statistics ---
Number of program evaluations used so far: 135500
Number of point (instruction) evaluations so far: 389835574
--- Timings ---
Current time: 1481339562430 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 270
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 271
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 271
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_parse_to_chars string_yank string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 39
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_parse_to_chars} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_parse_to_chars string_yank string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_frominteger boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 208 218 208 142 208 208 208 200 281 208 218 208 132 132 132 132 132 208 132 132 132 218 132 208 208 208)
Population mean number of elite cases: 9.92
Count of perfect (error zero) individuals by case: (208 208 218 208 142 208 208 208 200 281 208 218 208 132 132 132 132 132 208 132 132 132 218 132 208 208 208)
Population mean number of perfect (error zero) cases: 9.92
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 1.267329623652E10
Median total errors in population: 468
Error averages by case: (4.80203158418E8 9.04245840036E8 1.496106350632E9 1.629014923788E9 1.341365241168E9 2.59201924566E8 1.25001935108E8 1.25002008596E8 572212.39 201114.72 2.42349349164E8 4.53344534392E8 2.95528984356E8 3.0907917636E7 3.7358401106E7 9.03941592372E8 2.52891017016E8 2242749.918 7.40304776672E8 2.51947035372E8 6.2890930412E7 8.4088799476E7 4.80202129474E8 1.39706543824E8 9.95745664922E8 1.312202890314E9 2.6728210672E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.992
Average program size in population (points): 43.376
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.128
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 391064428
--- Timings ---
Current time: 1481339569250 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 271
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 272
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 272
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_substring exec_dup (boolean_empty string_swap) string_parse_to_chars) (string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap (integer_add boolean_empty) (boolean_xor exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 43
Percent parens: 0.163
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_substring exec_dup (boolean_empty string_swap) string_parse_to_chars) (string_dup exec_dup (string_yank string_swap) boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add boolean_empty) (exec_dup boolean_xor exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 43
Percent parens: 0.163
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 209 226 209 147 209 209 209 204 273 209 226 209 141 141 141 141 141 209 141 141 141 226 141 209 209 209)
Population mean number of elite cases: 10.16
Count of perfect (error zero) individuals by case: (209 209 226 209 147 209 209 209 204 273 209 226 209 141 141 141 141 141 209 141 141 141 226 141 209 209 209)
Population mean number of perfect (error zero) cases: 10.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_add} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (integer_add exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (integer_add exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 3475901.0
Median total errors in population: 468
Error averages by case: (173626.44 159731.422 199426.176 211366.89 337699.662 87200.852 74256.628 78412.38 7939.414 5139.76 96776.992 115339.92 109214.8 53617.53 61440.1 281795.506 150104.734 27077.73 220355.928 152290.926 84334.206 96081.21 118388.068 118322.894 199979.124 217435.356 38546.352)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.368
Average program size in population (points): 43.804
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 136500
Number of point (instruction) evaluations so far: 392314706
--- Timings ---
Current time: 1481339576411 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 272
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 273
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 273
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_and integer_lt exec_dup (string_yank string_length string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 39
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_and integer_lt exec_dup (string_yank string_length string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add boolean_not) (boolean_and in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 39
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (231 231 238 231 133 231 231 231 205 269 231 238 231 125 125 125 125 125 231 125 125 125 238 125 231 231 231)
Population mean number of elite cases: 10.44
Count of perfect (error zero) individuals by case: (231 231 238 231 133 231 231 231 205 269 231 238 231 125 125 125 125 125 231 125 125 125 238 125 231 231 231)
Population mean number of perfect (error zero) cases: 10.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 1317410.41
Median total errors in population: 468
Error averages by case: (72593.336 24302.9 25610.378 29924.2 168677.604 14377.072 23083.47 27077.366 4270.998 2952.642 25934.152 19183.466 30932.698 30040.462 38215.828 155349.694 82940.206 19965.23 94841.698 88715.598 56329.758 63427.806 19451.208 74295.994 56769.64 53582.628 14564.378)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.002
Average program size in population (points): 43.37
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 393537560
--- Timings ---
Current time: 1481339583150 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 273
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 274
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 274
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add string_parse_to_chars) (boolean_yankdup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (196 196 204 196 144 196 196 196 184 268 196 204 196 142 142 142 142 141 196 142 142 142 204 142 196 196 196)
Population mean number of elite cases: 9.67
Count of perfect (error zero) individuals by case: (196 196 204 196 144 196 196 196 184 268 196 204 196 142 142 142 142 141 196 142 142 142 204 142 196 196 196)
Population mean number of perfect (error zero) cases: 9.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction string_flush} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove string_flush exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove string_flush exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 2.2266161979782E10
Median total errors in population: 468
Error averages by case: (6.89507453954E8 1.10419782814E9 1.610674579562E9 1.717185287024E9 1.570966988558E9 4.32449012476E8 2.50550515564E8 2.50654630634E8 4403964.408 2005287.562 4.11608382952E8 6.57828828938E8 4.77786465868E8 1.59355092998E8 3.70800094316E8 1.94980076531E9 7.49112535664E8 1.185451580996E9 9.54804460714E8 1.026613066724E9 1.024688337004E9 1.144481776558E9 6.86845930286E8 1.104211430256E9 1.189263102382E9 1.462141179418E9 7.8773401516E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.594
Average program size in population (points): 42.828
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.136
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 137500
Number of point (instruction) evaluations so far: 394779909
--- Timings ---
Current time: 1481339589947 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 274
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 275
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 275
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction string_rest} {:close 0, :instruction string_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times string_rest string_rot integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap (integer_add boolean_not) (integer_pop exec_yank in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 40
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction string_rest} {:close 0, :instruction string_rot} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times string_rest string_rot integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (integer_min exec_swap (integer_add string_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 40
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 232 243 232 110 232 232 232 223 257 232 243 232 106 106 106 106 106 232 106 106 106 243 106 232 232 232)
Population mean number of elite cases: 10.11
Count of perfect (error zero) individuals by case: (232 232 243 232 110 232 232 232 223 257 232 243 232 106 106 106 106 106 232 106 106 106 243 106 232 232 232)
Population mean number of perfect (error zero) cases: 10.11
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 1.19342838984E8
Median total errors in population: 468
Error averages by case: (6932909.832 2890547.542 3885347.25 4830079.722 2.6997639176E7 877755.718 1072757.484 1276827.452 14633.352 6781.178 1668569.92 1595339.248 2223203.26 648253.264 785729.284 1.8236246336E7 5141654.276 65169.288 1.1294849388E7 5128809.088 1315002.648 1746184.608 1665149.52 2869510.964 7643073.926 8217842.232 312973.028)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.23
Average program size in population (points): 43.58
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 396011520
--- Timings ---
Current time: 1481339597075 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 275
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 276
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 276
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))) ())
Lexicase best partial simplification: (exec_swap (exec_swap integer_add (integer_gt in1 100 in2 integer_mult in1 99 integer_mult integer_max)))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 39
Percent parens: 0.179
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))) ())
Zero cases best partial simplification: (string_dup exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 39
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 216 225 217 126 216 217 217 203 269 217 225 217 124 124 124 124 124 217 124 124 124 225 124 217 217 217)
Population mean number of elite cases: 9.98
Count of perfect (error zero) individuals by case: (217 216 225 217 126 216 217 217 203 269 217 225 217 124 124 124 124 124 217 124 124 124 225 124 217 217 217)
Population mean number of perfect (error zero) cases: 9.98
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 11 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 244
Mean: 9.037037
Genome size: 41
Size: 51
Percent parens: 0.196
--- Population Statistics ---
Average total errors in population: 5.400255783045E10
Median total errors in population: 468
Error averages by case: (2.000121751488E9 2.000116241584E9 2.00017713382E9 2.000194815852E9 2.000301789846E9 2.000041154194E9 2.000036191332E9 2.000040187596E9 2.000004424472E9 2.00000302303E9 2.000050986852E9 2.000065627612E9 2.000061382488E9 2.000032797924E9 2.000040811434E9 2.000227417468E9 2.000103586906E9 2.00002037103E9 2.00017026528E9 2.000106775902E9 2.000059733142E9 2.000067984684E9 2.000068610114E9 2.000082707306E9 2.000157920826E9 2.000186592954E9 2.000017545314E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.672
Average program size in population (points): 42.786
Average percent parens in population: 0.164
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.134
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 138500
Number of point (instruction) evaluations so far: 397200570
--- Timings ---
Current time: 1481339605113 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 276
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 277
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 277
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction string_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank boolean_dup_times integer_min integer_min exec_dup_items) exec_swap (boolean_not integer_add boolean_rot) (boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (string_fromboolean in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (boolean_not exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 47
Percent parens: 0.170
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction boolean_rot} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction string_fromboolean} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank boolean_dup_times integer_min integer_min exec_dup_items) exec_swap (boolean_not integer_add boolean_rot) (boolean_xor integer_pop exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (string_fromboolean in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (exec_noop exec_swap (boolean_not integer_add) (boolean_eq in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 47
Percent parens: 0.170
--- Lexicase Population Statistics ---
Count of elite individuals by case: (241 241 246 241 134 241 241 241 222 298 241 246 241 129 129 129 129 129 241 129 129 129 246 129 241 241 241)
Population mean number of elite cases: 10.89
Count of perfect (error zero) individuals by case: (241 241 246 241 134 241 241 241 222 298 241 246 241 129 129 129 129 129 241 129 129 129 246 129 241 241 241)
Population mean number of perfect (error zero) cases: 10.89
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 1385208.944
Median total errors in population: 468
Error averages by case: (75327.636 26879.212 29228.034 33862.052 175325.352 15410.55 23918.606 27990.916 4278.1 2966.694 27152.286 20764.53 32382.534 31176.656 39904.278 161881.68 86352.0 21953.988 98524.384 92562.552 59232.872 66643.496 21095.818 77793.184 60163.166 57459.588 14978.78)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.666
Average program size in population (points): 42.714
Average percent parens in population: 0.164
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 398359964
--- Timings ---
Current time: 1481339611887 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 277
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 278
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 278
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction string_concat} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add integer_min string_butlast string_yank string_concat exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (string_yank exec_swap (integer_add exec_noop) (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 48
Percent parens: 0.167
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction string_concat} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add integer_min string_butlast string_yank string_concat exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (integer_min exec_swap (integer_add exec_dup) (boolean_eq exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 212 225 212 134 212 212 212 232 271 212 225 212 127 127 127 127 127 212 127 127 127 225 127 212 212 212)
Population mean number of elite cases: 10.00
Count of perfect (error zero) individuals by case: (212 212 225 212 134 212 212 212 232 271 212 225 212 127 127 127 127 127 212 127 127 127 225 127 212 212 212)
Population mean number of perfect (error zero) cases: 10.00
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 3998981.614
Median total errors in population: 362
Error averages by case: (191907.232 136124.932 197954.73 220012.194 484981.656 51926.678 56349.606 64420.71 7566.346 5018.616 73576.146 80842.942 88933.014 67828.658 86793.844 427041.85 209476.516 41993.962 262269.624 222816.912 130411.192 148851.082 84052.8 179390.172 210845.602 236048.16 31546.438)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.22
Average program size in population (points): 43.41
Average percent parens in population: 0.164
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.138
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 139500
Number of point (instruction) evaluations so far: 399530420
--- Timings ---
Current time: 1481339619096 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 278
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 279
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 279
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction string_concat} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add integer_min string_butlast string_yank string_concat exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 48
Percent parens: 0.167
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_mult} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_min} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction string_concat} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_mult string_butlast string_yank integer_dec exec_swap (boolean_not integer_add integer_min string_butlast string_yank string_concat exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (exec_swap integer_add (integer_pop string_length in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (189 189 199 189 166 189 189 189 206 282 189 199 189 158 158 158 158 158 189 158 158 158 199 158 189 189 189)
Population mean number of elite cases: 9.88
Count of perfect (error zero) individuals by case: (189 189 199 189 166 189 189 189 206 282 189 199 189 158 158 158 158 158 189 158 158 158 199 158 189 189 189)
Population mean number of perfect (error zero) cases: 9.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 87588.236
Median total errors in population: 362
Error averages by case: (3884.85 4346.222 5238.202 5446.206 6283.322 2759.53 2271.12 2299.25 815.902 735.822 2804.154 3376.09 2991.942 1684.2 1869.838 5358.368 3278.522 1617.648 4649.942 3325.178 2314.858 2493.408 3444.524 2814.818 4757.302 5214.67 1512.348)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.834
Average program size in population (points): 43.05
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 400706052
--- Timings ---
Current time: 1481339625702 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 279
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 280
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 280
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (integer_min exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (integer_min exec_swap (boolean_not integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 210 224 211 144 210 210 210 228 285 210 224 210 135 135 135 135 134 210 135 135 135 224 135 210 210 210)
Population mean number of elite cases: 10.13
Count of perfect (error zero) individuals by case: (210 210 224 211 144 210 210 210 228 285 210 224 210 135 135 135 135 134 210 135 135 135 224 135 210 210 210)
Population mean number of perfect (error zero) cases: 10.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 2.70598594672E8
Median total errors in population: 362
Error averages by case: (1.1925345544E7 1.2894874744E7 1.822090345E7 1.9719070826E7 3.0514677252E7 5228805.904 3752549.268 3952584.004 287953.628 242909.184 5690645.102 7880652.518 6719824.1 2395618.116 3513652.564 2.7234296088E7 1.062889158E7 2098448.384 1.6807568968E7 1.1908947756E7 6531996.476 7710750.776 8200910.88 9429509.72 1.6479829924E7 1.9192977248E7 1434400.668)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.56
Average program size in population (points): 43.88
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 140500
Number of point (instruction) evaluations so far: 401897274
--- Timings ---
Current time: 1481339632628 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 280
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 281
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 281
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 29
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 236 244 238 130 236 236 236 248 278 236 244 236 125 125 125 125 125 236 125 125 125 244 125 236 236 236)
Population mean number of elite cases: 10.69
Count of perfect (error zero) individuals by case: (236 236 244 238 130 236 236 236 248 278 236 244 236 125 125 125 125 125 236 125 125 125 244 125 236 236 236)
Population mean number of perfect (error zero) cases: 10.69
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 148561.054
Median total errors in population: 362
Error averages by case: (6745.134 6624.472 7371.632 7603.68 9987.414 4944.79 4445.148 4520.964 1593.858 1335.322 5106.576 5641.04 5404.488 3511.55 3734.14 9014.062 6135.76 2392.988 7715.696 6202.564 4403.484 4743.246 5713.194 5355.328 7384.658 7726.626 3203.24)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.506
Average program size in population (points): 43.822
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 403085235
--- Timings ---
Current time: 1481339638733 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 281
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 282
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 282
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap integer_add (string_yank string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (boolean_dup_times exec_dup_items exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 207 212 210 134 207 207 207 216 274 207 212 207 131 131 131 131 131 207 131 131 131 212 131 207 207 207)
Population mean number of elite cases: 9.85
Count of perfect (error zero) individuals by case: (207 207 212 210 134 207 207 207 216 274 207 212 207 131 131 131 131 131 207 131 131 131 212 131 207 207 207)
Population mean number of perfect (error zero) cases: 9.85
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 62192.144
Median total errors in population: 362
Error averages by case: (2419.806 3000.084 3507.482 3620.73 3328.266 2101.362 1730.674 1723.002 803.06 797.766 2042.624 2430.554 2147.414 1411.114 1665.27 3295.138 2265.622 1932.64 2744.492 2423.778 2125.578 2229.33 2470.826 2316.694 3050.81 3343.17 1264.858)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.326
Average program size in population (points): 43.64
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 141500
Number of point (instruction) evaluations so far: 404245729
--- Timings ---
Current time: 1481339645144 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 282
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 283
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 283
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap integer_add (boolean_not exec_yank in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (199 199 201 202 148 199 199 199 207 278 199 201 199 140 140 140 140 140 199 140 140 140 201 140 199 199 199)
Population mean number of elite cases: 9.77
Count of perfect (error zero) individuals by case: (199 199 201 202 148 199 199 199 207 278 199 201 199 140 140 140 140 140 199 140 140 140 201 140 199 199 199)
Population mean number of perfect (error zero) cases: 9.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction string_swap} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times string_swap exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times string_swap exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5284702.762
Median total errors in population: 362
Error averages by case: (196558.75 195598.472 196111.824 196333.134 200296.04 194491.874 194442.636 194560.02 193073.104 192989.816 194801.91 194938.752 195048.0 194380.438 194852.34 199850.766 196736.25 194407.044 197523.048 197053.418 195806.538 196113.918 194983.168 196521.646 196642.446 196807.178 193780.232)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.346
Average program size in population (points): 43.602
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 405398127
--- Timings ---
Current time: 1481339651742 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 283
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 284
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 284
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction string_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_dup_times exec_dup_times (boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items) exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_add in1 string_dup exec_k (boolean_swap exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)) ()))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 45
Percent parens: 0.178
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction string_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_dup_times exec_dup_times (boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items) exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_add in1 string_dup exec_k (boolean_swap exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)) ()))
Zero cases best partial simplification: (integer_min exec_swap integer_add (exec_dup in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 45
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 210 215 211 147 210 210 210 217 283 210 215 210 139 139 139 139 139 210 139 139 139 215 139 210 210 210)
Population mean number of elite cases: 10.13
Count of perfect (error zero) individuals by case: (210 210 215 211 147 210 210 210 217 283 210 215 210 139 139 139 139 139 210 139 139 139 215 139 210 210 210)
Population mean number of perfect (error zero) cases: 10.13
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 2.2205870916166E10
Median total errors in population: 362
Error averages by case: (6.86005714494E8 1.10274316913E9 1.608722658106E9 1.714758960714E9 1.557384299426E9 4.32004683294E8 2.50003720206E8 2.50003715214E8 4395301.608 2001172.236 4.10762574348E8 6.57023628874E8 4.76660876646E8 1.59016634982E8 3.70388974672E8 1.940605706878E9 7.46500903006E8 1.18541031915E9 9.49110650918E8 1.024005103634E9 1.024003743754E9 1.143578039494E9 6.86005741338E8 1.102740493482E9 1.18541543927E9 1.45800824555E9 7.8610445742E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.592
Average program size in population (points): 44.134
Average percent parens in population: 0.171
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 142500
Number of point (instruction) evaluations so far: 406561314
--- Timings ---
Current time: 1481339658444 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 284
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 285
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 285
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_or exec_do*times (integer_flush) boolean_not boolean_yank exec_yank integer_min integer_min integer_min string_yank integer_inc boolean_pop integer_max string_fromboolean integer_dec integer_gt exec_yank integer_dec string_empty boolean_dup_items boolean_rot integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (exec_when (integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))) ())
Lexicase best partial simplification: (boolean_or boolean_yank integer_min integer_inc integer_dec integer_gt integer_dec (exec_dup (string_yank exec_yank integer_add exec_dup boolean_shove (in1 100 in2 integer_mult in1 99 integer_mult integer_max))))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 56
Percent parens: 0.161
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_pop} {:close 0, :instruction integer_max} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_gt} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction string_empty} {:close 0, :instruction boolean_dup_items} {:close 0, :instruction boolean_rot} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_rot} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_or exec_do*times (integer_flush) boolean_not boolean_yank exec_yank integer_min integer_min integer_min string_yank integer_inc boolean_pop integer_max string_fromboolean integer_dec integer_gt exec_yank integer_dec string_empty boolean_dup_items boolean_rot integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_not exec_dup (string_yank string_rot boolean_shove boolean_eq exec_dup (exec_when (integer_dec in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max string_replacefirst)))))) ())
Zero cases best partial simplification: (boolean_or exec_do*times (integer_flush) boolean_not exec_yank integer_max string_fromboolean integer_gt integer_dec string_empty boolean_rot integer_dec exec_swap (exec_dup (string_yank exec_yank integer_add boolean_not (boolean_shove (integer_dec in1 100 in2 integer_mult in1 99 integer_mult integer_max string_replacefirst)))) ())
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 56
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (203 203 214 205 141 202 203 203 220 273 203 214 203 133 133 133 133 133 203 133 133 133 214 133 203 203 203)
Population mean number of elite cases: 9.82
Count of perfect (error zero) individuals by case: (203 203 214 205 141 202 203 203 220 273 203 214 203 133 133 133 133 133 203 133 133 133 214 133 203 203 203)
Population mean number of perfect (error zero) cases: 9.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 2895221.182
Median total errors in population: 362
Error averages by case: (142955.536 135020.546 187183.06 202254.168 319438.316 57514.424 48233.986 52349.106 4407.124 2981.51 67277.682 85042.132 79034.826 37640.99 45468.008 251046.374 120079.472 20796.212 192276.282 122413.82 65474.9 75045.494 88226.204 93116.06 176764.836 200838.448 22341.666)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.156
Average program size in population (points): 44.752
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 407754891
--- Timings ---
Current time: 1481339667279 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 285
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 286
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 286
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction integer_empty} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_empty exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank integer_empty) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (integer_pop string_yank boolean_yankdup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction integer_empty} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_empty exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank integer_empty) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add string_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (217 217 221 218 154 217 217 217 223 301 217 221 217 149 149 149 149 149 217 149 149 149 221 149 217 217 217)
Population mean number of elite cases: 10.57
Count of perfect (error zero) individuals by case: (217 217 221 218 154 217 217 217 223 301 217 221 217 149 149 149 149 149 217 149 149 149 221 149 217 217 217)
Population mean number of perfect (error zero) cases: 10.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5384845.52
Median total errors in population: 362
Error averages by case: (255581.014 242995.114 354361.954 386621.506 604623.646 93469.202 104744.422 112659.974 9926.92 6609.646 112617.674 144262.498 134222.51 80895.664 94884.566 463824.216 215163.63 40226.088 351333.102 220382.542 127182.622 146696.176 150301.078 185434.222 324555.93 376588.718 44680.886)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.46
Average program size in population (points): 43.934
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.106
Error (vector) diversity:			 0.106
--- Run Statistics ---
Number of program evaluations used so far: 143500
Number of point (instruction) evaluations so far: 408891582
--- Timings ---
Current time: 1481339673675 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 286
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 287
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 287
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min boolean_dup_times integer_min boolean_not integer_add exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)) ())
Lexicase best partial simplification: (in1 exec_swap integer_add (100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min boolean_dup_times integer_min boolean_not integer_add exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)) ())
Zero cases best partial simplification: (exec_noop exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 209 218 210 133 211 209 209 220 268 209 218 209 128 128 129 128 128 209 128 128 128 218 128 209 209 209)
Population mean number of elite cases: 9.88
Count of perfect (error zero) individuals by case: (209 209 218 210 133 211 209 209 220 268 209 218 209 128 128 129 128 128 209 128 128 128 218 128 209 209 209)
Population mean number of perfect (error zero) cases: 9.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 2410481.204
Median total errors in population: 362
Error averages by case: (101956.126 136692.692 175288.72 182955.028 175724.9 73733.662 51930.024 52080.424 4463.076 3044.99 71694.432 97159.116 79134.804 31217.718 40248.34 162776.364 86678.664 23441.654 126553.548 93171.354 60187.96 67643.998 99954.41 78635.136 144321.55 165105.966 24686.548)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.004
Average program size in population (points): 44.544
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 410073049
--- Timings ---
Current time: 1481339679940 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 287
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 288
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 288
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction integer_empty} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_empty exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank integer_empty) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_empty exec_swap integer_add (string_length in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 38
Percent parens: 0.158
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_empty} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction integer_empty} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_length} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_empty exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank integer_empty) string_parse_to_chars) (integer_dup_items integer_pop exec_dup (string_yank string_length boolean_yankdup boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 38
Percent parens: 0.158
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 206 215 207 151 206 206 206 218 293 206 215 206 142 142 142 142 142 206 142 142 142 215 142 206 206 206)
Population mean number of elite cases: 10.12
Count of perfect (error zero) individuals by case: (206 206 215 207 151 206 206 206 218 293 206 215 206 142 142 142 142 142 206 142 142 142 215 142 206 206 206)
Population mean number of perfect (error zero) cases: 10.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 2.232709274259E10
Median total errors in population: 362
Error averages by case: (6.93028870174E8 1.105732952128E9 1.61276782736E9 1.719766291928E9 1.58465226936E9 4.32910019602E8 2.51095155644E8 2.51301230844E8 4408801.6 2006809.576 4.1246392196E8 6.58669009472E8 4.78925560364E8 1.59673797554E8 3.71185616568E8 1.959021234162E9 7.5170206698E8 1.185477408602E9 9.60543379372E8 1.029192365328E9 1.025337004168E9 1.145347478578E9 6.87723810566E8 1.105645197576E9 1.193194276954E9 1.466392671846E9 7.8927714324E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.814
Average program size in population (points): 45.464
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 144500
Number of point (instruction) evaluations so far: 411266967
--- Timings ---
Current time: 1481339686484 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 288
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 289
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 289
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (string_butlast boolean_flush integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 29
Percent parens: 0.138
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction boolean_flush} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (string_butlast boolean_flush integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 29
Percent parens: 0.138
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 206 214 207 131 206 206 206 220 265 206 214 206 125 125 125 125 125 206 125 125 125 214 125 206 206 206)
Population mean number of elite cases: 9.71
Count of perfect (error zero) individuals by case: (206 206 214 207 131 206 206 206 220 265 206 214 206 125 125 125 125 125 206 125 125 125 214 125 206 206 206)
Population mean number of perfect (error zero) cases: 9.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction string_swap} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_and} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times string_swap exec_dup_items exec_dup_items exec_swap (boolean_and integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times string_swap exec_dup_items exec_dup_items exec_swap (boolean_and integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 2.2208667237208E10
Median total errors in population: 468
Error averages by case: (6.8610413304E8 1.102875901586E9 1.60889315119E9 1.7149369482E9 1.557555600156E9 4.320758715E8 2.50053597152E8 2.50053704488E8 4398847.108 2003358.168 4.10831766608E8 6.57117718582E8 4.76737328812E8 1.59054337966E8 3.70455087442E8 1.940804029798E9 7.46606000572E8 1.185553411126E9 9.49232951908E8 1.02413479482E9 1.0241335217E9 1.14371767247E9 6.86102563674E8 1.102876769224E9 1.185555638782E9 1.45816881353E9 7.8633717606E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.562
Average program size in population (points): 44.09
Average percent parens in population: 0.171
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.134
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 412403981
--- Timings ---
Current time: 1481339692527 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 289
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 290
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 290
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (boolean_dup_times exec_swap (integer_add boolean_not) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 34
Percent parens: 0.147
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 34
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (207 207 218 208 145 207 207 207 225 277 207 218 207 132 132 132 132 133 207 132 132 132 218 132 207 207 207)
Population mean number of elite cases: 9.95
Count of perfect (error zero) individuals by case: (207 207 218 208 145 207 207 207 225 277 207 218 207 132 132 132 132 133 207 132 132 132 218 132 207 207 207)
Population mean number of perfect (error zero) cases: 9.95
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 1.1214361116832E10
Median total errors in population: 415
Error averages by case: (2.53431317718E8 5828105.77 5386611.478 7888753.334 1.570791275476E9 2432924.926 1.904809623E7 3.1876133478E7 3462093.866 2002976.814 1.6822562166E7 4245249.274 2.5431364206E7 1.59324331808E8 3.70761054382E8 1.94963952688E9 7.49026645804E8 1.185433650632E9 4.16359057454E8 1.026521374316E9 1.024630752476E9 1.144416802016E9 4280010.35 1.104135000832E9 6.9330102926E7 4.7986948934E7 1.3868393286E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.616
Average program size in population (points): 44.064
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 145500
Number of point (instruction) evaluations so far: 413528746
--- Timings ---
Current time: 1481339698650 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 290
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 291
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 291
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction string_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup boolean_dup_times exec_dup_times (boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items) exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_add in1 string_dup exec_k (boolean_swap exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)) ())) ())
Lexicase best partial simplification: (integer_add exec_swap integer_add (string_dup in2 in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 55
Percent parens: 0.182
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction exec_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction string_dup} {:close 0, :instruction exec_k} {:close 0, :instruction boolean_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup boolean_dup_times exec_dup_times (boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items) exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_add in1 string_dup exec_k (boolean_swap exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)) ())) ())
Zero cases best partial simplification: (exec_dup_times exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 55
Percent parens: 0.182
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 209 216 212 153 209 210 210 217 290 210 216 210 149 149 149 149 157 210 149 149 149 216 149 210 210 210)
Population mean number of elite cases: 10.35
Count of perfect (error zero) individuals by case: (210 209 216 212 153 209 210 210 217 290 210 216 210 149 149 149 149 157 210 149 149 149 216 149 210 210 210)
Population mean number of perfect (error zero) cases: 10.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_or exec_do*times (integer_flush) boolean_not boolean_yank exec_yank integer_min boolean_swap integer_min string_yank integer_inc boolean_not string_dup exec_dup (boolean_frominteger exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ()))
Partial simplification: (boolean_or exec_do*times (integer_flush) boolean_not boolean_yank exec_yank integer_min boolean_swap integer_min string_yank integer_inc boolean_not string_dup exec_dup (boolean_frominteger exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ()))
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 7.041097962476E10
Median total errors in population: 362
Error averages by case: (2.689367261814E9 3.110156691736E9 3.622634883644E9 3.730233097532E9 3.569195545036E9 2.433558867994E9 2.250628180584E9 2.250628295744E9 6.1517773212E7 2.2001208164E7 2.412191717494E9 2.660150549612E9 2.478492488764E9 2.159095019234E9 2.370456313406E9 3.94602009473E9 2.747602808168E9 1.214693640078E9 2.954885393044E9 3.024923838028E9 3.024095012388E9 3.143717114778E9 2.689365982716E9 3.10307067414E9 3.19377903589E9 3.469817175394E9 2.078700961436E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.806
Average program size in population (points): 44.286
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 414694649
--- Timings ---
Current time: 1481339705025 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 291
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 292
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 292
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min boolean_dup_times integer_min boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_max in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))) ())
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 46
Percent parens: 0.152
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min boolean_dup_times integer_min boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_max in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))) ())
Zero cases best partial simplification: (boolean_not in1 exec_swap integer_add (100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 46
Percent parens: 0.152
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 225 231 226 134 224 225 225 234 273 225 231 225 128 128 128 128 136 225 128 128 128 231 128 225 225 225)
Population mean number of elite cases: 10.39
Count of perfect (error zero) individuals by case: (225 225 231 226 134 224 225 225 234 273 225 231 225 128 128 128 128 136 225 128 128 128 231 128 225 225 225)
Population mean number of perfect (error zero) cases: 10.39
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 1.5479822692604E10
Median total errors in population: 362
Error averages by case: (6.86004212706E8 1.102739348192E9 1.60871763638E9 1.714753749096E9 1.458006470256E9 4.3200264979E8 2.50002672478E8 2.50002783066E8 4395390.942 2001286.078 4.10760910564E8 6.57020965436E8 4.76659088818E8 7.1876781802E7 6.5539201552E7 9.1307227207E8 3.51236476372E8 2665346.258 9.49108805842E8 3.14932698868E8 7.8612000068E7 1.01310202862E8 6.86002993438E8 1.7037241772E8 1.185412072246E9 1.458004117162E9 7.8610142542E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.682
Average program size in population (points): 44.118
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.12
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 146500
Number of point (instruction) evaluations so far: 415832984
--- Timings ---
Current time: 1481339711479 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 292
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 293
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 293
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap (integer_add boolean_not) (string_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 44
Percent parens: 0.114
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 44
Percent parens: 0.114
--- Lexicase Population Statistics ---
Count of elite individuals by case: (194 194 211 199 149 194 194 194 215 273 194 211 194 141 141 141 141 149 194 141 141 141 211 141 194 194 194)
Population mean number of elite cases: 9.76
Count of perfect (error zero) individuals by case: (194 194 211 199 149 194 194 194 215 273 194 211 194 141 141 141 141 149 194 141 141 141 211 141 194 194 194)
Population mean number of perfect (error zero) cases: 9.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_or exec_do*times (integer_flush) boolean_not boolean_yank exec_yank integer_min boolean_swap integer_min string_yank integer_inc boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ()))
Partial simplification: (boolean_or exec_do*times (integer_flush) boolean_not boolean_yank exec_yank integer_min boolean_swap integer_min string_yank integer_inc boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ()))
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 5.4000074635032E10
Median total errors in population: 362
Error averages by case: (2.0000032728E9 2.00000317091E9 2.000003515966E9 2.000003575648E9 2.000004774044E9 2.000002441828E9 2.000002232362E9 2.00000226861E9 2.000001013282E9 2.000000934844E9 2.000002519238E9 2.000002765198E9 2.00000265227E9 2.000001874994E9 2.00000204069E9 2.00000443113E9 2.0000030829E9 2.000001648948E9 2.000003715814E9 2.000003159876E9 2.000002433156E9 2.000002586882E9 2.00000279648E9 2.000002829128E9 2.000003531632E9 2.000003675076E9 2.000001691326E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.122
Average program size in population (points): 44.72
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 417010429
--- Timings ---
Current time: 1481339718440 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 293
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 294
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 294
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 33
Percent parens: 0.121
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max))
Zero cases best partial simplification: (exec_swap (integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 33
Percent parens: 0.121
--- Lexicase Population Statistics ---
Count of elite individuals by case: (223 223 229 225 133 223 223 223 235 291 223 229 223 122 122 122 122 128 223 122 122 122 229 122 223 223 223)
Population mean number of elite cases: 10.26
Count of perfect (error zero) individuals by case: (223 223 229 225 133 223 223 223 235 291 223 229 223 122 122 122 122 128 223 122 122 122 229 122 223 223 223)
Population mean number of perfect (error zero) cases: 10.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 4.4415117723682E10
Median total errors in population: 362
Error averages by case: (1.372172233304E9 2.205632331526E9 3.217628539052E9 3.429712526074E9 3.115087871848E9 8.64087208838E8 5.00073750628E8 5.00077782804E8 8795589.466 4004988.682 8.21612451014E8 1.314151505386E9 9.53420832356E8 3.18086577534E8 7.40846842214E8 3.881504952638E9 1.493156156936E9 2.37085446556E9 1.89842662066E9 2.048175649456E9 2.048110907296E9 2.287273069246E9 1.372118583856E9 2.20561879226E9 2.371015815892E9 2.916217689736E9 1.5725398942E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.736
Average program size in population (points): 44.12
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
--- Run Statistics ---
Number of program evaluations used so far: 147500
Number of point (instruction) evaluations so far: 418100456
--- Timings ---
Current time: 1481339726271 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 294
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 295
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 295
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 39
Percent parens: 0.128
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 39
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 215 223 217 134 215 214 214 225 271 214 223 214 128 128 128 128 134 214 128 128 128 223 128 214 214 214)
Population mean number of elite cases: 10.06
Count of perfect (error zero) individuals by case: (214 215 223 217 134 215 214 214 225 271 214 223 214 128 128 128 128 134 214 128 128 128 223 128 214 214 214)
Population mean number of perfect (error zero) cases: 10.06
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5.4000425036594E10
Median total errors in population: 415
Error averages by case: (2.000003340106E9 2.000004232934E9 2.000005118446E9 2.000005286698E9 2.000339691462E9 2.000003461264E9 2.000002222686E9 2.000002216202E9 2.000006967758E9 2.00000087725E9 2.000002711748E9 2.000003322526E9 2.0000028864E9 2.000001692062E9 2.000001989318E9 2.000004665528E9 2.000002989392E9 2.000001918262E9 2.000003881838E9 2.000003183676E9 2.000002565636E9 2.000002731392E9 2.00000338811E9 2.000002928852E9 2.000004374474E9 2.00000486193E9 2.000001530644E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.966
Average program size in population (points): 44.516
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.128
Error (vector) diversity:			 0.128
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 419239887
--- Timings ---
Current time: 1481339732895 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 295
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 296
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 296
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Lexicase best partial simplification: (boolean_dup_times exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 43
Percent parens: 0.116
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max)))
Zero cases best partial simplification: (exec_swap (integer_add string_yank) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 43
Percent parens: 0.116
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 205 211 207 139 205 205 205 214 265 205 211 205 131 131 131 131 134 205 131 131 131 211 131 205 205 205)
Population mean number of elite cases: 9.79
Count of perfect (error zero) individuals by case: (205 205 211 207 139 205 205 205 214 265 205 211 205 131 131 131 131 134 205 131 131 131 211 131 205 205 205)
Population mean number of perfect (error zero) cases: 9.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank boolean_yankdup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank boolean_yankdup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 80443.002
Median total errors in population: 362
Error averages by case: (3468.892 3420.638 3827.188 3872.342 5003.4 2674.648 2394.138 2428.162 1072.356 1003.602 2700.508 3013.156 2843.39 2018.572 2230.43 4700.156 3292.352 1956.626 3926.63 3397.488 2694.528 2854.428 3047.12 3085.244 3772.088 3932.24 1812.68)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.212
Average program size in population (points): 44.776
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.118
Error (vector) diversity:			 0.118
--- Run Statistics ---
Number of program evaluations used so far: 148500
Number of point (instruction) evaluations so far: 420395720
--- Timings ---
Current time: 1481339739453 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 296
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 297
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 297
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec boolean_stackdepth exec_swap (integer_empty string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))) ())) ())
Lexicase best partial simplification: (boolean_dup_times boolean_dup_times integer_add boolean_not exec_dup (exec_yank boolean_stackdepth integer_empty exec_do*times exec_yank integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max) ()))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 46
Percent parens: 0.174
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_stackdepth} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_empty} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec boolean_stackdepth exec_swap (integer_empty string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))) ())) ())
Zero cases best partial simplification: (integer_min integer_min exec_swap (exec_dup (integer_dec boolean_stackdepth integer_empty exec_yank integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max) ())))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 46
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 208 217 212 127 208 208 208 222 267 208 217 208 121 121 121 121 125 208 121 121 121 217 121 208 208 208)
Population mean number of elite cases: 9.72
Count of perfect (error zero) individuals by case: (208 208 217 212 127 208 208 208 222 267 208 217 208 121 121 121 121 125 208 121 121 121 217 121 208 208 208)
Population mean number of perfect (error zero) cases: 9.72
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_or} {:close 0, :instruction exec_do*times} {:close 1, :instruction integer_flush} {:close 0, :instruction boolean_not} {:close 0, :instruction boolean_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_swap} {:close 0, :instruction integer_min} {:close 1, :instruction string_yank} {:close 0, :instruction integer_inc} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_frominteger} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_or exec_do*times (integer_flush) boolean_not boolean_yank exec_yank integer_min boolean_swap integer_min string_yank integer_inc boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_frominteger exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ()))
Partial simplification: (boolean_or exec_do*times (integer_flush) boolean_not boolean_yank exec_yank integer_min boolean_swap integer_min string_yank integer_inc boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add boolean_frominteger exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ()))
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 43
Size: 52
Percent parens: 0.173
--- Population Statistics ---
Average total errors in population: 2158703.1
Median total errors in population: 468
Error averages by case: (100903.726 136626.196 175269.4 184756.05 167092.88 73663.178 51697.78 51773.516 4323.868 2882.82 71493.43 97093.588 78886.33 23596.306 22823.768 123884.89 66062.884 5684.22 125119.116 62056.016 26547.088 31009.258 99890.822 42407.256 143897.154 164791.91 24469.65)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.34
Average program size in population (points): 44.828
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.14
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 421520585
--- Timings ---
Current time: 1481339746830 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 297
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 298
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 298
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_substring exec_dup (boolean_empty string_swap) string_parse_to_chars) (boolean_xor integer_lt exec_dup (exec_dup (boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 42
Percent parens: 0.167
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_substring} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_empty} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_lt} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_substring exec_dup (boolean_empty string_swap) string_parse_to_chars) (boolean_xor integer_lt exec_dup (exec_dup (boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))))
Zero cases best partial simplification: (exec_swap (integer_add exec_dup string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 42
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 200 208 201 136 200 200 200 211 264 200 208 200 127 127 127 127 135 200 127 127 127 208 127 200 200 200)
Population mean number of elite cases: 9.57
Count of perfect (error zero) individuals by case: (200 200 208 201 136 200 200 200 211 264 200 208 200 127 127 127 127 135 200 127 127 127 208 127 200 200 200)
Population mean number of perfect (error zero) cases: 9.57
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction boolean_rot})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max boolean_rot))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max boolean_rot))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5.406198442618E10
Median total errors in population: 362
Error averages by case: (2.003535860798E9 2.001574101484E9 2.002109995226E9 2.002587983506E9 2.013596470388E9 2.000508537274E9 2.000579402162E9 2.000679592666E9 2.000010092632E9 2.000005247288E9 2.000896165258E9 2.000888868726E9 2.001178616638E9 2.000350350354E9 2.000444143564E9 2.00924949301E9 2.002641309544E9 2.000170416084E9 2.00573072151E9 2.002657142012E9 2.000765170452E9 2.000987526162E9 2.000926488714E9 2.001540797048E9 2.003942148978E9 2.004252206378E9 2.000175578324E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.426
Average program size in population (points): 45.078
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.138
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 149500
Number of point (instruction) evaluations so far: 422647195
--- Timings ---
Current time: 1481339753487 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 298
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 299
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 299
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (boolean_or string_swap) string_parse_to_chars) (integer_dup_items exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap (integer_add) (boolean_shove exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 37
Percent parens: 0.162
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_or} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (boolean_or string_swap) string_parse_to_chars) (integer_dup_items exec_yank integer_add string_reverse exec_dup (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (boolean_not integer_add) (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 37
Percent parens: 0.162
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 218 226 221 139 218 218 218 228 270 218 226 218 127 127 127 127 131 218 127 127 127 226 127 218 218 218)
Population mean number of elite cases: 10.16
Count of perfect (error zero) individuals by case: (218 218 226 221 139 218 218 218 228 270 218 226 218 127 127 127 127 131 218 127 127 127 226 127 218 218 218)
Population mean number of perfect (error zero) cases: 10.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (string_replacefirst integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank boolean_yankdup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (string_replacefirst integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank boolean_yankdup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 1337015.696
Median total errors in population: 362
Error averages by case: (73360.966 24242.358 25752.132 30154.97 171929.83 14012.752 22835.402 26907.546 3935.492 2757.054 25730.45 18939.06 30821.186 30284.192 38964.016 158889.304 84490.438 21695.284 96114.898 90690.526 58091.566 65372.704 19218.338 76270.442 57239.782 54064.894 14250.114)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.346
Average program size in population (points): 44.918
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.566
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.566
Total error diversity:				 0.122
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 423758654
--- Timings ---
Current time: 1481339759750 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 299
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 300
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 300
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_eq string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_dup_times (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (string_dup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 45
Percent parens: 0.133
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_eq} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_dup_times} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction boolean_shove} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_eq string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_dup_times (string_yank string_dup boolean_shove boolean_eq exec_dup (integer_gt in2 integer_mult 100 string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (integer_eq string_yank exec_swap (integer_add string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 45
Percent parens: 0.133
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 224 232 226 138 224 224 224 234 287 224 232 224 131 131 131 131 135 224 131 131 131 232 131 224 224 224)
Population mean number of elite cases: 10.46
Count of perfect (error zero) individuals by case: (224 224 232 226 138 224 224 224 234 287 224 232 224 131 131 131 131 135 224 131 131 131 232 131 224 224 224)
Population mean number of perfect (error zero) cases: 10.46
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not exec_yankdup boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (integer_yankdup string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not exec_yankdup boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (integer_yankdup string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 3.5729874520534E10
Median total errors in population: 362
Error averages by case: (1.166402793706E9 2.007182282332E9 3.105021279826E9 3.343965928328E9 2.928912381632E9 6.91401876808E8 3.75201660162E8 3.75201690328E8 5169506.384 2402798.52 6.533071743E8 1.110562622434E9 7.72384827356E8 1.99486658326E8 4.37127246604E8 3.103004988646E9 1.07183921251E9 1.202685255128E9 1.689608442032E9 1.397450916546E9 1.172170290102E9 1.33239727515E9 1.166402241754E9 1.363291935662E9 2.18135391631E9 2.770403434346E9 1.05535885302E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.582
Average program size in population (points): 45.11
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.148
Error (vector) diversity:			 0.148
--- Run Statistics ---
Number of program evaluations used so far: 150500
Number of point (instruction) evaluations so far: 424874729
--- Timings ---
Current time: 1481339765985 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 300
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 301
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 301
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Lexicase best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 294
Lexicase best mean error: 10.888889
Lexicase best size: 39
Percent parens: 0.128
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (integer_add in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max))
Zero cases best errors: [0 0 0 0 1 0 0 0 0 0 0 0 0 9 24 21 15 72 0 25 45 45 0 37 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 294
Zero cases best mean error: 10.888889
Zero cases best size: 39
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 217 226 221 142 217 218 218 229 295 218 226 218 137 137 137 137 145 218 137 137 137 226 137 218 218 218)
Population mean number of elite cases: 10.40
Count of perfect (error zero) individuals by case: (218 217 226 221 142 217 218 218 229 295 218 226 218 137 137 137 137 145 218 137 137 137 226 137 218 218 218)
Population mean number of perfect (error zero) cases: 10.40
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction string_replacefirst} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_yankdup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (string_replacefirst integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank boolean_yankdup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (string_replacefirst integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank boolean_yankdup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 2519748.468
Median total errors in population: 362
Error averages by case: (120417.474 113341.306 173611.07 191296.626 301212.822 39176.294 34831.96 38904.224 3924.528 2707.418 49284.426 63289.55 59636.244 32135.506 40200.714 226921.068 102886.932 19909.89 168947.9 106144.348 59180.668 67431.73 66227.198 82125.36 155541.218 183810.022 16651.972)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.5
Average program size in population (points): 43.71
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.108
Error (vector) diversity:			 0.108
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 425937305
--- Timings ---
Current time: 1481339772056 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 301
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 302
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 302
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_length} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min boolean_dup_times integer_dec exec_swap (boolean_not integer_add integer_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split string_length integer_max string_replacefirst))
Lexicase best partial simplification: (exec_swap (integer_add) (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 32
Percent parens: 0.125
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction string_length} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min boolean_dup_times integer_dec exec_swap (boolean_not integer_add integer_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split string_length integer_max string_replacefirst))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 32
Percent parens: 0.125
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 210 218 215 147 210 210 210 220 277 210 218 210 137 137 137 137 141 210 137 137 137 218 137 210 210 210)
Population mean number of elite cases: 10.12
Count of perfect (error zero) individuals by case: (210 210 218 215 147 210 210 210 220 277 210 218 210 137 137 137 137 141 210 137 137 137 218 137 210 210 210)
Population mean number of perfect (error zero) cases: 10.12
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_yankdup} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yankdup} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not exec_yankdup boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (integer_yankdup string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items exec_dup_items exec_swap (boolean_not exec_yankdup boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (integer_yankdup string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 5468171.214
Median total errors in population: 362
Error averages by case: (203055.398 203738.782 204855.296 205119.584 207543.276 201744.976 201079.004 201110.148 198894.216 198734.982 201771.054 202526.624 202049.33 200262.588 200597.652 209200.282 202526.9 199894.246 203986.066 202711.996 201373.67 201667.606 202614.406 202108.884 204232.052 204788.346 199983.85)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.026
Average program size in population (points): 45.72
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 151500
Number of point (instruction) evaluations so far: 427106508
--- Timings ---
Current time: 1481339778083 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 302
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 303
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 303
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_dup_times integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min boolean_dup_times integer_min boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_substring in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 43
Percent parens: 0.116
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_substring} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_dup_times integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank integer_min boolean_dup_times integer_min boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_substring in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 43
Percent parens: 0.116
--- Lexicase Population Statistics ---
Count of elite individuals by case: (209 209 222 209 147 209 209 209 226 294 209 222 209 143 143 144 143 149 209 143 143 143 222 143 209 209 209)
Population mean number of elite cases: 10.27
Count of perfect (error zero) individuals by case: (209 209 222 209 147 209 209 209 226 294 209 222 209 143 143 144 143 149 209 143 143 143 222 143 209 209 209)
Population mean number of perfect (error zero) cases: 10.27
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 1, :instruction string_eq} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items string_eq exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_dup_times integer_min boolean_dup_times boolean_dup_times integer_min exec_dup_items string_eq exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 1 0 0 0 0 10 0 0 0 9 24 21 15 11 0 25 45 45 0 37 0 0 0]
Total: 243
Mean: 9.0
Genome size: 42
Size: 52
Percent parens: 0.192
--- Population Statistics ---
Average total errors in population: 2.9531219413764E10
Median total errors in population: 362
Error averages by case: (1.344954551092E9 1.575490861158E9 1.786882132702E9 1.825323583084E9 1.729372702316E9 1.152754647314E9 9.60631012308E8 9.60635048532E8 2.4975902507E8 1.92120089934E8 1.133552740284E9 1.325686002478E9 1.191198808116E9 6.3402561412E8 6.14821780468E8 1.479544040088E9 1.075970248216E9 2.1133283529E8 1.498698190772E9 1.03754971226E9 6.5326460782E8 7.10908595896E8 1.344900854986E9 8.45406651656E8 1.613956608356E9 1.72925635282E9 6.53222116628E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.496
Average program size in population (points): 43.814
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.112
Error (vector) diversity:			 0.112
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 428190011
--- Timings ---
Current time: 1481339784158 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 303
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 304
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 304
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_dup_times} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_dup_times integer_min exec_dup (boolean_dup_times integer_min boolean_dup_times integer_min integer_dec exec_swap (boolean_not integer_add string_dup_times string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Lexicase best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Lexicase best number of elite cases: 17
Lexicase best total error: 468
Lexicase best mean error: 17.333334
Lexicase best size: 35
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_dup_times} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_mult} {:close 0, :instruction string_split} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_dup_times integer_min exec_dup (boolean_dup_times integer_min boolean_dup_times integer_min integer_dec exec_swap (boolean_not integer_add string_dup_times string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_mult string_split integer_max)))
Zero cases best partial simplification: (exec_swap (integer_add) (in1 100 in2 integer_mult in1 99 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 90 0 0 0 0 0 0 0 0 33 32 77 56 11 0 54 34 37 0 44 0 0 0]
Zero cases best number of elite cases: 17
Zero cases best number of zero cases: 17
Zero cases best total error: 468
Zero cases best mean error: 17.333334
Zero cases best size: 35
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (205 205 215 205 144 205 205 205 222 275 205 215 205 132 132 132 132 137 205 132 132 132 215 132 205 205 205)
Population mean number of elite cases: 9.88
Count of perfect (error zero) individuals by case: (205 205 215 205 144 205 205 205 222 275 205 215 205 132 132 132 132 137 205 132 132 132 215 132 205 205 205)
Population mean number of perfect (error zero) cases: 9.88
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2.00214550153E9
Median total errors in population: 362
Error averages by case: (100753.376 135990.238 174650.002 183974.664 166521.128 73229.748 51166.962 51196.586 4022.398 2621.936 70906.366 96586.21 78237.982 23244.982 22327.686 123227.486 65565.324 2.000004209006E9 124945.45 61456.952 25681.312 30131.374 99378.96 41660.008 144323.128 165445.412 24046.854)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.694
Average program size in population (points): 44.174
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.584
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.584
Total error diversity:				 0.14
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 152500
Number of point (instruction) evaluations so far: 429309388
--- Timings ---
Current time: 1481339790318 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 304
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 305
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 305
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_butlast string_yank integer_dec exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ()) ())
Lexicase best partial simplification: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_butlast string_yank integer_dec exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ()) ())
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 48
Percent parens: 0.188
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_butlast string_yank integer_dec exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ()) ())
Zero cases best partial simplification: (boolean_not integer_dec exec_dup (exec_yank integer_add string_yank (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 48
Percent parens: 0.188
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 201 209 201 255 201 201 201 216 211 201 209 201 134 134 134 134 139 201 134 134 134 209 134 201 201 201)
Population mean number of elite cases: 9.86
Count of perfect (error zero) individuals by case: (201 201 209 201 255 201 201 201 216 211 201 209 201 134 134 134 134 139 201 134 134 134 209 134 201 201 201)
Population mean number of perfect (error zero) cases: 9.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 4.8187295527892E10
Median total errors in population: 468
Error averages by case: (2.005052567856E9 2.009261433734E9 2.015183648414E9 2.016517347402E9 2.013765694826E9 2.002799966886E9 2.001461046744E9 2.001463078216E9 4.8532620176E7 1.6197337952E7 2.002638237954E9 2.004745926974E9 2.003173923132E9 2.000518590054E9 1.966624591506E9 2.009359464302E9 2.00277539927E9 2.417754089E7 2.007676808828E9 2.002767529834E9 2.000848091714E9 2.001064449854E9 2.005014868634E9 2.00162989159E9 2.010204444872E9 2.013369372188E9 2.00047165409E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.202
Average program size in population (points): 43.256
Average percent parens in population: 0.185
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 111
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.13
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 430517325
--- Timings ---
Current time: 1481339797871 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 305
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 306
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 306
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 45
Percent parens: 0.178
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Zero cases best partial simplification: (integer_min exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 45
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 208 214 208 284 208 208 208 217 283 208 214 208 139 139 139 139 141 208 139 139 139 214 139 208 208 208)
Population mean number of elite cases: 10.35
Count of perfect (error zero) individuals by case: (208 208 214 208 284 208 208 208 217 283 208 214 208 139 139 139 139 141 208 139 139 139 214 139 208 208 208)
Population mean number of perfect (error zero) cases: 10.35
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.4004866424694E10
Median total errors in population: 415
Error averages by case: (2.00021955709E9 2.000251532414E9 2.000351480184E9 2.000376795036E9 2.000467221206E9 2.000113171038E9 2.000085879004E9 2.0000898341E9 2.00000728107E9 2.000004727314E9 2.000120506452E9 2.00016112116E9 2.000138205768E9 2.000060666816E9 2.000076895728E9 2.000379843616E9 2.00018383828E9 2.000039107144E9 2.000291864576E9 2.000192890844E9 2.000113904404E9 2.0001291928E9 2.000166919858E9 2.000154629784E9 2.000299639706E9 2.000349543542E9 2.00004017576E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.248
Average program size in population (points): 42.85
Average percent parens in population: 0.175
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.158
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 153500
Number of point (instruction) evaluations so far: 431601270
--- Timings ---
Current time: 1481339804047 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 306
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 307
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 307
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (exec_dup_items integer_min integer_min exec_dup_items string_frominteger integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Lexicase best partial simplification: (exec_swap (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 46
Percent parens: 0.174
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_frominteger} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (exec_dup_items integer_min integer_min exec_dup_items string_frominteger integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Zero cases best partial simplification: ((integer_dec exec_swap integer_add (string_yank in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 46
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (200 200 209 200 286 200 200 200 214 282 200 209 200 146 146 146 146 154 200 146 146 146 209 146 200 200 200)
Population mean number of elite cases: 10.26
Count of perfect (error zero) individuals by case: (200 200 209 200 286 200 200 200 214 282 200 209 200 146 146 146 146 154 200 146 146 146 209 146 200 200 200)
Population mean number of perfect (error zero) cases: 10.26
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 1328319.278
Median total errors in population: 362
Error averages by case: (72967.44 25549.522 27260.7 31624.268 168783.524 15073.476 23433.876 27388.58 4281.12 3015.702 26471.278 20082.348 31494.004 30023.186 38123.052 155144.202 82854.168 19946.356 95244.708 88538.3 56115.62 63190.922 20376.846 74065.56 57752.244 54814.528 14703.748)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.892
Average program size in population (points): 42.328
Average percent parens in population: 0.175
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.134
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 432676993
--- Timings ---
Current time: 1481339810191 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 307
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 308
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 308
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap (integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (238 238 252 238 283 238 238 238 254 288 238 252 238 120 120 120 120 123 238 120 120 120 252 120 238 238 238)
Population mean number of elite cases: 11.04
Count of perfect (error zero) individuals by case: (238 238 252 238 283 238 238 238 254 288 238 252 238 120 120 120 120 123 238 120 120 120 252 120 238 238 238)
Population mean number of perfect (error zero) cases: 11.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3808308.538
Median total errors in population: 362
Error averages by case: (191447.512 138205.674 200631.872 222680.77 467036.368 53091.496 56824.474 64781.362 7073.326 4732.752 74401.99 82353.776 89752.534 60591.546 76707.886 379350.966 183578.76 38480.82 262089.966 192521.004 113529.044 128781.926 85609.24 154217.324 212112.804 237753.028 29970.318)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.316
Average program size in population (points): 42.838
Average percent parens in population: 0.176
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.52
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.52
Total error diversity:				 0.126
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 154500
Number of point (instruction) evaluations so far: 433754173
--- Timings ---
Current time: 1481339816475 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 308
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 309
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 309
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap (integer_add string_swap) (integer_pop exec_yank in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (244 244 253 244 293 244 244 244 254 266 244 253 244 110 110 110 110 114 244 110 110 110 253 110 244 244 244)
Population mean number of elite cases: 10.99
Count of perfect (error zero) individuals by case: (244 244 253 244 293 244 244 244 254 266 244 253 244 110 110 110 110 114 244 110 110 110 253 110 244 244 244)
Population mean number of perfect (error zero) cases: 10.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_yankdup exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_yankdup exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3512704.488
Median total errors in population: 362
Error averages by case: (171308.036 133863.936 177536.32 220313.118 455614.524 41239.35 46723.444 52754.916 4157.598 2854.54 64998.692 65838.688 79206.964 45055.04 61763.162 379721.33 162273.352 35984.606 242843.75 176589.364 103626.524 119419.986 68829.074 142419.022 203529.884 232391.104 21848.164)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.122
Average program size in population (points): 42.692
Average percent parens in population: 0.176
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.128
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 434847162
--- Timings ---
Current time: 1481339822578 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 309
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 310
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 310
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_max in2 in1 integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))) ())
Lexicase best partial simplification: (integer_min string_yank exec_swap (integer_add exec_noop string_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 52
Percent parens: 0.154
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_max in2 in1 integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))) ())
Zero cases best partial simplification: (string_yank boolean_not exec_dup_times exec_swap (integer_add string_parse_to_chars) (integer_pop in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 52
Percent parens: 0.154
--- Lexicase Population Statistics ---
Count of elite individuals by case: (230 230 242 230 292 230 230 230 246 280 230 242 230 123 123 123 123 127 230 123 123 123 242 123 230 230 230)
Population mean number of elite cases: 10.83
Count of perfect (error zero) individuals by case: (230 230 242 230 292 230 230 230 246 280 230 242 230 123 123 123 123 127 230 123 123 123 242 123 230 230 230)
Population mean number of perfect (error zero) cases: 10.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2.220827076637E10
Median total errors in population: 362
Error averages by case: (6.86100604794E8 1.10292111919E9 1.609018439712E9 1.71508131933E9 1.557646586816E9 4.32054452376E8 2.50027413834E8 2.50027530474E8 4395204.91 2001059.506 4.10809325432E8 6.5711190624E8 4.76718232698E8 1.59021413068E8 3.703935082E8 1.9407465751E9 7.46540387404E8 1.185411750594E9 9.49257574394E8 1.024039465304E9 1.024009853584E9 1.1435862991E9 6.86099345032E8 1.102756083132E9 1.185612244166E9 1.458267960784E9 7.8615111196E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.302
Average program size in population (points): 42.812
Average percent parens in population: 0.174
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 155500
Number of point (instruction) evaluations so far: 435915567
--- Timings ---
Current time: 1481339828811 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 310
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 311
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 311
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_empty string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 40
Percent parens: 0.100
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_empty} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 99} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_empty string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_gt in2 in1 100 in2 integer_mult in1 99 integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 40
Percent parens: 0.100
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 219 231 219 288 219 219 219 232 274 219 231 219 129 129 129 129 135 219 129 129 129 231 129 219 219 219)
Population mean number of elite cases: 10.56
Count of perfect (error zero) individuals by case: (219 219 231 219 288 219 219 219 232 274 219 231 219 129 129 129 129 135 219 129 129 129 231 129 219 219 219)
Population mean number of perfect (error zero) cases: 10.56
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 7.0252035955046E10
Median total errors in population: 362
Error averages by case: (2.68614490481E9 3.102873984704E9 3.608904346608E9 3.714955367874E9 3.55769592625E9 2.432060082328E9 2.250050374308E9 2.25005445146E9 1.598361076E7 4003845.778 2.410827641306E9 2.65710577875E9 2.47673741278E9 2.159053511486E9 2.37043362435E9 3.940850137758E9 2.746618007742E9 1.215195722186E9 2.949297973304E9 3.02412445211E9 3.02406805355E9 3.143651605118E9 2.686090985204E9 3.102831470686E9 3.185587211342E9 3.458203441758E9 2.078632030736E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.304
Average program size in population (points): 42.95
Average percent parens in population: 0.177
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.568
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.568
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 437026290
--- Timings ---
Current time: 1481339834945 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 311
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 312
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 312
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.122
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction string_stackdepth} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_pop exec_yank integer_add boolean_not integer_pop exec_yank integer_add boolean_not exec_dup (string_yank string_dup integer_gt string_stackdepth in1 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap (integer_add) (string_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.122
--- Lexicase Population Statistics ---
Count of elite individuals by case: (239 239 247 239 291 239 239 239 250 291 239 247 239 126 126 126 126 133 239 126 126 126 247 126 239 239 239)
Population mean number of elite cases: 11.16
Count of perfect (error zero) individuals by case: (239 239 247 239 291 239 239 239 250 291 239 247 239 126 126 126 126 133 239 126 126 126 247 126 239 239 239)
Population mean number of perfect (error zero) cases: 11.16
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2528289.378
Median total errors in population: 362
Error averages by case: (120533.492 114640.122 175107.394 192751.998 299817.508 40185.178 35499.126 39493.67 4186.482 2898.382 50079.022 64418.482 60394.222 32338.79 40238.83 225582.46 102539.99 19946.072 168792.618 105646.468 58915.468 67089.1 67371.392 81709.868 156241.088 184695.6 17176.556)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.258
Average program size in population (points): 42.802
Average percent parens in population: 0.176
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.124
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 156500
Number of point (instruction) evaluations so far: 438105083
--- Timings ---
Current time: 1481339841117 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 312
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 313
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 313
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_max in2 in1 integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_noop exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 38
Percent parens: 0.132
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_max} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop integer_max in2 in1 integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_dup_times exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 38
Percent parens: 0.132
--- Lexicase Population Statistics ---
Count of elite individuals by case: (231 230 241 230 299 230 231 231 245 281 230 241 231 121 121 121 121 126 231 121 121 121 241 121 231 230 230)
Population mean number of elite cases: 10.82
Count of perfect (error zero) individuals by case: (231 230 241 230 299 230 231 231 245 281 230 241 231 121 121 121 121 126 231 121 121 121 241 121 231 230 230)
Population mean number of perfect (error zero) cases: 10.82
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_yankdup exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_yankdup exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2.2209134312234E10
Median total errors in population: 362
Error averages by case: (6.86170453778E8 1.102894646604E9 1.608912434618E9 1.714960307638E9 1.557706588822E9 4.32086237304E8 2.5007292374E8 2.50076918324E8 4401406.674 2004843.294 4.10853396018E8 6.57132245594E8 4.76763655544E8 1.59065682458E8 3.70444575134E8 1.940871839208E9 7.46641547678E8 1.185430294568E9 9.49320388564E8 1.02414693367E9 1.02407935615E9 1.143664716682E9 6.8611729347E8 1.102848920846E9 1.18560573663E9 1.458215447246E9 7.8645521978E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.188
Average program size in population (points): 42.762
Average percent parens in population: 0.176
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 439221455
--- Timings ---
Current time: 1481339847125 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 313
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 314
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 314
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap (integer_add string_yank) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 44
Percent parens: 0.136
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min integer_min exec_dup_items boolean_not integer_inc exec_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 44
Percent parens: 0.136
--- Lexicase Population Statistics ---
Count of elite individuals by case: (226 226 233 226 289 226 226 226 236 274 226 233 226 122 122 122 122 130 226 122 122 122 233 122 226 226 226)
Population mean number of elite cases: 10.63
Count of perfect (error zero) individuals by case: (226 226 233 226 289 226 226 226 236 274 226 233 226 122 122 122 122 130 226 122 122 122 233 122 226 226 226)
Population mean number of perfect (error zero) cases: 10.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3.4340413148954E10
Median total errors in population: 362
Error averages by case: (1.166343884236E9 2.007025461726E9 3.104866279124E9 3.34381947878E9 2.869913538374E9 6.91226487952E8 3.75044361514E8 3.75052437906E8 4972416.856 2204876.812 6.53155090412E8 1.110396361268E9 7.72242611438E8 1.82791293786E8 3.91432883526E8 2.643969665994E9 9.4335105171E8 1.185739740308E9 1.68959374447E9 1.19423793551E9 1.05083855399E9 1.18118331665E9 1.166236454512E9 1.177845820638E9 2.181262213888E9 2.77030488096E9 1.05362306614E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.142
Average program size in population (points): 42.84
Average percent parens in population: 0.179
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.132
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 157500
Number of point (instruction) evaluations so far: 440351723
--- Timings ---
Current time: 1481339853321 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 314
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 315
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 315
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_substring} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_invert_first_then_and integer_add integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_substring string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (exec_swap (integer_add) (exec_yankdup string_yank in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 46
Percent parens: 0.174
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_substring} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_invert_first_then_and integer_add integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_substring string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 46
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 234 244 234 288 234 234 234 248 260 234 244 234 121 121 121 121 124 234 121 121 121 244 121 234 234 234)
Population mean number of elite cases: 10.86
Count of perfect (error zero) individuals by case: (234 234 244 234 288 234 234 234 248 260 234 244 234 121 121 121 121 124 234 121 121 121 244 121 234 234 234)
Population mean number of perfect (error zero) cases: 10.86
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not string_swap boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not string_swap boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 1300976.3
Median total errors in population: 362
Error averages by case: (51496.102 94716.698 154722.242 168171.596 136148.048 28923.372 15015.274 15007.368 1310.59 1161.11 27168.68 48814.322 32631.836 4485.138 4384.21 74914.06 22960.352 1909.916 77964.996 20379.748 5352.868 6577.612 51557.444 10555.964 103968.546 136064.59 4613.618)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 34.998
Average program size in population (points): 42.82
Average percent parens in population: 0.182
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.108
Error (vector) diversity:			 0.11
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 441516005
--- Timings ---
Current time: 1481339859532 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 315
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 316
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 316
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_substring} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_invert_first_then_and integer_add integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_substring string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))) ())
Lexicase best partial simplification: (exec_swap integer_add (string_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 46
Percent parens: 0.174
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_invert_first_then_and} {:close 0, :instruction integer_add} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_substring} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_invert_first_then_and integer_add integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_substring string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))) ())
Zero cases best partial simplification: ((exec_swap (integer_add exec_noop) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 46
Percent parens: 0.174
--- Lexicase Population Statistics ---
Count of elite individuals by case: (211 211 218 211 286 210 211 211 221 275 211 218 211 134 134 134 134 139 211 134 134 134 218 134 211 211 211)
Population mean number of elite cases: 10.36
Count of perfect (error zero) individuals by case: (211 211 218 211 286 210 211 211 221 275 211 218 211 134 134 134 134 139 211 134 134 134 218 134 211 211 211)
Population mean number of perfect (error zero) cases: 10.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_yankdup exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_yankdup exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 3.2080183457E8
Median total errors in population: 362
Error averages by case: (1.3800675052E7 2.19663192E7 3.205783049E7 3.4186353918E7 2.9787883166E7 8594755.692 5003708.234 5013723.362 94220.264 44478.778 8202789.088 1.3079863034E7 9525232.906 1703839.088 1888612.494 2.1135519768E7 8160573.438 269379.302 1.910276333E7 7961068.382 2736767.662 3398425.576 1.3657000604E7 5006567.31 2.3705697812E7 2.9132547248E7 1585239.372)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.724
Average program size in population (points): 43.688
Average percent parens in population: 0.182
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.152
Error (vector) diversity:			 0.154
--- Run Statistics ---
Number of program evaluations used so far: 158500
Number of point (instruction) evaluations so far: 442672974
--- Timings ---
Current time: 1481339865919 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 316
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 317
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 317
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_min integer_min exec_dup_items) boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_min integer_min exec_dup_items) boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Zero cases best partial simplification: (exec_dup_items boolean_not string_dup string_swap exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (216 216 228 216 288 215 216 216 233 276 216 228 216 127 127 127 127 134 216 127 127 127 228 127 216 216 216)
Population mean number of elite cases: 10.44
Count of perfect (error zero) individuals by case: (216 216 228 216 288 215 216 216 233 276 216 228 216 127 127 127 127 134 216 127 127 127 228 127 216 216 216)
Population mean number of perfect (error zero) cases: 10.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction boolean_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_yankdup exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (boolean_yankdup exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.4001314830688E10
Median total errors in population: 362
Error averages by case: (2.000072690022E9 2.000023272054E9 2.00002446944E9 2.000028807512E9 2.000170349426E9 2.000013531054E9 2.000022544584E9 2.000026618652E9 2.000003945206E9 2.000002791464E9 2.000025316264E9 2.000018289196E9 2.000030336032E9 2.000029983262E9 2.000038381448E9 2.000157025154E9 2.00008354952E9 2.0000203027E9 2.000095240144E9 2.00008950344E9 2.000056879952E9 2.000064066844E9 2.00001854629E9 2.00007500632E9 2.000056291822E9 2.000052937362E9 2.000014155524E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.038
Average program size in population (points): 43.908
Average percent parens in population: 0.178
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.128
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 443819097
--- Timings ---
Current time: 1481339872284 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 317
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 318
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 318
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add boolean_rot string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap (boolean_not integer_add exec_dup) (string_yank in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 40
Percent parens: 0.150
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_rot} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add boolean_rot string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add string_yank) (boolean_eq in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 40
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 227 232 227 286 227 227 227 237 275 227 232 227 125 125 125 125 130 227 125 125 125 232 125 227 227 227)
Population mean number of elite cases: 10.70
Count of perfect (error zero) individuals by case: (227 227 232 227 286 227 227 227 237 275 227 232 227 125 125 125 125 130 227 125 125 125 232 125 227 227 227)
Population mean number of perfect (error zero) cases: 10.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank boolean_not integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank boolean_not integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.8523753784006E10
Median total errors in population: 362
Error averages by case: (2.24017407212E9 2.117576486742E9 2.179558648388E9 2.22809233748E9 3.207396095534E9 2.025934683644E9 2.026273556294E9 2.031277626598E9 2.000072804552E9 2.000023008996E9 2.04849591492E9 2.054420684284E9 2.068002718398E9 2.01022955759E9 2.011992768558E9 2.69618872138E9 2.14170136747E9 2.000266429298E9 2.436874432822E9 2.136139428506E9 2.021438894226E9 2.031175833492E9 2.057643867614E9 2.061544612382E9 2.31869561329E9 2.367470698714E9 2.005092920714E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 35.88
Average program size in population (points): 43.802
Average percent parens in population: 0.180
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.124
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 159500
Number of point (instruction) evaluations so far: 444952742
--- Timings ---
Current time: 1481339878450 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 318
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 319
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 319
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_substring} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_fromboolean exec_dup_items exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_substring string_dup integer_dup_items boolean_eq integer_pop integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap (boolean_not integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 39
Percent parens: 0.128
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_fromboolean} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_substring} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_pop} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_fromboolean exec_dup_items exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_substring string_dup integer_dup_items boolean_eq integer_pop integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (boolean_dup_times exec_swap integer_add (string_substring in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 39
Percent parens: 0.128
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 221 229 222 283 221 221 221 235 272 221 229 221 130 130 130 130 137 221 130 130 130 229 130 221 221 221)
Population mean number of elite cases: 10.61
Count of perfect (error zero) individuals by case: (221 221 229 222 283 221 221 221 235 272 221 229 221 130 130 130 130 137 221 130 130 130 229 130 221 221 221)
Population mean number of perfect (error zero) cases: 10.61
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 6.661853276911E10
Median total errors in population: 362
Error averages by case: (2.058052847714E9 3.308303112014E9 4.826297023572E9 5.144418525752E9 4.672267176362E9 1.296029177178E9 7.50015358874E8 7.50015429522E8 1.3183082676E7 6000965.084 1.232301604E9 1.971103159428E9 1.430001172486E9 4.77046884448E8 1.111163340462E9 5.821872479734E9 2.239512683022E9 3.55622853188E9 2.84739174515E9 3.07202258913E9 3.07200756949E9 3.430730988904E9 2.058051906798E9 3.308220898534E9 3.556328953844E9 4.374136922988E9 2.35828640064E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 36.154
Average program size in population (points): 44.15
Average percent parens in population: 0.181
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.576
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.576
Total error diversity:				 0.14
Error (vector) diversity:			 0.14
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 446130179
--- Timings ---
Current time: 1481339884817 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 319
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 320
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 320
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))))
Lexicase best partial simplification: (exec_swap integer_add (boolean_xor integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 42
Percent parens: 0.143
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction boolean_xor} {:close 0, :instruction integer_pop} {:close 0, :instruction exec_dup} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (boolean_xor integer_pop exec_dup (boolean_eq exec_dup (integer_gt in2 integer_mult 100 in2 integer_mult in1 100 in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))))
Zero cases best partial simplification: (exec_swap (integer_add) (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 42
Percent parens: 0.143
--- Lexicase Population Statistics ---
Count of elite individuals by case: (221 221 225 221 162 221 221 221 232 334 221 225 221 133 133 133 133 136 221 133 133 133 225 133 221 221 221)
Population mean number of elite cases: 10.51
Count of perfect (error zero) individuals by case: (221 221 225 221 162 221 221 221 232 334 221 225 221 133 133 133 133 136 221 133 133 133 225 133 221 221 221)
Population mean number of perfect (error zero) cases: 10.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2.2206636853022E10
Median total errors in population: 362
Error averages by case: (6.86052862056E8 1.102756654286E9 1.608738416302E9 1.714779105998E9 1.55753161779E9 4.3200936976E8 2.5001258915E8 2.50014691686E8 4395236.45 2000952.632 4.1077433776E8 6.57032005824E8 4.76676309028E8 1.59025339324E8 3.70399980782E8 1.940721529094E9 7.46545037066E8 1.185411968548E9 9.49180404858E8 1.02405071929E9 1.024021520074E9 1.143599988188E9 6.86014380364E8 1.10277134829E9 1.18545712389E9 1.458049485594E9 7.8613878938E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.748
Average program size in population (points): 45.528
Average percent parens in population: 0.172
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.56
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.56
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 160500
Number of point (instruction) evaluations so far: 447090832
--- Timings ---
Current time: 1481339890896 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 320
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 321
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 321
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars integer_min integer_min exec_dup_items boolean_not string_dup exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items string_parse_to_chars exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Lexicase best partial simplification: (exec_dup_items (integer_dec exec_swap (boolean_not integer_add) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 55
Percent parens: 0.164
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars integer_min integer_min exec_dup_items boolean_not string_dup exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items string_parse_to_chars exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 55
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 206 208 206 177 206 206 206 212 346 206 208 206 154 154 154 154 156 206 154 154 154 208 154 206 206 206)
Population mean number of elite cases: 10.44
Count of perfect (error zero) individuals by case: (206 206 208 206 177 206 206 206 212 346 206 208 206 154 154 154 154 156 206 154 154 154 208 154 206 206 206)
Population mean number of perfect (error zero) cases: 10.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 4.849885680938E10
Median total errors in population: 362
Error averages by case: (2.000051347946E9 2.00002026291E9 2.000024006938E9 2.000028611236E9 2.000152174822E9 2.00000918475E9 2.000012195166E9 2.000014197806E9 1.50597777578E8 2.0001058188E7 2.000015883844E9 2.000013713784E9 2.00001973987E9 2.000010716992E9 2.000013113524E9 2.000120170008E9 2.000047158634E9 3.27387960212E8 2.000074443342E9 2.000048668702E9 2.000020136534E9 2.000024431412E9 2.000014082866E9 2.00003356371E9 2.000048033214E9 2.00004848719E9 2.000005688202E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.758
Average program size in population (points): 45.584
Average percent parens in population: 0.172
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.132
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 448048799
--- Timings ---
Current time: 1481339897383 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 321
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 322
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 322
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min exec_dup_items exec_swap (exec_swap (boolean_not integer_add boolean_not exec_swap (boolean_not integer_add boolean_not string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))) ()) ()) ())
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 57
Percent parens: 0.211
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min exec_dup_items exec_swap (exec_swap (boolean_not integer_add boolean_not exec_swap (boolean_not integer_add boolean_not string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))) ()) ()) ())
Zero cases best partial simplification: (exec_swap (integer_add exec_noop) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 57
Percent parens: 0.211
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 235 239 235 161 235 235 235 241 337 235 239 235 128 128 128 128 134 235 128 128 128 239 128 235 235 235)
Population mean number of elite cases: 10.87
Count of perfect (error zero) individuals by case: (235 235 239 235 161 235 235 235 241 337 235 239 235 128 128 128 128 134 235 128 128 128 239 128 235 235 235)
Population mean number of perfect (error zero) cases: 10.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction integer_eq} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_and} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank integer_eq integer_dup_items boolean_and exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank integer_eq integer_dup_items boolean_and exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 2.220590955743E10
Median total errors in population: 362
Error averages by case: (6.86008055686E8 1.102743726508E9 1.608723026838E9 1.714759396738E9 1.557388967126E9 4.32005169802E8 2.50004629378E8 2.50004781586E8 4395440.606 2001187.55 4.1076348851E8 6.57024197046E8 4.76661930686E8 1.59017882096E8 3.7039034725E8 1.940609523042E9 7.46503423048E8 1.185411520926E9 9.49113518334E8 1.024007581632E9 1.024005443792E9 1.143579867506E9 6.86006305662E8 1.102742560604E9 1.185416944086E9 1.45800951243E9 7.8611128962E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.422
Average program size in population (points): 46.324
Average percent parens in population: 0.171
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 161500
Number of point (instruction) evaluations so far: 449019207
--- Timings ---
Current time: 1481339904272 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 322
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 323
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 323
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (integer_dec exec_swap (integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 40
Percent parens: 0.150
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (integer_dec exec_swap (integer_add string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 40
Percent parens: 0.150
--- Lexicase Population Statistics ---
Count of elite individuals by case: (237 237 240 237 161 237 237 237 241 339 237 240 237 126 126 126 126 139 237 126 126 126 240 126 237 237 237)
Population mean number of elite cases: 10.90
Count of perfect (error zero) individuals by case: (237 237 240 237 161 237 237 237 241 339 237 240 237 126 126 126 126 139 237 126 126 126 240 126 237 237 237)
Population mean number of perfect (error zero) cases: 10.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction exec_do*times} {:close 0, :instruction exec_yank} {:close 0, :instruction integer_add} {:close 0, :instruction string_reverse} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Partial simplification: (exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup exec_dup (string_yank exec_yank integer_dec integer_dec exec_swap (exec_dup (string_yank exec_do*times (exec_yank integer_add string_reverse exec_dup (string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())) ())
Errors: [0 0 0 0 0 0 0 0 0 11 0 0 0 8 23 20 14 12 0 24 44 44 0 36 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 37
Size: 47
Percent parens: 0.213
--- Population Statistics ---
Average total errors in population: 5.4002361343662E10
Median total errors in population: 362
Error averages by case: (2.000125520774E9 2.00003064028E9 2.00003203831E9 2.000037567722E9 2.000339259636E9 2.00001821663E9 2.000033447368E9 2.00004116656E9 2.000007294446E9 2.000005133194E9 2.000035861574E9 2.000024345722E9 2.00004362018E9 2.000059528262E9 2.000075929704E9 2.000312266828E9 2.000166185568E9 2.000038936992E9 2.000168008136E9 2.000177786364E9 2.000112339604E9 2.000126658142E9 2.000024661646E9 2.000148629656E9 2.000080661282E9 2.000072951474E9 2.000022687608E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.41
Average program size in population (points): 47.316
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 123
Genome diversity (% unique Plush genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.136
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 450016865
--- Timings ---
Current time: 1481339910988 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 323
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 324
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 324
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars integer_min integer_min exec_dup_items boolean_not string_dup exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items string_parse_to_chars exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Lexicase best partial simplification: (boolean_dup_times exec_noop exec_swap integer_add (exec_dup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 55
Percent parens: 0.164
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_parse_to_chars} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars integer_min integer_min exec_dup_items boolean_not string_dup exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items string_parse_to_chars exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Zero cases best partial simplification: (integer_add string_dup exec_dup (exec_swap (integer_add exec_dup string_swap) (integer_dup_items string_parse_to_chars in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max)))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 55
Percent parens: 0.164
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 215 219 215 172 215 215 215 225 337 215 219 215 142 142 142 142 148 215 142 142 142 219 142 215 215 215)
Population mean number of elite cases: 10.51
Count of perfect (error zero) individuals by case: (215 215 219 215 172 215 215 215 225 337 215 219 215 142 142 142 142 148 215 142 142 142 219 142 215 215 215)
Population mean number of perfect (error zero) cases: 10.51
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (boolean_not string_dup string_yank exec_swap (boolean_not integer_add exec_noop) (string_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 6 0 0 0 0 0 0 0 0 2 17 14 8 65 0 18 38 38 0 30 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 49
Size: 57
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 5.4003687172712E10
Median total errors in population: 362
Error averages by case: (2.000174110934E9 2.000161954476E9 2.000202533434E9 2.000214625398E9 2.000339410678E9 2.000088125756E9 2.000074617932E9 2.000078701184E9 2.000007806804E9 2.000005171094E9 2.00009751975E9 2.000116702954E9 2.000110025196E9 2.00005928885E9 2.00007560249E9 2.000311889634E9 2.000165809362E9 2.000038803966E9 2.00022096442E9 2.000177301866E9 2.000111853922E9 2.000126129638E9 2.000119810024E9 2.000148084474E9 2.000201884462E9 2.000219910426E9 2.000038533588E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.126
Average program size in population (points): 47.19
Average percent parens in population: 0.172
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 162500
Number of point (instruction) evaluations so far: 450999419
--- Timings ---
Current time: 1481339916807 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 324
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 325
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 325
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Lexicase best partial simplification: (integer_min exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 45
Percent parens: 0.178
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Zero cases best partial simplification: (exec_swap integer_add (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 45
Percent parens: 0.178
--- Lexicase Population Statistics ---
Count of elite individuals by case: (208 208 215 208 161 208 208 208 217 323 208 215 208 130 130 130 130 136 208 130 130 130 215 130 208 208 208)
Population mean number of elite cases: 10.04
Count of perfect (error zero) individuals by case: (208 208 215 208 161 208 208 208 217 323 208 215 208 130 130 130 130 136 208 130 130 130 215 130 208 208 208)
Population mean number of perfect (error zero) cases: 10.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_mod} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_mod string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_dec exec_swap exec_noop in1 exec_swap (integer_add exec_noop) (string_yank integer_gt 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 6 0 0 0 0 0 0 0 0 2 17 14 8 65 0 18 38 38 0 30 0 0 0]
Total: 236
Mean: 8.740741
Genome size: 49
Size: 57
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 1.5717499318E8
Median total errors in population: 362
Error averages by case: (7011783.296 1.100400187E7 1.6006903994E7 1.7066704936E7 1.493246112E7 4338655.774 2554171.662 2564190.7 54283.794 26944.882 4158004.354 6580653.886 4824728.014 794120.766 749586.098 9491184.164 3713427.368 70697.568 9680818.284 3366479.096 923565.256 1168558.468 6868303.188 1887053.832 1.191324681E7 1.4599293908E7 825170.092)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.314
Average program size in population (points): 47.27
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.118
Error (vector) diversity:			 0.12
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 451953527
--- Timings ---
Current time: 1481339922066 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 325
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 326
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 326
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_min integer_min exec_dup_items) boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Lexicase best partial simplification: (boolean_not exec_swap (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 61
Percent parens: 0.180
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_min integer_min exec_dup_items) boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Zero cases best partial simplification: (exec_dup_items exec_swap (integer_add string_swap) (exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 61
Percent parens: 0.180
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 218 226 218 169 218 218 218 232 335 218 226 218 139 139 139 139 146 218 139 139 139 226 139 218 218 218)
Population mean number of elite cases: 10.58
Count of perfect (error zero) individuals by case: (218 218 226 218 169 218 218 218 232 335 218 226 218 139 139 139 139 146 218 139 139 139 226 139 218 218 218)
Population mean number of perfect (error zero) cases: 10.58
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (exec_swap (integer_add) (integer_dup_items exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 1289176.754
Median total errors in population: 468
Error averages by case: (71317.246 22742.386 23842.508 28141.938 167111.158 13226.322 22130.126 26140.552 3931.162 2764.528 24809.978 17865.788 29757.102 29448.606 37660.342 154011.38 81959.026 19840.882 93428.184 87781.362 55766.562 62812.758 18114.68 73549.786 55201.022 51895.298 13926.072)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.52
Average program size in population (points): 46.266
Average percent parens in population: 0.171
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.508
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.508
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 163500
Number of point (instruction) evaluations so far: 452888984
--- Timings ---
Current time: 1481339927396 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 326
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 327
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 327
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (201 201 209 201 167 201 201 201 211 323 201 209 201 142 142 142 142 149 201 142 142 142 209 142 201 201 201)
Population mean number of elite cases: 10.05
Count of perfect (error zero) individuals by case: (201 201 209 201 167 201 201 201 211 323 201 209 201 142 142 142 142 149 201 142 142 142 209 142 201 201 201)
Population mean number of perfect (error zero) cases: 10.05
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (string_butlast exec_noop exec_swap (integer_add string_swap) (string_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 8.95556344496E9
Median total errors in population: 362
Error averages by case: (2.40102251018E8 6.080152658E8 1.293982429614E9 1.470185887414E9 1.207227367932E9 9.331362803E7 3.1251595806E7 3.1251631598E7 69610.444 21045.304 8.4362778754E7 2.1583808803E8 1.1360225815E8 1.0200500596E7 1.195556349E7 6.960335313E8 1.41619100592E8 247890.474 4.50401741142E8 1.36051390744E8 2.1383572104E7 3.111336462E7 2.3529977433E8 6.1471156676E7 7.02598309014E8 1.062884275642E9 5079436.342)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.466
Average program size in population (points): 47.366
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 116
Genome diversity (% unique Plush genomes):	 0.526
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 116
Syntactic diversity (% unique Push programs):	 0.526
Total error diversity:				 0.128
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 453848575
--- Timings ---
Current time: 1481339933642 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 327
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 328
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 328
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 48
Percent parens: 0.167
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))) ())
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (235 235 239 235 156 235 235 235 242 338 235 239 235 126 126 126 126 132 235 126 126 126 239 126 235 235 235)
Population mean number of elite cases: 10.83
Count of perfect (error zero) individuals by case: (235 235 239 235 156 235 235 235 242 338 235 239 235 126 126 126 126 132 235 126 126 126 239 126 235 235 235)
Population mean number of perfect (error zero) cases: 10.83
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction string_reverse} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup string_reverse string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (string_yank boolean_not string_dup string_reverse exec_swap (integer_add string_yank string_parse_to_chars) (boolean_eq in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 37715.152
Median total errors in population: 362
Error averages by case: (1466.334 1474.434 1587.666 1592.002 1757.872 1265.47 1211.208 1220.864 847.186 813.246 1292.098 1365.522 1327.108 1166.276 1289.214 1782.616 1486.0 1482.354 1562.108 1552.58 1505.552 1539.052 1374.778 1544.516 1552.466 1598.346 1058.284)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.31
Average program size in population (points): 46.984
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 113
Genome diversity (% unique Plush genomes):	 0.53
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 113
Syntactic diversity (% unique Push programs):	 0.53
Total error diversity:				 0.12
Error (vector) diversity:			 0.122
--- Run Statistics ---
Number of program evaluations used so far: 164500
Number of point (instruction) evaluations so far: 454759737
--- Timings ---
Current time: 1481339939215 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 328
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 329
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 329
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_rest})
Lexicase best program: (string_butlast string_yank integer_dec integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_yank in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_rest))) ())
Lexicase best partial simplification: (string_butlast boolean_not exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 48
Percent parens: 0.167
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_yank} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_rest})
Zero cases best program: (string_butlast string_yank integer_dec integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_yank in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_rest))) ())
Zero cases best partial simplification: (string_butlast exec_swap (integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 48
Percent parens: 0.167
--- Lexicase Population Statistics ---
Count of elite individuals by case: (218 218 223 218 171 218 218 218 224 315 218 223 218 131 131 131 131 139 218 131 131 131 223 131 218 218 218)
Population mean number of elite cases: 10.36
Count of perfect (error zero) individuals by case: (218 218 223 218 171 218 218 218 224 315 218 223 218 131 131 131 131 139 218 131 131 131 223 131 218 218 218)
Population mean number of perfect (error zero) cases: 10.36
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank boolean_not string_butlast string_yank integer_dec exec_swap (boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (boolean_not boolean_not string_yank exec_swap (integer_add exec_dup) (boolean_eq exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 5.0885576995122E10
Median total errors in population: 362
Error averages by case: (2.000004194606E9 2.000005298046E9 2.000006608326E9 2.00000687322E9 2.000006740806E9 2.000003359446E9 2.000002726062E9 2.000002735126E9 6.85465288184E8 2.00001218712E8 2.000003288086E9 2.000004053814E9 2.000003503366E9 2.000002617878E9 2.00000315508E9 2.000006648894E9 2.00000446692E9 2.00000352271E9 2.000004913222E9 2.000004794688E9 2.000004139016E9 2.000004361994E9 2.000004138954E9 2.00000455316E9 2.000005518778E9 2.000006222754E9 2.000002053274E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.828
Average program size in population (points): 46.452
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.134
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 455682263
--- Timings ---
Current time: 1481339944241 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 329
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 330
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 330
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (integer_add exec_noop string_dup exec_swap (integer_add exec_dup) (integer_pop boolean_eq in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 56
Percent parens: 0.161
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (string_yank string_dup exec_swap (integer_add exec_noop exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 56
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 232 241 232 153 232 232 232 245 325 232 241 232 121 121 121 121 125 232 121 121 121 241 121 232 232 232)
Population mean number of elite cases: 10.65
Count of perfect (error zero) individuals by case: (232 232 241 232 153 232 232 232 245 325 232 241 232 121 121 121 121 125 232 121 121 121 241 121 232 232 232)
Population mean number of perfect (error zero) cases: 10.65
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_dec exec_noop boolean_not exec_swap (boolean_not integer_add exec_dup string_parse_to_chars) (string_dup_items boolean_eq in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 49
Size: 57
Percent parens: 0.140
--- Population Statistics ---
Average total errors in population: 381827.15
Median total errors in population: 362
Error averages by case: (1220.62 1348.756 1483.484 1484.414 145783.352 1130.558 999.148 998.532 623.29 785.516 1095.206 1225.082 1126.568 8039.894 7565.758 91915.318 36007.57 1622.444 1309.43 32501.686 9111.166 11390.518 1235.696 18215.106 1356.422 1424.99 826.626)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.226
Average program size in population (points): 48.13
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.558
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.558
Total error diversity:				 0.128
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 165500
Number of point (instruction) evaluations so far: 456634876
--- Timings ---
Current time: 1481339949581 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 330
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 331
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 331
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())
Lexicase best partial simplification: (in1 exec_swap integer_add (100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 56
Percent parens: 0.161
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))) ())
Zero cases best partial simplification: (boolean_not exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 56
Percent parens: 0.161
--- Lexicase Population Statistics ---
Count of elite individuals by case: (206 206 215 206 157 206 206 206 220 310 206 215 206 119 119 119 119 125 206 119 119 119 215 119 206 206 206)
Population mean number of elite cases: 9.76
Count of perfect (error zero) individuals by case: (206 206 215 206 157 206 206 206 220 310 206 215 206 119 119 119 119 125 206 119 119 119 215 119 206 206 206)
Population mean number of perfect (error zero) cases: 9.76
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (integer_dec exec_dup_times exec_swap (integer_add exec_noop string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 189065.284
Median total errors in population: 362
Error averages by case: (8076.268 6997.342 7877.71 8154.098 12370.2 5142.952 4989.638 5195.282 2257.45 2009.12 5586.866 5922.354 5971.742 5143.856 6122.544 11996.606 8484.87 7132.558 9274.624 8989.086 7900.206 8275.152 5999.028 8575.322 8257.306 8550.048 3813.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.604
Average program size in population (points): 47.48
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.134
Error (vector) diversity:			 0.136
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 457558555
--- Timings ---
Current time: 1481339955427 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 331
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 332
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 332
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 220 224 220 140 220 220 220 227 306 220 224 220 111 111 111 111 123 220 111 111 111 224 111 220 220 220)
Population mean number of elite cases: 9.99
Count of perfect (error zero) individuals by case: (220 220 224 220 140 220 220 220 227 306 220 224 220 111 111 111 111 123 220 111 111 111 224 111 220 220 220)
Population mean number of perfect (error zero) cases: 9.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction 100} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop 100 exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (string_yank integer_dec integer_add exec_noop string_dup exec_swap (integer_add exec_noop string_yank string_swap) (integer_dup_items string_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 8.324831906E7
Median total errors in population: 362
Error averages by case: (4973412.28 1771563.12 2100120.608 2555735.92 1.5074855646E7 733723.536 1073087.27 1277249.55 45138.168 23378.608 1418113.714 1161069.446 1799017.69 967849.232 1207452.666 1.1897503576E7 4600805.31 226722.832 7274996.354 4756717.078 1908732.758 2338836.8 1194676.632 3252022.646 4572385.004 4589066.422 454086.194)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.248
Average program size in population (points): 47.024
Average percent parens in population: 0.169
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.586
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.586
Total error diversity:				 0.156
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 166500
Number of point (instruction) evaluations so far: 458490484
--- Timings ---
Current time: 1481339960921 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 332
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 333
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 333
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (integer_dup_items integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (integer_min exec_swap integer_add (exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (integer_dup_items integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add exec_dup string_swap) (exec_shove integer_stackdepth in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 212 218 212 168 212 212 212 220 320 212 218 212 137 137 137 137 142 212 137 137 137 218 137 212 212 212)
Population mean number of elite cases: 10.29
Count of perfect (error zero) individuals by case: (212 212 218 212 168 212 212 212 220 320 212 218 212 137 137 137 137 142 212 137 137 137 218 137 212 212 212)
Population mean number of perfect (error zero) cases: 10.29
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))
Partial simplification: (in1 exec_swap integer_add (integer_dup_items string_dup integer_dup_items boolean_eq exec_dup in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 42
Size: 47
Percent parens: 0.106
--- Population Statistics ---
Average total errors in population: 8.5560018658E7
Median total errors in population: 362
Error averages by case: (3769845.698 987617.9 917506.604 1071308.4 7010058.446 750442.222 1566495.33 1864814.824 876830.614 729383.346 1499395.38 905034.984 1727058.0 3177694.484 4210126.918 7491737.78 5387638.484 6133693.984 4467420.342 5979878.116 5915568.512 6147412.272 905550.034 6096418.688 2431524.038 2134746.168 1404817.09)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.306
Average program size in population (points): 47.102
Average percent parens in population: 0.170
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.136
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 459407363
--- Timings ---
Current time: 1481339966002 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 333
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 334
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 334
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (boolean_not integer_add string_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (212 212 219 212 157 212 212 212 227 314 212 219 212 124 124 124 124 131 212 124 124 124 219 124 212 212 212)
Population mean number of elite cases: 10.04
Count of perfect (error zero) individuals by case: (212 212 219 212 157 212 212 212 227 314 212 219 212 124 124 124 124 131 212 124 124 124 219 124 212 212 212)
Population mean number of perfect (error zero) cases: 10.04
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))
Partial simplification: (exec_swap (integer_add string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 40
Size: 45
Percent parens: 0.111
--- Population Statistics ---
Average total errors in population: 5.6545269159526E10
Median total errors in population: 362
Error averages by case: (1.8522714855E9 3.109827616506E9 4.713694816108E9 5.058685997674E9 4.427105883122E9 1.123244651994E9 6.25026649376E8 6.2502676504E8 9360586.896 4201050.284 1.063906042602E9 1.767445747588E9 1.248888268392E9 3.41757842828E8 7.61757729528E8 4.58437913694E9 1.68973049113E9 2.371113961832E9 2.63860738833E9 2.218111480622E9 2.074748579398E9 2.324657465248E9 1.852270238242E9 2.280469275566E9 3.366679786408E9 4.228348276748E9 1.83951945624E8)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.19
Average program size in population (points): 46.716
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 51
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 51
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.138
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 167500
Number of point (instruction) evaluations so far: 460317371
--- Timings ---
Current time: 1481339970776 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 334
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 335
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 335
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (boolean_dup_times exec_swap (integer_add string_pop exec_dup) (integer_stackdepth integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap integer_add (integer_add in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (215 215 219 215 162 215 215 215 224 330 215 219 215 137 137 137 137 143 215 137 137 137 219 137 215 215 215)
Population mean number of elite cases: 10.38
Count of perfect (error zero) individuals by case: (215 215 219 215 162 215 215 215 224 330 215 219 215 137 137 137 137 143 215 137 137 137 219 137 215 215 215)
Population mean number of perfect (error zero) cases: 10.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_yankdup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_yankdup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (string_butlast string_yankdup exec_swap (integer_add string_yank) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 878741.616
Median total errors in population: 362
Error averages by case: (39121.1 5098.96 5121.214 6346.306 160317.838 3014.276 6499.504 8493.12 1516.738 1261.448 6973.546 4039.918 9023.92 14510.476 23502.574 158427.424 62585.134 17697.908 59334.048 73918.046 47069.246 54820.178 4084.972 63425.774 20798.184 17619.692 4120.072)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.332
Average program size in population (points): 47.06
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.128
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 461215766
--- Timings ---
Current time: 1481339975720 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 335
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 336
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 336
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank boolean_not string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items boolean_eq boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (boolean_not exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 37
Percent parens: 0.135
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank boolean_not string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items boolean_eq boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap (integer_add string_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 37
Percent parens: 0.135
--- Lexicase Population Statistics ---
Count of elite individuals by case: (219 219 226 219 164 219 219 219 230 322 219 226 219 129 129 129 129 136 219 129 129 129 226 129 219 219 219)
Population mean number of elite cases: 10.38
Count of perfect (error zero) individuals by case: (219 219 226 219 164 219 219 219 230 322 219 226 219 129 129 129 129 136 219 129 129 129 226 129 219 219 219)
Population mean number of perfect (error zero) cases: 10.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (string_yank boolean_not string_dup string_yank exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 1.55599389464E8
Median total errors in population: 362
Error averages by case: (6939074.252 1.087666078E7 1.58394231E7 1.6891791134E7 1.4796187014E7 4273400.014 2516407.71 2528525.702 53713.91 26747.91 4100286.148 6493059.804 4761202.522 792332.266 754805.472 9414869.226 3689644.398 83632.414 9584959.148 3351247.886 937413.886 1181259.754 6777890.782 1890908.802 1.1785318276E7 1.4447164936E7 811462.218)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.39
Average program size in population (points): 47.15
Average percent parens in population: 0.167
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.592
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.592
Total error diversity:				 0.152
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 168500
Number of point (instruction) evaluations so far: 462174024
--- Timings ---
Current time: 1481339980595 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 336
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 337
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 337
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap (integer_add string_pop) (string_yank in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add string_dup string_swap) (integer_add exec_shove in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 234 236 234 177 234 234 234 238 350 234 236 234 145 145 145 145 156 234 145 145 145 236 145 234 234 234)
Population mean number of elite cases: 11.19
Count of perfect (error zero) individuals by case: (234 234 236 234 177 234 234 234 238 350 234 236 234 145 145 145 145 156 234 145 145 145 236 145 234 234 234)
Population mean number of perfect (error zero) cases: 11.19
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (string_yank integer_add exec_noop boolean_not exec_dup_times exec_noop exec_swap (boolean_not integer_add string_swap) (integer_pop string_yank integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 2.220745297256E10
Median total errors in population: 362
Error averages by case: (6.86072109152E8 1.10284801104E9 1.608876717894E9 1.714923506746E9 1.557532384168E9 4.32044457932E8 2.500265328E8 2.50026678032E8 4395163.58 2000895.824 4.10800757566E8 6.5708517949E8 4.7670554908E8 1.5902507399E8 3.70399717892E8 1.940722112618E9 7.46544907754E8 1.185411627988E9 9.49203353278E8 1.024050635314E9 1.024021257714E9 1.143599752062E9 6.86070092468E8 1.102771177054E9 1.185529560304E9 1.458148740956E9 7.8617019864E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.91
Average program size in population (points): 47.712
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.124
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 463109233
--- Timings ---
Current time: 1481339985566 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 337
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 338
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 338
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 37
Percent parens: 0.108
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Zero cases best partial simplification: (exec_swap integer_add (string_dup_items integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 37
Percent parens: 0.108
--- Lexicase Population Statistics ---
Count of elite individuals by case: (225 225 227 225 181 225 225 225 231 357 225 227 225 149 149 149 149 151 225 149 149 149 227 149 225 225 225)
Population mean number of elite cases: 10.99
Count of perfect (error zero) individuals by case: (225 225 227 225 181 225 225 225 231 357 225 227 225 149 149 149 149 151 225 149 149 149 227 149 225 225 225)
Population mean number of perfect (error zero) cases: 10.99
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (boolean_not exec_swap (integer_add) (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 46
Size: 54
Percent parens: 0.148
--- Population Statistics ---
Average total errors in population: 55204.35
Median total errors in population: 362
Error averages by case: (2201.672 1607.448 1678.042 1733.398 3177.686 1359.496 1476.738 1553.882 1030.38 1129.324 1531.99 1474.474 1614.694 1830.376 2210.906 3362.14 2623.28 2975.752 2441.502 2840.46 2836.74 2918.88 1482.956 2892.988 1970.472 1943.02 1305.654)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.068
Average program size in population (points): 46.676
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.55
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.55
Total error diversity:				 0.122
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 169500
Number of point (instruction) evaluations so far: 463992561
--- Timings ---
Current time: 1481339990284 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 338
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 339
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 339
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (exec_swap integer_add (exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (integer_add string_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (227 227 231 227 176 227 227 227 233 347 227 231 227 143 143 143 143 148 227 143 143 143 231 143 227 227 227)
Population mean number of elite cases: 10.93
Count of perfect (error zero) individuals by case: (227 227 231 227 176 227 227 227 233 347 227 231 227 143 143 143 143 148 227 143 143 143 231 143 227 227 227)
Population mean number of perfect (error zero) cases: 10.93
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (integer_dec exec_swap (boolean_not integer_add string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))
Partial simplification: (exec_swap integer_add (string_dup integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 33
Size: 37
Percent parens: 0.108
--- Population Statistics ---
Average total errors in population: 1359291.188
Median total errors in population: 362
Error averages by case: (74665.56 26061.184 27598.76 32013.588 172186.64 15608.982 24215.488 28256.48 4409.16 3155.268 27270.0 20642.58 32382.864 30928.266 39171.844 158437.826 84852.938 20356.284 97309.38 90648.638 57520.998 64754.418 20932.42 75877.134 58925.64 55816.896 15291.952)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.936
Average program size in population (points): 46.55
Average percent parens in population: 0.166
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.132
Error (vector) diversity:			 0.134
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 464886924
--- Timings ---
Current time: 1481339995940 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 339
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 340
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 340
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_dup exec_dup (string_yank string_swap) string_parse_to_chars) integer_dup_items integer_pop boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 45
Percent parens: 0.156
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction boolean_not} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add boolean_not string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_dup exec_dup (string_yank string_swap) string_parse_to_chars) integer_dup_items integer_pop boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (integer_gt in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 45
Percent parens: 0.156
--- Lexicase Population Statistics ---
Count of elite individuals by case: (210 210 215 210 173 210 210 210 219 322 210 215 210 143 143 143 143 147 210 143 143 143 215 143 210 210 210)
Population mean number of elite cases: 10.34
Count of perfect (error zero) individuals by case: (210 210 215 210 173 210 210 210 219 322 210 215 210 143 143 143 143 147 210 143 143 143 215 143 210 210 210)
Population mean number of perfect (error zero) cases: 10.34
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_empty} {:close 0, :instruction string_butlast} {:close 0, :instruction integer_lte} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_replace} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction string_shove} {:close 0, :instruction integer_gt} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_empty string_butlast integer_lte integer_dec exec_swap (boolean_not integer_add exec_noop string_replace exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items boolean_eq string_shove integer_gt string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))) ())
Partial simplification: (boolean_not exec_swap (integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 47
Size: 54
Percent parens: 0.130
--- Population Statistics ---
Average total errors in population: 3.08781841254E8
Median total errors in population: 362
Error averages by case: (1.407571103E7 1.6426004724E7 1.8627863804E7 1.90322083E7 1.8175240334E7 1.2015232774E7 1.0024146908E7 1.0028306392E7 2604302.864 2002995.948 1.1827213216E7 1.3820533444E7 1.2432443008E7 6631508.758 6440218.454 1.5561673078E7 1.1286564476E7 2222191.716 1.5698818066E7 1.0892680248E7 6859346.688 7466716.014 1.4020834366E7 8877881.528 1.6859587642E7 1.8056446866E7 6815170.608)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.548
Average program size in population (points): 46.19
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.58
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.58
Total error diversity:				 0.126
Error (vector) diversity:			 0.13
--- Run Statistics ---
Number of program evaluations used so far: 170500
Number of point (instruction) evaluations so far: 465787649
--- Timings ---
Current time: 1481340001629 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 340
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 341
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 341
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Lexicase best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 37
Percent parens: 0.108
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 37
Percent parens: 0.108
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 220 222 220 175 220 220 220 225 350 220 222 220 144 144 144 144 147 220 144 144 144 222 144 220 220 220)
Population mean number of elite cases: 10.71
Count of perfect (error zero) individuals by case: (220 220 222 220 175 220 220 220 225 350 220 222 220 144 144 144 144 147 220 144 144 144 222 144 220 220 220)
Population mean number of perfect (error zero) cases: 10.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_dup_times} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction string_dup} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec exec_swap (boolean_not integer_add exec_noop boolean_not exec_dup_times (exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank string_dup integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))) ())
Partial simplification: (exec_dup_times exec_swap integer_add (string_dup_items exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 50
Size: 58
Percent parens: 0.138
--- Population Statistics ---
Average total errors in population: 9.967012840608E9
Median total errors in population: 362
Error averages by case: (4.8972430005E8 1.74220092144E8 2.0678327969E8 2.51882688738E8 1.523195187216E9 7.1679232418E7 1.04815825472E8 1.2482786164E8 4049660.224 1997078.47 1.3896598839E8 1.13841327674E8 1.76528647164E8 1.21979441592E8 2.07865370592E8 1.50905468256E9 5.80450476162E8 1.55196595116E8 7.17584681124E8 6.91030976462E8 4.35093908662E8 5.09666058256E8 1.17164204454E8 5.9157093191E8 4.51044637794E8 4.52946495886E8 4.3853210748E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.916
Average program size in population (points): 45.194
Average percent parens in population: 0.163
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.594
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.594
Total error diversity:				 0.124
Error (vector) diversity:			 0.126
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 466620998
--- Timings ---
Current time: 1481340006373 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 341
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 342
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 342
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Lexicase best partial simplification: (string_yank string_dup in1 exec_swap integer_add (string_yank in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 37
Percent parens: 0.108
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Zero cases best partial simplification: (exec_swap (integer_add string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 37
Percent parens: 0.108
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 224 226 224 170 224 224 224 228 335 224 226 224 133 133 133 133 134 224 133 133 133 226 133 224 224 224)
Population mean number of elite cases: 10.59
Count of perfect (error zero) individuals by case: (224 224 226 224 170 224 224 224 228 335 224 226 224 133 133 133 133 134 224 133 133 133 226 133 224 224 224)
Population mean number of perfect (error zero) cases: 10.59
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_min} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_inc} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank integer_dec integer_min integer_min exec_dup_items boolean_not integer_inc exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ())
Partial simplification: (integer_inc integer_dec exec_swap (integer_add integer_fromstring) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 7 0 0 0 0 0 0 0 0 1 16 13 7 64 0 17 37 37 0 29 0 0 0]
Total: 228
Mean: 8.444445
Genome size: 40
Size: 47
Percent parens: 0.149
--- Population Statistics ---
Average total errors in population: 2576721.448
Median total errors in population: 362
Error averages by case: (142787.866 44550.692 46640.726 55298.946 336061.52 25575.104 43684.692 51763.234 7323.048 5040.106 49005.28 34845.638 58954.254 58646.302 75340.434 310019.83 164553.252 40235.8 187358.83 176454.596 112197.156 126423.63 35337.1 147946.848 110082.598 103336.762 27257.204)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.808
Average program size in population (points): 45.3
Average percent parens in population: 0.168
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.13
Error (vector) diversity:			 0.132
--- Run Statistics ---
Number of program evaluations used so far: 171500
Number of point (instruction) evaluations so far: 467493513
--- Timings ---
Current time: 1481340011082 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 342
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 343
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 343
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank integer_dec exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Lexicase best partial simplification: (integer_dec in1 exec_swap integer_add (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 37
Percent parens: 0.108
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction in1} {:close 0, :instruction string_yank} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction string_dup_items} {:close 0, :instruction string_yank} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank integer_dec exec_noop string_dup in1 string_yank exec_swap (boolean_not integer_add exec_noop string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_dup_items integer_pop string_dup_items string_yank integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))
Zero cases best partial simplification: (exec_swap (integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 37
Percent parens: 0.108
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 232 238 232 167 232 232 232 244 338 232 238 232 127 127 127 127 131 232 127 127 127 238 127 232 232 232)
Population mean number of elite cases: 10.79
Count of perfect (error zero) individuals by case: (232 232 238 232 167 232 232 232 244 338 232 238 232 127 127 127 127 131 232 127 127 127 238 127 232 232 232)
Population mean number of perfect (error zero) cases: 10.79
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (exec_yankdup boolean_not boolean_not exec_dup integer_min exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 9 0 0 0 0 0 0 0 0 1 14 11 5 62 0 15 35 35 0 27 0 0 0]
Total: 214
Mean: 7.9259257
Genome size: 48
Size: 60
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 3204285.042
Median total errors in population: 362
Error averages by case: (146294.402 168939.834 191651.71 195955.454 191384.574 123342.896 103247.86 103417.804 27074.492 20961.68 121781.516 142011.886 128136.884 68916.11 67295.548 164195.17 118120.744 24081.16 163647.276 114313.972 72233.246 78643.532 144075.658 93337.162 174385.656 186606.796 70232.02)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 37.966
Average program size in population (points): 45.388
Average percent parens in population: 0.165
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.14
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 468399675
--- Timings ---
Current time: 1481340015921 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 343
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 344
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 344
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Lexicase best partial simplification: (boolean_dup_times exec_swap integer_add (exec_shove in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 41
Percent parens: 0.146
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_shove} {:close 0, :instruction string_yank} {:close 0, :instruction string_yank} {:close 0, :instruction integer_stackdepth} {:close 0, :instruction integer_dup_items} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction in2} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup exec_shove (string_yank string_yank integer_stackdepth integer_dup_items boolean_eq exec_dup (integer_gt in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max string_replacefirst))))
Zero cases best partial simplification: (exec_swap (boolean_not integer_add) (exec_dup in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 41
Percent parens: 0.146
--- Lexicase Population Statistics ---
Count of elite individuals by case: (220 220 227 220 158 220 220 220 232 321 220 227 220 128 124 124 124 134 220 124 124 124 227 124 220 220 220)
Population mean number of elite cases: 10.32
Count of perfect (error zero) individuals by case: (220 220 227 220 158 220 220 220 232 321 220 227 220 128 124 124 124 134 220 124 124 124 227 124 220 220 220)
Population mean number of perfect (error zero) cases: 10.32
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (boolean_not boolean_not exec_dup_items exec_swap (integer_add exec_noop integer_fromstring string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 9 0 0 0 0 0 0 0 0 1 14 11 5 62 0 15 35 35 0 27 0 0 0]
Total: 214
Mean: 7.9259257
Genome size: 48
Size: 60
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 1.39053596546E8
Median total errors in population: 362
Error averages by case: (4902807.412 1750099.252 2077703.556 2529048.062 1.557533596E7 721498.044 1051612.758 1251700.622 41523.226 20911.41 1394133.73 1144302.218 1770101.674 1591116.002 3704535.36 1.9406770116E7 7465913.304 1.1853018142E7 7182448.962 1.024063442E7 1.0239948708E7 1.143566151E7 1177674.7 1.1027568912E7 4518397.572 4538529.8 440601.114)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.016
Average program size in population (points): 48.252
Average percent parens in population: 0.189
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 123
Genome diversity (% unique Plush genomes):	 0.524
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 123
Syntactic diversity (% unique Push programs):	 0.524
Total error diversity:				 0.136
Error (vector) diversity:			 0.138
--- Run Statistics ---
Number of program evaluations used so far: 172500
Number of point (instruction) evaluations so far: 469212096
--- Timings ---
Current time: 1481340020586 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 344
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 345
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 345
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_dup_times integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (boolean_not integer_add exec_noop integer_fromstring integer_min exec_swap (integer_add string_swap string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 60
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_dup_times integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (integer_dec exec_dup exec_dup_items integer_dec exec_swap (integer_add integer_fromstring) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 60
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (213 213 217 213 167 214 213 213 220 334 213 217 213 165 139 139 139 147 213 139 139 139 217 139 213 213 213)
Population mean number of elite cases: 10.43
Count of perfect (error zero) individuals by case: (213 213 217 213 167 214 213 213 220 334 213 217 213 165 139 139 139 147 213 139 139 139 217 139 213 213 213)
Population mean number of perfect (error zero) cases: 10.43
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (boolean_not exec_dup integer_min integer_dec exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 10 0 0 0 0 0 0 0 0 2 13 10 4 61 0 14 34 34 0 26 0 0 0]
Total: 208
Mean: 7.703704
Genome size: 49
Size: 61
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 2660874.33
Median total errors in population: 362
Error averages by case: (146653.962 50233.324 53155.452 61860.472 339545.274 29804.306 46976.444 54981.348 8198.55 5708.464 52914.388 39671.676 63004.384 60409.892 76627.582 312313.438 166884.712 39207.54 191401.608 178305.796 112775.996 127065.74 40233.546 149074.412 115300.65 109067.746 29497.628)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 38.81
Average program size in population (points): 47.914
Average percent parens in population: 0.189
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 76
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 76
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.148
Error (vector) diversity:			 0.15
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 470015089
--- Timings ---
Current time: 1481340025636 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 345
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 346
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 346
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec string_yank integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (exec_swap integer_add integer_fromstring exec_swap (exec_swap (boolean_not integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 60
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec string_yank integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (string_yank exec_swap integer_add exec_noop exec_swap (integer_add exec_noop) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 60
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (234 234 238 234 137 234 234 234 245 312 234 238 234 135 104 104 104 109 234 104 105 104 238 104 234 234 234)
Population mean number of elite cases: 10.38
Count of perfect (error zero) individuals by case: (234 234 238 234 137 234 234 234 245 312 234 238 234 135 104 104 104 109 234 104 105 104 238 104 234 234 234)
Population mean number of perfect (error zero) cases: 10.38
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (exec_swap string_rest exec_dup exec_dup integer_min exec_swap (integer_add exec_noop) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 11 0 0 0 0 0 0 0 0 3 12 9 3 60 0 13 33 33 0 25 0 0 0]
Total: 202
Mean: 7.4814816
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 1345466.328
Median total errors in population: 362
Error averages by case: (74346.786 23796.124 24929.908 29395.134 173983.83 13912.222 23214.334 27356.822 4318.228 3104.674 25981.936 18746.404 31125.304 30823.764 39355.184 160352.196 85425.138 20787.0 97339.844 91476.002 58174.242 65501.796 19004.05 76671.182 57561.806 54114.442 14667.976)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.542
Average program size in population (points): 49.04
Average percent parens in population: 0.195
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 114
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 114
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.14
Error (vector) diversity:			 0.142
--- Run Statistics ---
Number of program evaluations used so far: 173500
Number of point (instruction) evaluations so far: 470803256
--- Timings ---
Current time: 1481340030676 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 346
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 347
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 347
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ())) ()) ())
Lexicase best partial simplification: (string_yank (integer_dec exec_swap (integer_add integer_fromstring) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 58
Percent parens: 0.207
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ())) ()) ())
Zero cases best partial simplification: (exec_swap exec_swap boolean_not integer_add integer_fromstring exec_swap (boolean_not integer_add exec_noop string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 58
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (214 214 217 214 178 214 214 214 224 337 214 217 214 174 140 140 140 146 214 140 140 140 217 140 214 214 214)
Population mean number of elite cases: 10.52
Count of perfect (error zero) individuals by case: (214 214 217 214 178 214 214 214 224 337 214 217 214 174 140 140 140 146 214 140 140 140 217 140 214 214 214)
Population mean number of perfect (error zero) cases: 10.52
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (string_yank integer_fromstring string_swap exec_swap (exec_swap (integer_add exec_noop) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Errors: [0 0 0 0 12 0 0 0 0 0 0 0 0 4 11 8 2 59 0 12 32 32 0 24 0 0 0]
Total: 196
Mean: 7.259259
Genome size: 48
Size: 60
Percent parens: 0.200
--- Population Statistics ---
Average total errors in population: 90998.462
Median total errors in population: 362
Error averages by case: (3481.226 3528.314 5488.018 3763.848 5024.974 2628.454 2435.146 2474.126 1448.388 1088.024 2715.472 4282.114 2848.522 2298.326 2762.654 5093.612 3626.214 3279.128 3924.214 3902.87 3559.738 3729.48 4332.36 3811.862 3718.966 3855.93 1896.482)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.006
Average program size in population (points): 49.586
Average percent parens in population: 0.192
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 111
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.144
Error (vector) diversity:			 0.144
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 471599783
--- Timings ---
Current time: 1481340036006 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 347
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 348
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 348
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_dup_times integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (string_butlast integer_dec exec_swap boolean_not () exec_dup exec_swap (exec_swap (integer_add exec_noop) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 60
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_dup_times integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (integer_fromstring integer_dec exec_swap (integer_add integer_fromstring) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 60
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 229 234 229 163 229 229 229 235 332 229 234 229 166 128 128 128 129 229 128 128 128 234 128 229 229 229)
Population mean number of elite cases: 10.74
Count of perfect (error zero) individuals by case: (229 229 234 229 163 229 229 229 235 332 229 234 229 166 128 128 128 129 229 128 128 128 234 128 229 229 229)
Population mean number of perfect (error zero) cases: 10.74
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (boolean_not exec_dup integer_min exec_swap (exec_swap (boolean_not integer_add exec_noop string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Errors: [0 0 0 0 13 0 0 0 0 0 0 0 0 5 10 7 1 58 0 11 31 31 0 23 0 0 0]
Total: 190
Mean: 7.037037
Genome size: 49
Size: 61
Percent parens: 0.197
--- Population Statistics ---
Average total errors in population: 2609907.298
Median total errors in population: 362
Error averages by case: (144399.876 46054.028 48300.838 56994.602 337932.162 26727.6 44808.31 52935.246 7801.578 5435.814 50225.192 36151.126 60250.394 59760.556 76395.568 311462.02 165998.758 40557.348 189083.89 177753.274 113066.594 127312.004 36657.364 149000.978 111697.384 104998.768 28146.026)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.106
Average program size in population (points): 48.69
Average percent parens in population: 0.196
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 111
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.124
Error (vector) diversity:			 0.124
--- Run Statistics ---
Number of program evaluations used so far: 174500
Number of point (instruction) evaluations so far: 472361277
--- Timings ---
Current time: 1481340041142 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 348
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 349
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 349
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (99 in2 integer_mult in1 100 integer_mult integer_dup_items integer_pop boolean_eq exec_dup (integer_gt boolean_flush in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))) ()) ()) ())
Lexicase best partial simplification: (boolean_not exec_swap integer_add (in2 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 284
Lexicase best mean error: 10.518518
Lexicase best size: 62
Percent parens: 0.210
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dup_items} {:close 0, :instruction integer_pop} {:close 0, :instruction boolean_eq} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_gt} {:close 0, :instruction boolean_flush} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (99 in2 integer_mult in1 100 integer_mult integer_dup_items integer_pop boolean_eq exec_dup (integer_gt boolean_flush in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))) ()) ()) ())
Zero cases best partial simplification: (exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 8 23 20 14 71 0 24 44 44 0 36 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 284
Zero cases best mean error: 10.518518
Zero cases best size: 62
Percent parens: 0.210
--- Lexicase Population Statistics ---
Count of elite individuals by case: (236 236 240 236 162 236 236 236 246 337 236 240 236 155 122 122 126 125 236 122 122 122 240 122 236 236 236)
Population mean number of elite cases: 10.87
Count of perfect (error zero) individuals by case: (236 236 240 236 162 236 236 236 246 337 236 240 236 155 122 122 126 125 236 122 122 122 240 122 236 236 236)
Population mean number of perfect (error zero) cases: 10.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (exec_swap exec_swap string_swap exec_dup integer_min exec_dup_items exec_swap (integer_add exec_dup string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Total: 184
Mean: 6.814815
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 5.4002647776382E10
Median total errors in population: 362
Error averages by case: (2.000145964344E9 2.000048722148E9 2.000051576372E9 2.000060342964E9 2.000339618856E9 2.000028410218E9 2.000045974544E9 2.000054059224E9 2.00000788967E9 2.00000545957E9 2.000051753188E9 2.00003820759E9 2.000061863692E9 2.000060266742E9 2.00007688114E9 2.000312879022E9 2.000166987454E9 2.000040614964E9 2.000190829364E9 2.000178701098E9 2.000113595778E9 2.000127904242E9 2.000038760114E9 2.000149739682E9 2.000114159978E9 2.000107831614E9 2.00002878281E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.106
Average program size in population (points): 49.812
Average percent parens in population: 0.193
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 121
Genome diversity (% unique Plush genomes):	 0.516
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.516
Total error diversity:				 0.154
Error (vector) diversity:			 0.156
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 473148049
--- Timings ---
Current time: 1481340046088 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 349
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 350
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 350
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (string_yank integer_dec integer_min integer_dec exec_swap integer_add (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 184
Lexicase best mean error: 6.814815
Lexicase best size: 62
Percent parens: 0.194
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (exec_noop integer_fromstring exec_dup integer_dec exec_swap (integer_add string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 184
Zero cases best mean error: 6.814815
Zero cases best size: 62
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (229 229 236 229 142 229 229 229 240 325 229 236 229 148 113 113 248 114 229 113 113 113 236 113 229 229 229)
Population mean number of elite cases: 10.70
Count of perfect (error zero) individuals by case: (229 229 236 229 142 229 229 229 240 325 229 236 229 148 113 113 248 114 229 113 113 113 236 113 229 229 229)
Population mean number of perfect (error zero) cases: 10.70
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (string_butlast exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (exec_yankdup exec_swap boolean_not string_swap exec_swap (integer_add exec_noop) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Total: 184
Mean: 6.814815
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 1379870.452
Median total errors in population: 362
Error averages by case: (75366.278 26504.174 27981.172 32379.046 172751.696 16101.38 24839.168 28916.48 5051.788 3781.334 27836.82 21115.118 32957.892 31909.252 40314.544 159231.532 85854.676 22114.674 97965.916 91731.16 58894.0 66114.58 21401.728 77122.452 59411.09 56252.61 15969.892)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.024
Average program size in population (points): 49.7
Average percent parens in population: 0.195
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 117
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 117
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.146
Error (vector) diversity:			 0.146
--- Run Statistics ---
Number of program evaluations used so far: 175500
Number of point (instruction) evaluations so far: 473909452
--- Timings ---
Current time: 1481340051574 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 350
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 351
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 351
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_empty integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (exec_swap (integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 58
Percent parens: 0.207
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_empty integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (exec_swap boolean_not exec_dup string_swap exec_dup integer_min exec_swap integer_add (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 58
Percent parens: 0.207
--- Lexicase Population Statistics ---
Count of elite individuals by case: (224 224 226 224 154 224 224 224 234 330 224 226 224 157 125 125 267 130 224 125 125 125 226 125 224 224 224)
Population mean number of elite cases: 10.78
Count of perfect (error zero) individuals by case: (224 224 226 224 154 224 224 224 234 330 224 226 224 157 125 125 267 130 224 125 125 125 226 125 224 224 224)
Population mean number of perfect (error zero) cases: 10.78
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (integer_fromstring exec_dup string_swap integer_dec exec_swap (boolean_not integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Total: 184
Mean: 6.814815
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 168625.294
Median total errors in population: 362
Error averages by case: (7831.856 6758.938 7675.358 8011.686 13317.496 4775.062 4470.816 4642.286 1623.712 1426.75 5174.188 5593.742 5591.53 3861.036 4319.444 12296.964 7556.72 2788.25 9313.266 7822.032 5449.552 5936.884 5675.922 6737.432 8236.068 8578.436 3159.868)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.612
Average program size in population (points): 49.114
Average percent parens in population: 0.192
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 108
Genome diversity (% unique Plush genomes):	 0.518
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 108
Syntactic diversity (% unique Push programs):	 0.518
Total error diversity:				 0.15
Error (vector) diversity:			 0.152
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 474681699
--- Timings ---
Current time: 1481340057570 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 351
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 352
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 352
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (string_butlast exec_yankdup exec_swap boolean_not integer_dec exec_swap (boolean_not integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 184
Lexicase best mean error: 6.814815
Lexicase best size: 62
Percent parens: 0.194
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (exec_swap exec_swap boolean_not exec_dup (exec_swap (integer_add exec_noop integer_fromstring) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 184
Zero cases best mean error: 6.814815
Zero cases best size: 62
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 232 238 232 150 232 232 232 242 324 232 238 232 151 120 120 261 123 232 120 120 120 238 120 232 232 232)
Population mean number of elite cases: 10.94
Count of perfect (error zero) individuals by case: (232 232 238 232 150 232 232 232 242 324 232 238 232 151 120 120 261 123 232 120 120 120 238 120 232 232 232)
Population mean number of perfect (error zero) cases: 10.94
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Partial simplification: (string_yank exec_yankdup integer_dec integer_fromstring exec_dup string_swap exec_dup exec_swap (integer_dec exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Total: 184
Mean: 6.814815
Genome size: 50
Size: 62
Percent parens: 0.194
--- Population Statistics ---
Average total errors in population: 2.2210855442472E10
Median total errors in population: 362
Error averages by case: (6.86076224768E8 1.10276380208E9 1.608743538822E9 1.71478399587E9 1.558058066084E9 4.32016927268E8 2.50025365088E8 2.50029409504E8 4398834.028 2009509.004 4.10786587674E8 6.57040132086E8 4.766897592E8 1.59156741272E8 3.70620966792E8 1.94134627428E9 7.46893238684E8 1.185852158412E9 9.49203028312E8 1.024475956972E9 1.024442425772E9 1.144053061016E9 6.86022440792E8 1.103216424652E9 1.185468718556E9 1.458057717616E9 7.8624137868E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.402
Average program size in population (points): 50.204
Average percent parens in population: 0.194
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 94
Genome diversity (% unique Plush genomes):	 0.522
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 94
Syntactic diversity (% unique Push programs):	 0.522
Total error diversity:				 0.16
Error (vector) diversity:			 0.162
--- Run Statistics ---
Number of program evaluations used so far: 176500
Number of point (instruction) evaluations so far: 475462989
--- Timings ---
Current time: 1481340063874 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 352
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 353
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 353
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (string_butlast exec_swap boolean_not exec_noop integer_fromstring integer_min exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 184
Lexicase best mean error: 6.814815
Lexicase best size: 62
Percent parens: 0.194
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (exec_yankdup exec_swap integer_fromstring exec_dup string_swap exec_dup exec_dup_items exec_swap (integer_add string_swap) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 184
Zero cases best mean error: 6.814815
Zero cases best size: 62
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (253 253 256 253 138 253 253 253 264 320 253 256 253 139 102 102 241 108 253 102 102 102 256 102 253 253 253)
Population mean number of elite cases: 11.25
Count of perfect (error zero) individuals by case: (253 253 256 253 138 253 253 253 264 320 253 256 253 139 102 102 241 108 253 102 102 102 256 102 253 253 253)
Population mean number of perfect (error zero) cases: 11.25
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Partial simplification: (string_butlast exec_swap (boolean_not integer_add exec_noop) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Errors: [0 0 0 0 25 0 0 0 0 0 0 0 0 17 2 5 11 46 0 1 19 19 0 11 0 0 0]
Total: 156
Mean: 5.7777777
Genome size: 46
Size: 49
Percent parens: 0.061
--- Population Statistics ---
Average total errors in population: 2.2305848073932E10
Median total errors in population: 362
Error averages by case: (6.9092545625E8 1.104491640216E9 1.61079517505E9 1.717282320002E9 1.572632895706E9 4.32727607824E8 2.5106334396E8 2.51265454058E8 4438749.632 2023187.94 4.12163172626E8 6.58168913354E8 4.78438365656E8 1.60253751632E8 3.7248482458E8 1.955701201206E9 7.52330196148E8 1.186967099542E9 9.5630844609E8 1.030935125232E9 1.028367715988E9 1.148687419556E9 6.87184209504E8 1.108671542168E9 1.189936760466E9 1.46254541005E9 7.9058089496E7)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.308
Average program size in population (points): 49.99
Average percent parens in population: 0.194
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.16
Error (vector) diversity:			 0.16
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 476289335
--- Timings ---
Current time: 1481340069468 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 353
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 354
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 354
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_dup_times integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (string_butlast integer_dec exec_dup_items exec_swap (exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 60
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_dup_times integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (exec_swap string_rest integer_add exec_noop integer_min exec_swap (boolean_not integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 60
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (233 233 239 233 150 233 233 233 241 335 233 239 233 159 125 125 150 132 233 131 125 125 239 125 233 233 233)
Population mean number of elite cases: 10.87
Count of perfect (error zero) individuals by case: (233 233 239 233 150 233 233 233 241 335 233 239 233 159 125 125 150 132 233 131 125 125 239 125 233 233 233)
Population mean number of perfect (error zero) cases: 10.87
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec exec_when (integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)))
Partial simplification: (string_butlast exec_yankdup exec_swap (integer_add integer_fromstring) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec exec_when integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 24 0 0 0 0 0 0 0 0 16 1 4 10 47 0 0 20 20 0 12 0 0 0]
Total: 154
Mean: 5.703704
Genome size: 46
Size: 50
Percent parens: 0.080
--- Population Statistics ---
Average total errors in population: 1345932.124
Median total errors in population: 362
Error averages by case: (74144.392 24744.994 26046.02 30465.784 172248.476 14667.804 23606.29 27692.362 4411.92 3190.52 26488.936 19553.876 31589.134 30786.444 39126.78 158629.956 84760.768 20542.446 96843.814 90651.934 57617.574 64859.712 19824.428 75944.79 57912.736 54633.636 14946.598)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.048
Average program size in population (points): 46.09
Average percent parens in population: 0.154
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 106
Genome diversity (% unique Plush genomes):	 0.51
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.51
Total error diversity:				 0.162
Error (vector) diversity:			 0.162
--- Run Statistics ---
Number of program evaluations used so far: 177500
Number of point (instruction) evaluations so far: 477051206
--- Timings ---
Current time: 1481340075137 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 354
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 355
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 355
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec string_yank integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (string_yank exec_swap boolean_not exec_noop exec_swap (integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 60
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec string_yank integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (integer_dec exec_swap (integer_add integer_fromstring string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec string_yank integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 60
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (232 232 236 232 133 232 232 232 240 317 232 236 232 136 105 104 123 109 232 147 104 104 236 104 232 232 232)
Population mean number of elite cases: 10.44
Count of perfect (error zero) individuals by case: (232 232 236 232 133 232 232 232 240 317 232 236 232 136 105 104 123 109 232 147 104 104 236 104 232 232 232)
Population mean number of perfect (error zero) cases: 10.44
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_split} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_split integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Partial simplification: (string_yank exec_swap integer_add (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 24 0 0 0 0 0 0 0 0 16 1 4 10 47 0 0 20 20 0 12 0 0 0]
Total: 154
Mean: 5.703704
Genome size: 46
Size: 49
Percent parens: 0.061
--- Population Statistics ---
Average total errors in population: 5.4002617615396E10
Median total errors in population: 362
Error averages by case: (2.000144840758E9 2.00004503339E9 2.000047100026E9 2.000055824818E9 2.000339829976E9 2.000025945838E9 2.00004451345E9 2.000052752998E9 2.000007766484E9 2.00000540296E9 2.000049782804E9 2.000035303162E9 2.000059868192E9 2.000060277402E9 2.000077317862E9 2.000313643462E9 2.000167258938E9 2.00004229177E9 2.000189794322E9 2.000179274494E9 2.000114626304E9 2.000128955504E9 2.000035794784E9 2.000150600918E9 2.00011136356E9 2.00010446346E9 2.00002798776E9)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.358
Average program size in population (points): 46.114
Average percent parens in population: 0.149
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.216
Error (vector) diversity:			 0.218
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 477794734
--- Timings ---
Current time: 1481340080487 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 355
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 356
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 356
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (exec_yankdup exec_noop integer_fromstring exec_dup integer_dec exec_swap (integer_add integer_fromstring exec_dup string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Lexicase best errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 184
Lexicase best mean error: 6.814815
Lexicase best size: 62
Percent parens: 0.194
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (integer_dec exec_swap (exec_swap (integer_add exec_dup) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Zero cases best errors: [0 0 0 0 14 0 0 0 0 0 0 0 0 6 9 6 0 57 0 10 30 30 0 22 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 184
Zero cases best mean error: 6.814815
Zero cases best size: 62
Percent parens: 0.194
--- Lexicase Population Statistics ---
Count of elite individuals by case: (254 254 256 254 115 254 254 254 257 317 254 256 254 122 110 89 103 92 254 108 86 86 256 86 254 254 254)
Population mean number of elite cases: 10.77
Count of perfect (error zero) individuals by case: (254 254 256 254 115 254 254 254 257 317 254 256 254 122 110 89 103 92 254 108 86 86 256 86 254 254 254)
Population mean number of perfect (error zero) cases: 10.77
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction string_butlast} {:close 0, :instruction exec_dup_items} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_split} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (string_butlast exec_dup_items exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_split integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec boolean_eq integer_dec integer_max string_replacefirst)) ())
Partial simplification: (string_butlast string_yank string_butlast exec_dup_items exec_swap (boolean_not integer_add exec_noop) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 23 0 0 0 0 0 0 0 0 15 0 3 9 48 0 1 21 21 0 13 0 0 0]
Total: 154
Mean: 5.703704
Genome size: 50
Size: 55
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 2574311.128
Median total errors in population: 362
Error averages by case: (142909.554 44618.622 46715.51 55372.944 336207.94 25649.024 43761.702 51847.87 7386.894 5122.268 49071.948 34920.898 59034.93 58649.086 75127.634 309728.682 164440.748 39092.144 187495.656 176143.992 111525.796 125729.302 35412.142 147407.184 110179.848 103431.89 27326.92)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.968
Average program size in population (points): 46.97
Average percent parens in population: 0.152
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 59
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 59
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.184
Error (vector) diversity:			 0.192
--- Run Statistics ---
Number of program evaluations used so far: 178500
Number of point (instruction) evaluations so far: 478532773
--- Timings ---
Current time: 1481340085929 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 356
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 357
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 357
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_fromboolean integer_dec integer_dec integer_dec integer_dec integer_dec exec_when (integer_dec integer_dec integer_max string_replacefirst)))
Lexicase best partial simplification: (string_yank exec_swap (integer_add integer_fromstring) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Lexicase best errors: [0 0 0 0 23 0 0 0 0 0 0 0 0 15 0 3 9 48 0 1 21 21 0 13 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 154
Lexicase best mean error: 5.703704
Lexicase best size: 50
Percent parens: 0.080
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_fromboolean} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_when} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_fromboolean integer_dec integer_dec integer_dec integer_dec integer_dec exec_when (integer_dec integer_dec integer_max string_replacefirst)))
Zero cases best partial simplification: (string_butlast exec_swap (integer_add exec_noop) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Zero cases best errors: [0 0 0 0 23 0 0 0 0 0 0 0 0 15 0 3 9 48 0 1 21 21 0 13 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 154
Zero cases best mean error: 5.703704
Zero cases best size: 50
Percent parens: 0.080
--- Lexicase Population Statistics ---
Count of elite individuals by case: (258 258 259 258 110 258 258 258 263 321 258 259 258 106 110 113 115 89 258 104 82 82 259 82 258 258 258)
Population mean number of elite cases: 10.90
Count of perfect (error zero) individuals by case: (258 258 259 258 110 258 258 258 263 321 258 259 258 106 110 113 115 89 258 104 82 82 259 82 258 258 258)
Population mean number of perfect (error zero) cases: 10.90
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_empty} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec boolean_empty integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Partial simplification: (exec_yankdup exec_swap (integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 24 0 0 0 0 0 0 0 0 16 1 4 10 47 0 0 20 20 0 12 0 0 0]
Total: 154
Mean: 5.703704
Genome size: 46
Size: 49
Percent parens: 0.061
--- Population Statistics ---
Average total errors in population: 2654803.266
Median total errors in population: 362
Error averages by case: (146612.312 47971.294 50464.294 59245.906 341594.656 28082.804 46063.01 54234.778 8042.768 5598.112 51698.994 37746.418 61841.794 60737.13 77416.182 314680.104 168021.592 40937.068 191700.746 179778.476 114306.08 128689.634 38276.372 150647.344 114026.276 107417.82 28971.302)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.906
Average program size in population (points): 46.454
Average percent parens in population: 0.141
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.206
Error (vector) diversity:			 0.21
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 479279859
--- Timings ---
Current time: 1481340091658 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 357
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 358
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 358
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_yank boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec string_yank integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)) ()) ())
Lexicase best partial simplification: (boolean_yank string_swap exec_dup (exec_swap (boolean_not integer_add integer_fromstring) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec string_yank integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 56
Percent parens: 0.179
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_yank} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction string_yank} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_yank boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec string_yank integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)) ()) ())
Zero cases best partial simplification: (string_yank boolean_not exec_noop integer_fromstring integer_dec exec_swap (integer_add integer_fromstring) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 56
Percent parens: 0.179
--- Lexicase Population Statistics ---
Count of elite individuals by case: (278 278 279 278 120 278 278 278 283 343 278 279 278 109 112 122 126 92 278 118 86 86 279 86 278 278 278)
Population mean number of elite cases: 11.71
Count of perfect (error zero) individuals by case: (278 278 279 278 120 278 278 278 283 343 278 279 278 109 112 122 126 92 278 118 86 86 279 86 278 278 278)
Population mean number of perfect (error zero) cases: 11.71
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_split} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction boolean_eq} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (string_butlast string_yank exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_split integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec boolean_eq integer_dec integer_max string_replacefirst)) ())
Partial simplification: (string_butlast exec_yankdup exec_swap (integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_split integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 23 0 0 0 0 0 0 0 0 15 0 3 9 48 0 1 21 21 0 13 0 0 0]
Total: 154
Mean: 5.703704
Genome size: 50
Size: 55
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 71894.006
Median total errors in population: 268
Error averages by case: (3409.04 1966.984 2067.94 2212.746 6477.274 1545.008 1769.216 1895.36 989.616 932.896 1902.058 1741.22 2073.054 1964.502 2287.626 6101.158 3743.138 1926.574 4134.176 3960.25 2976.006 3209.624 1754.684 3533.4 2981.954 2914.976 1423.526)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 40.224
Average program size in population (points): 46.786
Average percent parens in population: 0.143
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.536
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.536
Total error diversity:				 0.174
Error (vector) diversity:			 0.18
--- Run Statistics ---
Number of program evaluations used so far: 179500
Number of point (instruction) evaluations so far: 480004551
--- Timings ---
Current time: 1481340098231 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 358
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 359
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 359
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (string_fromboolean integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_dup_times integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Lexicase best partial simplification: (string_yank boolean_not integer_add integer_min exec_dup_items exec_swap (exec_swap (string_fromboolean integer_add) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max)))
Lexicase best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Lexicase best number of elite cases: 18
Lexicase best total error: 220
Lexicase best mean error: 8.148149
Lexicase best size: 60
Percent parens: 0.200
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction string_rest} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 0, :instruction exec_dup} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction integer_dec} {:close 0, :instruction exec_swap} {:close 0, :instruction string_fromboolean} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 0, :instruction exec_dup} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_dup_times} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (string_butlast string_yank exec_yankdup exec_swap (integer_dec exec_swap (boolean_not string_rest boolean_not integer_add exec_noop integer_fromstring exec_dup (string_swap) exec_dup (integer_min exec_dup_items) exec_swap (integer_dec exec_swap (string_fromboolean integer_add exec_noop integer_fromstring exec_dup (string_swap) string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_dup_times integer_dec integer_dec integer_dec integer_max string_replacefirst)) ()) ()) ())
Zero cases best partial simplification: (boolean_not string_rest exec_noop exec_swap (integer_add string_parse_to_chars) (in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Zero cases best errors: [0 0 0 0 8 0 0 0 0 0 0 0 0 0 15 12 6 63 0 16 36 36 0 28 0 0 0]
Zero cases best number of elite cases: 18
Zero cases best number of zero cases: 18
Zero cases best total error: 220
Zero cases best mean error: 8.148149
Zero cases best size: 60
Percent parens: 0.200
--- Lexicase Population Statistics ---
Count of elite individuals by case: (271 271 272 271 129 271 271 271 274 341 271 272 271 124 110 126 131 99 271 128 95 95 272 95 271 271 271)
Population mean number of elite cases: 11.63
Count of perfect (error zero) individuals by case: (271 271 272 271 129 271 271 271 274 341 271 272 271 124 110 126 131 99 271 128 95 95 272 95 271 271 271)
Population mean number of perfect (error zero) cases: 11.63
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction string_butlast} {:close 0, :instruction string_yank} {:close 0, :instruction exec_yankdup} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction exec_noop} {:close 0, :instruction integer_fromstring} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_dup_items} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction string_split} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_dec} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (string_butlast string_yank exec_yankdup exec_swap (boolean_not integer_add exec_noop integer_fromstring string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec string_split integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max string_replacefirst))
Partial simplification: (exec_yankdup exec_swap (integer_add exec_noop string_parse_to_chars) (integer_dup_items in1 100 in2 integer_mult in1 100 integer_mult integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_dec integer_max))
Errors: [0 0 0 0 24 0 0 0 0 0 0 0 0 16 1 4 10 47 0 0 20 20 0 12 0 0 0]
Total: 154
Mean: 5.703704
Genome size: 46
Size: 49
Percent parens: 0.061
--- Population Statistics ---
Average total errors in population: 5174927.856
Median total errors in population: 284
Error averages by case: (286823.768 90063.7 94461.086 111825.114 673650.138 51640.168 87896.404 104141.044 14252.892 9554.906 98646.094 70392.686 118660.924 118076.296 151551.324 621144.998 330368.59 80742.822 376099.444 354031.726 225151.15 253608.796 71395.536 296800.29 221330.716 207887.16 54730.084)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.314
Average program size in population (points): 45.682
Average percent parens in population: 0.142
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.542
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.542
Total error diversity:				 0.176
Error (vector) diversity:			 0.184
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 480733847
--- Timings ---
Current time: 1481340104467 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 359
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 360
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 360
--- Lexicse Program with Most Elite Cases Statistics ---
Lexicase best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_length} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Lexicase best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup in2 exec_do*range (99 in2 integer_mult in1 boolean_not integer_add in1 100 integer_mult string_length integer_max string_replacefirst)))
Lexicase best partial simplification: (exec_swap (boolean_not integer_add) (in2 99 in2 integer_mult in1 integer_add in1 100 integer_mult string_length integer_max))
Lexicase best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Lexicase best number of elite cases: 27
Lexicase best total error: 0
Lexicase best mean error: 0.0
Lexicase best size: 34
Percent parens: 0.147
--- Lexicse Program with Most Zero Cases Statistics ---
Zero cases best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_length} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Zero cases best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup in2 exec_do*range (99 in2 integer_mult in1 boolean_not integer_add in1 100 integer_mult string_length integer_max string_replacefirst)))
Zero cases best partial simplification: (exec_swap integer_add (in2 99 in2 integer_mult in1 integer_add in1 100 integer_mult integer_max))
Zero cases best errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Zero cases best number of elite cases: 27
Zero cases best number of zero cases: 27
Zero cases best total error: 0
Zero cases best mean error: 0.0
Zero cases best size: 34
Percent parens: 0.147
--- Lexicase Population Statistics ---
Count of elite individuals by case: (281 281 285 281 128 281 281 281 286 328 281 285 281 114 103 107 100 84 281 116 80 80 285 80 281 281 281)
Population mean number of elite cases: 11.67
Count of perfect (error zero) individuals by case: (281 281 285 281 128 281 281 281 286 328 281 285 281 114 103 107 100 84 281 116 80 80 285 80 281 281 281)
Population mean number of perfect (error zero) cases: 11.67
--- Best Program (based on total-error) Statistics ---
Best genome: ({:close 0, :instruction boolean_dup_times} {:close 0, :instruction integer_min} {:close 1, :instruction exec_dup_items} {:close 0, :instruction exec_swap} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction string_pop} {:close 0, :instruction string_dup} {:close 0, :instruction string_dup} {:close 0, :instruction exec_dup} {:close 0, :instruction string_yank} {:close 1, :instruction string_swap} {:close 1, :instruction string_parse_to_chars} {:close 0, :instruction integer_add} {:close 0, :instruction exec_yankdup} {:close 0, :instruction in2} {:close 0, :instruction exec_do*range} {:close 0, :instruction 99} {:close 0, :instruction in2} {:close 0, :instruction integer_mult} {:close 0, :instruction in1} {:close 0, :instruction boolean_not} {:close 0, :instruction integer_add} {:close 0, :instruction in1} {:close 0, :instruction 100} {:close 0, :instruction integer_mult} {:close 0, :instruction string_length} {:close 0, :instruction integer_max} {:close 0, :instruction string_replacefirst})
Best program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup in2 exec_do*range (99 in2 integer_mult in1 boolean_not integer_add in1 100 integer_mult string_length integer_max string_replacefirst)))
Partial simplification: (exec_swap integer_add (in2 99 in2 integer_mult in1 integer_add in1 100 integer_mult integer_max))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total: 0
Mean: 0.0
Genome size: 29
Size: 34
Percent parens: 0.147
--- Population Statistics ---
Average total errors in population: 136560.42
Median total errors in population: 284
Error averages by case: (5877.102 3807.42 4024.97 4207.682 9096.388 3044.09 3495.088 3752.39 1957.878 1751.954 3663.318 3404.806 3941.446 4481.044 5365.182 9222.318 6941.456 6600.562 6662.698 7411.492 6920.3 7190.456 3430.644 7296.42 5081.23 4979.03 2953.056)
Error minima by case: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
Average genome size in population (length): 39.802
Average program size in population (points): 46.182
Average percent parens in population: 0.139
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.554
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.554
Total error diversity:				 0.186
Error (vector) diversity:			 0.192
--- Run Statistics ---
Number of program evaluations used so far: 180500
Number of point (instruction) evaluations so far: 481478421
--- Timings ---
Current time: 1481340109199 milliseconds
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 360
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 360
Successful program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup in2 exec_do*range (99 in2 integer_mult in1 boolean_not integer_add in1 100 integer_mult string_length integer_max string_replacefirst)))
Errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Total error: 0
History: null
Size: 34


Auto-simplifying with starting size: 34
step: 0
program: (boolean_dup_times integer_min exec_dup_items exec_swap (boolean_not integer_add string_pop string_dup string_dup exec_dup (string_yank string_swap) string_parse_to_chars) (integer_add exec_yankdup in2 exec_do*range (99 in2 integer_mult in1 boolean_not integer_add in1 100 integer_mult string_length integer_max string_replacefirst)))
errors: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
total: 0
size: 34

step: 500
program: (exec_swap integer_add (in2 99 in2 integer_mult in1 integer_add in1 100 integer_mult integer_max))
errors: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
total: 0
size: 14

step: 1000
program: (exec_swap integer_add (in2 99 in2 integer_mult in1 integer_add in1 100 integer_mult integer_max))
errors: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
total: 0
size: 14

;;******************************
;; Problem-Specific Report of Simplified Solution
